\input texinfo.tex @c -*- texinfo -*-
@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c %**start of header
@setfilename bashref.info
@settitle Manual de Referencia de Bash
@documentlanguage es

@include version.texi
@c %**end of header

@copying
Este texto es una breve descripci@'on de las funcionalidades presentes en el
int@'erprete de @'ordenes de Bash (version @value{VERSION},
@value{UPDATED}).

Esta es la Edici@'on @value{EDITION}, actualizada por @'ultima vez
@value{UPDATED}, de @cite{Manual de Referencia de Bash}, para
@code{Bash}, Version @value{VERSION}.

Las fuentes de este documento están accesibles desde
https://notabug.org/jorgesumle/bashrefes.

Copyright @copyright{} 1988--2016 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document under
the terms of the GNU Free Documentation License, Version 1.3 or any later
version published by the Free Software Foundation; with no Invariant
Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License''.
@end quotation
@end copying

@defcodeindex bt
@defcodeindex rw
@set BashFeatures

@dircategory B@'asicos
@direntry
* Bash: (bash).              La GNU Bourne-Again SHell.
@end direntry

@finalout

@titlepage
@title Manual de Referencia de Bash
@subtitle Documentaci@'on de Referencia para Bash
@subtitle Edici@'on @value{EDITION}, para @code{Bash} Versi@'on @value{VERSION}.
@subtitle @value{UPDATED-MONTH}
@author Chet Ramey, Case Western Reserve University
@author Brian Fox, Free Software Foundation

@page
@vskip 0pt plus 1filll
@insertcopying

@end titlepage

@contents

@ifnottex
@node Top, Introducci@'on, (dir), (dir)
@top Funcionalidades de Bash

Este texto es una descripci@'on breve de las funcionalidades presentes en el
int@'erprete de @'ordenes Bash (versi@'on @value{VERSION},
@value{UPDATED}).  El sitio web la Bash es
@url{http://www.gnu.org/software/bash/}.

Esta es la Edici@'on @value{EDITION}, actualizada por @'ultima vez
@value{UPDATED}, de @cite{Manual de Referencia de Bash}, para
@code{Bash}, Version @value{VERSION}.

Las fuentes de este documento están accesibles desde
https://notabug.org/jorgesumle/bashrefes.

Bash contiene funcionalidades que aparecen en otros int@'erpretes de
instrucciones populares, y algunas funcionalidades que solo aparecen en
Bash.  Algunos de los int@'erpretes de los que Bash ha tomado conceptos son
el Bourne Shell (@file{sh}), el Korn Shell (@file{ksh}) y el C-shell
(@file{csh} y su sucesor, @file{tcsh}).  El siguiente men@'u divide las
funcionalidades en categor@'{@dotless{i}}as, mencionando qu@'e
funcionalidades fueron inspiradas por otros int@'erpretes y cu@'ales son
propias de Bash.

Este manual est@'a pensado como una breve introducci@'on a las
funcionalidades que se encuentran en Bash.  La p@'agina de manual de Bash
deber@'{@dotless{i}}a usarse como la referencia definitiva sobre el
compartamiento del int@'erprete de @'ordenes.

@menu
* Introducci@'on::           Una introducci@'on al int@'erprete de 
                               @'ordenes.
* Definiciones::             Algunas definiciones usadas en el resto de este 
                               manual.
* Funcionalidades B@'asicas del Int@'erprete::  Los "bloques constructores" 
                                                  del int@'erprete.
* Instrucciones Integradas del Int@'erprete::  Instrucciones que son parte 
                                                 del int@'erprete.
* Variables del Int@'erprete::  Variables usadas o establecidas por Bash.
* Funcionalidades de Bash::  Funcionalidades @'unicas de Bash.
* Control de Tareas::        Qu@'e es el control de tareas y c@'omo te 
                               permite Bash usarlo.
* Edici@'on en L@'{@dotless{i}}nea de @'Ordenes::  Cap@'{@dotless{i}}tulo 
                                                     que describe las 
                                                     funcionalidades de la 
                                                     edici@'on 
                                                     enl@'{@dotless{i}}nea de 
                                                     @'ordenes.
* Usando el Historial Interactivamente::  Expansi@'on del Historial de 
                                            @'Ordenes
* Instalaci@'on de Bash::    C@'omo construir e instalar Bash en tu sistema.
* Notificar Errores::        C@'omo notificar errores en Bash.
* Diferencias Principales Respecto a The Bourne Shell::  Una escueta lista 
                                                           de las diferencias 
                                                           entre Bash y 
                                                           versiones 
                                                           hist@'oricas 
                                                           de/bin/sh.
* GNU Free Documentation License::  Copiar y compartir esta documentaci@'on.
* Traducci@'on de GNU Free Documentation License::  Copiar y compartir esta documentaci@'on (en espa@~nol).
* Glosarios::                Varios glosarios para este manual.
@end menu
@end ifnottex

@node Introducci@'on
@chapter Introducci@'on
@menu
* ¿Qu@'e es Bash?::         Una breve descripci@'on de Bash.
* ¿Qu@'e es un int@'erprete?::  Una breve introducci@'on a los 
                                   int@'erpretes de instrucciones.
@end menu

@node ¿Qu@'e es Bash?
@section ¿Qu@'e es Bash?

Bash es el int@'erprete, o el lenguaje int@'erprete de @'ordenes, para el
sistema operativo @sc{gnu}.  El nombre es un acr@'onimo de
@samp{Bourne-Again SHell}, un juego de palabras con Stephen Bourne, el autor
del ancestro directo del actual int@'erprete @code{sh}, que apareci@'o en la
versi@'on Seventh Edition Bell Labs Research de Unix.

Bash es en gran parte compatible con @code{sh} e incorpora funcionalidades
@'utiles del int@'erprete Korn @code{ksh} y el int@'erprete C @code{csh}.
Esta concebido para ser una implementaci@'on que se ajusta a la parte
@sc{ieee} @sc{posix} Shell and Tools de la especificaci@'on @sc{ieee}
@sc{posix} (@sc{ieee} Standard 1003.1).  Ofrece mejoras funcionales sobre
@code{sh} tanto para uso interactivo como para programar.

Aunque el sistema operativo @sc{gnu} proporciona otros int@'erpretes de
@'ordenes, incluyendo una versi@'on de @code{csh}, Bash es el int@'erprete
predeterminado.  Al igual que otro software de @sc{gnu}, Bash es bastante
portable.  Actualmente se ejecuta en casi cualquier versi@'on de Unix y
algunos otros sistemas operativos ---existen versiones portadas mantenidas
de forma independiente para @sc{ms-dos}, @sc{os/2} y plataformas Windows---.

@node ¿Qu@'e es un int@'erprete?
@section ¿Qu@'e es un int@'erprete?

B@'asicamente, un int@'erprete es simplemente un procesador de macros que
ejecuta instrucciones.  El t@'ermino procesador de macros significa
funcionalidad donde texto y s@'{@dotless{i}}mbolos son expandidos para crear
expresiones m@'as grandes.

Un int@'erprete de Unix es tanto un int@'erprete de @'ordenes como un
lenguaje de programaci@'on.  Como un int@'erprete de instrucciones, el
int@'erprete proporciona la interfaz de usuario a un variado conjunto de
utilidades de @sc{gnu}.  Las funcionalidades del lenguaje de programaci@'on
permiten que est@'as utilidades se combinen.  Se pueden crear archivos que
contienen instrucciones, y convertirse ellos mismos en instrucciones.  Estas
nuevas @'ordenes tienen la misma naturaleza que instrucciones del sistema en
directorios como @file{/bin}, permitiendo que usuarios o grupos puedan
establecer entornos personalizados para automatizar sus tareas comunes.

Los int@'erpretes pueden ser usados de forma interactiva o de forma no
interactiva.  En el modo interactivo, aceptan la entrada escrita desde el
teclado.  Cuando se ejecutan de forma no interactiva, los int@'erpretes
ejecutan instrucciones le@'{@dotless{i}}das de un archivo.

Un int@'erprete permite la ejecuci@'on de instrucciones @sc{gnu}, tanto
s@'{@dotless{i}}ncrona como as@'{@dotless{i}}ncronamente.  El int@'erprete
espera a que las instrucciones s@'{@dotless{i}}ncronas se completen antes de
aceptar m@'as entradas; las instrucciones as@'{@dotless{i}}ncronas
contin@'uan ejecut@'andose en paralelo con el int@'erprete mientras que lee
y ejecuta instrucciones adicionales.  Las construcciones de
@dfn{redirecci@'on} permiten un control preciso de la entrada y la salida de
esas instrucciones.  Asimismo, el int@'erprete proporciona control sobre los
contenidos de los entornos de instrucciones.

Los int@'erpretes tambi@'en proporcionan un peque@~no conjunto de
instrucciones integradas (@dfn{builtins}) que implementan funcionalidad
imposible o inconveniente de obtener mediante utilidades separadas.  Por
ejemplo, @code{cd}, @code{break}, @code{continue} y @code{exec} no pueden
ser implementados fuera del int@'erprete porque manipulan directamente el
int@'erprete en s@'{@dotless{i}} mismo.  Las instrucciones integradas
@code{history}, @code{getopts}, @code{kill} o @code{pwd}, entre otras,
podr@'{@dotless{i}}an ser implementadas en utilidades separadas, pero son
m@'as convenientes de usar como instrucciones integradas.  Todas las
funciones integradas del int@'erprete son descritas en las secciones
posteriores.

Mientras que la ejecuci@'on de instrucciones es esencial, la
mayor@'{@dotless{i}}a del poder (y de la complejidad) de los int@'erpretes
es debido a sus lenguajes de programaci@'on integrados.  Como cualquier otro
lenguaje de alto nivel, el int@'erprete proporciona variables, estructuras
de control de flujo, entrecomillado y funciones. 

Los int@'erpretes ofrecen funcionalidades enfocadas
espec@'{@dotless{i}}ficamente para uso interactivo en vez de para aumentar
el lenguaje de programaci@'on.  Estas funcionalidades interactivas incluyen
control de tareas, edici@'on en l@'{@dotless{i}}nea de @'ordenes, historial
de instrucciones y aliases.  En este manual se describe cada una de estas
funcionalidades.

@node Definiciones
@chapter Definiciones
Estas definiciones son usadas a lo largo de este manual.

@table @code

@item POSIX
@cindex POSIX
Una familia de est@'andares de sistemas abiertos basado en Unix.  Bash se
ata@~ne principalmente a la porci@'on Shell and Utilities del est@'andar
@sc{posix} 1003.1. 

@item vac@'{@dotless{i}}o
Un car@'acter de espacio o tabulaci@'on.

@item instrucci@'on integrada
@cindex instrucci@'on integrada
Una instrucci@'on que est@'a implementada internamente por el propio
int@'erprete, en vez de por un programa ejecutable en alg@'un lugar del
archivo de ficheros.

@item operador de control
@cindex operador de control
Un @code{s@'{@dotless{i}}mbolo} que realiza una funci@'on de control.  Es
una @code{nueva l@'{@dotless{i}}nea} o uno de los siguientes: @samp{||},
@samp{&&}, @samp{&}, @samp{;}, @samp{;;}, @samp{;&}, @samp{;;&}, @samp{|},
@samp{|&}, @samp{(}, o @samp{)}.

@item estado de salida
@cindex estado de salida
El valor devuelto por una instrucci@'on a su ejecutor.  El valor est@'a
restringido a ocho bits, as@'{@dotless{i}} que el m@'aximo valor es 255.

@item campo
@cindex campo
Una unidad de texto que es el resultado de una de las expansiones del
int@'erprete.  Despu@'es de la expansi@'on, cuando se ejecuta un comando,
los campos resultantes son usados como el nombre de instrucci@'on y los
argumentos.

@item nombre de archivo
@cindex nombre de archivo
Una cadena de caracteres usada para identificar a un archivo.

@item tarea
@cindex tarea
Un conjunto de procesos que componen una tuber@'{@dotless{i}}a, y cualquier
otro proceso que descienda de ella, que se encuentran todos en el mismo
grupo de proceso.

@item control de tareas
@cindex control de tareas
Un mecanismo por el cual los usuarios pueden selectivamente parar
(suspender) o reiniciar (reanudar) la ejecuci@'on de procesos.

@item metacar@'acter
@cindex metacar@'acter
Un car@'acter que, cuando no est@'a entrecomillado, separa palabras.  Un
metacar@'acter es @code{espacio}, @code{tabulaci@'on}, @code{nueva
l@'{@dotless{i}}nea} o uno de los siguientes caracteres: @samp{|}, @samp{&},
@samp{;}, @samp{(}, @samp{)}, @samp{<}, or @samp{>}.

@item nombre
@cindex nombre
@cindex identificador
Una @code{palabra} que solo est@'a compuesta de letras, n@'umeros y barras
bajas, y comienza por una letra o barra baja.  Los @code{Nombre}s son usados
como nombres de variables y funciones del int@'erprete.  Tambi@'en
mencionado como @code{indentificador}.

@item operador
@cindex operador, int@'erprete
Un @code{operador de control} o un @code{operador de redirecci@'on}.
@xref{Redirecciones}, para una lista de los operadores de redirecci@'on.
Los operadores contienen al menos un @code{metacar@'acter} sin
entrecomillar.

@item grupo de proceso
@cindex grupo de proceso
Una colecci@'on de procesos relacionados que tienen el mismo @sc{id} de
proceso de grupo.

@item ID de proceso de grupo
@cindex ID de proceso de grupo
Un identificador @'unico que representa un @code{proceso de grupo} durante
su tiempo de vida.

@item palabra reservada
@cindex palabra reservada
Una @code{palabra} que tiene un significado especial para el int@'erprete.
La mayor@'{@dotless{i}}a de palabras reservadas introducen construcciones de
control de flujo, como @code{for} y @code{while}.

@item estado de retorno
@cindex estado de retorno
Un sin@'onimo de @code{estado de salida}.

@item se@~nal
@cindex se@~nal
Un mecanismo por el cual un proceso puede ser notificado por el n@'ucleo de
un evento ocurrido en el sistema.

@item instrucci@'on integrada especial
@cindex instrucci@'on integrada especial
Una instrucci@'on integrada del int@'erprete que ha sido clasificada como
especial por el est@'andar @sc{posix}.

@item s@'{@dotless{i}}mbolo
@cindex s@'{@dotless{i}}mbolo
Una secuencia de caracteres considerada como unidad @'unica por el
int@'erprete.  O bien es una @code{palabra} o un @code{operador}

@item palabra
@cindex palabra
Una secuencia de caracteres tratada como una unidad por el int@'erprete.
Las palabras no pueden incluir @code{metacaracteres} sin entrecomillar.
@end table

@node Funcionalidades B@'asicas del Int@'erprete
@chapter Funcionalidades B@'asicas del Int@'erprete
@cindex Bourne shell

Bash es un acr@'onimo para @samp{Bourne-Again SHell}.  El Bourne shell es el
int@'erprete tradicional de Unix escrito originalmente por Stephen Bourne.
Todas las instrucciones integradas del Bourne shell est@'an disponibles en
Bash. Las reglas para evaluaci@'on y entrecomillado se toman de la
especificaci@'on @sc{posix} para el int@'erprete Unix `est@'andar'.

Este cap@'{@dotless{i}}tulo resume brevemente los `bloques constructores'
del int@'erprete: instrucciones, estructuras de control, funciones del
int@'erprete, @i{par@'ametros} del int@'erprete, expansiones del
int@'erprete, @i{redirecciones}, las cuales son una forma de dirigir entrada
y salida desde y hacia archivos nombrados, y c@'omo el int@'erprete ejecuta
instrucciones.

@menu
* Sintaxis del Int@'erprete::  Qu@'e significa su entrada para el 
                                 int@'erprete.
* Instrucciones del Int@'erprete::  Los tipos de instrucciones que puede 
                                      usar.
* Funciones del Int@'erprete::  Agrupando instrucciones por nombre.
* Par@'ametros del Int@'erprete::  C@'omo el int@'erprete guarda valores.
* Expansiones del Int@'erprete::  C@'omo Bash expande par@'ametros y las 
                                    distintas expansiones disponibles.
* Redirecciones::            Una forma de controlar ad@'onde van la entrada 
                               y la salida.
* Ejecutando Instrucciones::  Qu@'e pasa cuando ejecutas una instrucci@'on.
* Guiones del Int@'erprete::  Ejecutando archivos de instrucciones del 
                                int@'erprete.
@end menu

@node Sintaxis del Int@'erprete
@section Sintaxis del Int@'erprete
@menu
* Funcionamiento del Int@'erprete::  El funcionamiento b@'asico del 
                                       int@'erprete.
* Entrecomillado::           C@'omo eliminar el significado especial de 
                               caracteres.
* Comentarios::              C@'omo especificar comentarios.
@end menu

Cuando el int@'erprete lee la entrada, procede a trav@'es de una secuencia
de operaciones.  Si la entrada indica el inicio de un comentario, el
int@'erprete ignora el s@'{@dotless{i}}mbolo de comentario (@samp{#}) y el
resto de esa l@'{@dotless{i}}nea.
                                
De lo contrario, b@'asicamente, el int@'erprete lee su entrada y divide la
entrada en palabras y operadores, empleando las reglas de entrecomillado
para elegir qu@'e significados asignar a varias palabras y caracteres.

El int@'erprete entonces transforma estos s@'{@dotless{i}}mbolos en
instrucciones y otras construcciones, elimina el significado especial de
ciertas palabras o caracteres, expande otros, redirige entrada y salida
seg@'un sea necesario, ejecuta la instrucci@'on especificada, espera el
estado de salida de la instrucci@'on y deja disponible ese estado de salida
para inspecci@'on o procesamiento posterior.

@node Funcionamiento del Int@'erprete
@subsection Funcionamiento del Int@'erprete

Lo siguiente es una breve descripci@'on del funcionamiento del int@'erprete
cuando lee y ejecuta una instrucci@'on.  B@'asicamente, el int@'erprete hace
lo siguiente:

@enumerate
@item
Lee su entrada de un archivo (@pxref{Guiones del Int@'erprete}), de una
cadena proporcionada como un argumento para la opci@'on de llamada
@option{-c} (@pxref{Llamando a Bash}) o de la terminal del usuario.

@item
Divide la entrada en palabras y operadores, atendiendo a las reglas de
entrecomillado descritas en @ref{Entrecomillado}.  Estos
s@'{@dotless{i}}mbolos son separados por @code{metacaracteres}.  La
expansi@'on de alias se realiza por este paso (@pxref{Aliases}).

@item
Transforma estos s@'{@dotless{i}}mbolos en instrucciones simples y
compuestas (@pxref{Instrucciones del Int@'erprete}).

@item
Realiza las distintas expansiones del int@'erprete (@pxref{Expansiones del
Int@'erprete}), dividiendo los s@'{@dotless{i}}mbolos expandidos en listas
de nombres de archivo (@pxref{Expansi@'on de Nombre de Archivo}  e
instrucciones y argumentos.

@item
Realiza cualquier redirecci@'on necesaria (@pxref{Redirecciones}) y elimina
los operadores de redirecci@'on y sus operandos de la lista de argumentos.

@item
Ejecuta la instrucci@'on (@pxref{Ejecutando Instrucciones}).

@item
Opcionalmente espera a que la instrucci@'on termine y recoge su estado de
salida (@pxref{Estado de Salida}).

@end enumerate

@node Entrecomillado
@subsection Entrecomillado
@cindex entrecomillado
@menu
* Car@'acter de Escape::     C@'omo eliminar el significado especial de un 
                               car@'acter simple.
* Comillas Simples::         C@'omo inhibir toda interpretaci@'on de una 
                               secuencia de caracteres.
* Comillas Dobles::          C@'omo suprimir la mayor parte de la 
                               interpretaci@'on de una secuencia decaracteres.
* Entrecomillado ANSI-C::    C@'omo expandir secuencias de ANSI-C en cadenas 
                               entrecomilladas.
* Traducci@'on de Localizaci@'on::  C@'omo traducir cadenas a diferentes 
                                      idiomas.
@end menu

El entrecomillado se usa para eliminar el significado especial para el
int@'erprete de ciertos caracteres o palabras.  El entrecomillado se puede
usar para deshabilitar el tratamiento especial de caracteres especiales,
para evitar que se reconozcan palabras reservadas como tales y para evitar
la expansi@'on de par@'ametro.

Cada uno de los metacaracteres del int@'erprete (@pxref{Definiciones}) tiene
un significado especial para el int@'erprete y debe ser entrecomillado si se
representa a s@'{@dotless{i}} mismo.  Cuando se usan las facilidades de
expansi@'on del historial de instrucciones (@pxref{Interacci@'on con el
Historial}), el car@'acter de @var{expansi@'on de historial}, normalmente
@samp{!}, debe entrecomillarse para evitar la expansi@'on de historial.
@xref{Servicios del Historial de Bash}, para m@'as detalles sobre la
expansi@'on de historial.

Hay tres mecanismos de entrecomillado: el @var{car@'acter de escape},
comillas simples y comillas dobles.

@node Car@'acter de Escape
@subsubsection Car@'acter de Escape
La barra invertida sin entrecomillar @samp{\} es el car@'acter de escape de
Bash.  Preserva el valor literal del siguiente car@'acter que lo sigue, con
la excepci@'on de @code{nueva l@'{@dotless{i}}nea}.  Si aparece una pareja
@code{\nueva l@'{@dotless{i}}nea} y la barra invertida en s@'{@dotless{i}}
no est@'a entrecomillada, la @code{\nueva l@'{@dotless{i}}nea} se trata como
una continuaci@'on de l@'{@dotless{i}}nea (es decir, es eliminada del flujo
de entrada y es efectivamente ignorada).

@node Comillas Simples
@subsubsection Comillas Simples

Encerrar caracteres en comillas simples (@samp{'}) preserva el valor literal
de cada car@'acter dentro de las comillas.  Una comilla simple no puede
encontrarse entre comillas simples, incluso precedida de una barra
invertida.

@node Comillas Dobles
@subsubsection Comillas Dobles

Encerrar caracteres en comillas dobles (@samp{"}) preserva el valor literal
de todos los caracteres entre las comillas, con la excepci@'on de @samp{$},
@samp{`}, @samp{\} y, cuando est@'a activada la expansi@'on de historial,
@samp{!}.  Cuando el int@'erprete est@'a en modo @sc{posix} (@pxref{Modo
POSIX de Bash}), el @samp{!} no tiene un significado especial entre comillas
dobles, incluso cuando est@'a activada la expansi@'on de historial.  Los
caracteres @samp{$} y @samp{`} conservan su significado especial dentro de
comillas dobles (@pxref{Expansiones del Int@'erprete}).  La barra invertida
solo conserva su significado especial seguido por uno de los siguientes
caracteres: @samp{$}, @samp{`}, @samp{"}, @samp{\} o @code{nueva
l@'{@dotless{i}}nea}.  Dentro de comillas dobles, las barras invertidas que
son seguidas por uno de estos caracteres son eliminadas.  Las barras
invertidas precediendo caracteres sin un significado especial no se
modifican.  Una comilla doble puede ser entrecomillada dentro de comillas
dobles precedi@'endola con una barra invertida.  Si est@'a habilitada, la
expansi@'on del historial se realizar@'a a no ser que se escape un @samp{!}
que aparezca entre comillas dobles con una barra invertida.  La barra
invertida que precede al @samp{!} no es eliminada.

Los par@'ametros especiales @samp{*} y @samp{@@} tienen significado especial
entre comillas dobles (@pxref{Expansi@'on de Par@'ametros del
Int@'erprete}).

@node Entrecomillado ANSI-C
@subsubsection Entrecomillado ANSI-C
@cindex entrecomillado, ANSI

Las palabras de forma @code{$'@var{cadena}'} se tratan de forma especial.
La palabra se expande a @var{cadena}, con los caracteres escapados por
barras invertidas reemplazados como se especifica en el est@'andar ANSI C.
Si est@'an presentes, las secuencias de escape de barras invertidas se
decodifican as@'{@dotless{i}}:

@table @code
@item \a
alerta (timbre)
@item \b
retroceso
@item \e
@itemx \E
un car@'acter de escape (no ANSI C)
@item \f
salto de p@'agina
@item \n
nueva l@'{@dotless{i}}nea
@item \r
retorno de carro
@item \t
tabulaci@'on horizontal
@item \v
tabulaci@'on vertical
@item \\
barra invertida
@item \'
comilla simple
@item \"
comilla doble
@item \?
s@'{@dotless{i}}mbolo de interrogaci@'on de cierre
@item \@var{nnn}
la secuencia de caracteres de ocho bits cuyo valor es el valor octal
@var{nnn} (de uno a tres d@'{@dotless{i}}gitos)
@item \x@var{HH}
el car@'acter de ocho bits cuyo valor es el valor hexadecimal @var{HH} (uno
o dos d@'{@dotless{i}}gitos hexadecimales)
@item \u@var{HHHH}
el car@'acter Unicode (ISO/IEC 10646) cuyo valor es el valor hexadecimal
@var{HHHH} (de uno a cuatro d@'{@dotless{i}}gitos hexadecimales)
@item \U@var{HHHHHHHH}
el car@'acter Unicode (ISO/IEC 10646) cuyo valor es el valor hexadecimal
@var{HHHHHHHH} (de uno a ocho d@'{@dotless{i}}gitos hexadecimales)
@item \c@var{x}
un cat@'acter control-@var{x}
@end table

@noindent
El resultado expandido es entrecomillado con una comilla, como si el
s@'{@dotless{i}}mbolo de dolar no hubiera estado presente.

@node Traducci@'on de Localizaci@'on
@subsubsection Traducci@'on de Regi@'on Espec@'{@dotless{i}}fica
@cindex localizaci@'on
@cindex internacionalizaci@'on
@cindex idiomas nativos
@cindex traducci@'on, idiomas nativos

Una cadena entre comillas dobles  precedida del signo de dolar (@samp{$})
har@'a que la cadena sea traducida seg@'un la configuraci@'on regional
actual.  Si la configuraci@'on regional actual es @code{C} o @code{POSIX},
se ignora el signo de dolar.  Si la cadena se traduce y reemplaza, el
remplazo est@'a entre comillas dobles.

@vindex LC_MESSAGES
@vindex TEXTDOMAIN
@vindex TEXTDOMAINDIR
Algunos sistemas usan el cat@'alogo de mensajes elegido por la variable del
int@'erprete @env{LC_MESSAGES}.  Otros crean el nombre del cat@'alogo de
mensajes desde el valor de la variable del int@'erprete @env{TEXTDOMAIN},
posiblemente a@~nadiendo un sufijo de @samp{.mo}.  Si usa la variable
@env{TEXTDOMAIN}, puede que necesite establecer la variable
@env{TEXTDOMAINDIR} a la ubicaci@'on del archivo de cat@'alogo de mensajes.
Otros usan todav@'{@dotless{i}}a ambas variables de esta forma:
@env{TEXTDOMAINDIR}/@env{LC_MESSAGES}/LC_MESSAGES/@env{TEXTDOMAIN}.mo.

@node Comentarios
@subsection Comentarios
@cindex comentarios, int@'erprete

En un int@'erprete no interactivo o un int@'erprete interactivo en que la
opci@'on @code{interactive_comments} para la instrucci@'on integrada
@code{shopt} est@'a activada (@pxref{La Instrucci@'on Integrada Shopt}), una
palabra que empieza por @samp{#} hace que esa palabra y todos los caracteres
restantes en esa l@'{@dotless{i}}nea sean ignorados.  Un int@'erprete
interactivo sin la opci@'on @code{interactive_comments} activada no permite
comentarios.  La opci@'on @code{interactive_comments} est@'a activada por
defecto en int@'erpretes interactivos.  @xref{Int@'erpretes Interactivos},
para una descripci@'on de qu@'e hace a un int@'erprete interactivo.

@node Instrucciones del Int@'erprete
@section Instrucciones del Int@'erprete
@cindex instrucciones, int@'erprete

Una instrucci@'on simple del int@'erprete como @code{echo a b c} consta de
la instrucci@'on en s@'{@dotless{i}} seguida por argumentos, separados por
espacios.

Las instrucciones del int@'erprete m@'as complejas est@'an compuestas de
instrucciones simples organizadas conjuntamente de diferentes maneras: en
una tuber@'{@dotless{i}}a en que la salida de una instrucci@'on se convierte
en la entrada de una segunda, en un bucle o instrucci@'on condicional o en
alguna otra agrupaci@'on.

@menu
* Instrucciones Simples::    El tipo de instrucci@'on m@'as com@'un.
* Tuber@'{@dotless{i}}as::   Conectando la entrada y la salida de varias 
                               instrucciones.
* Listas::                   C@'omo ejecutar instrucciones secuencialmente.
* Instrucciones Compuestas::  Instrucciones del int@'erprete para el control 
                                del flujo.
* Coprocesos::               Comunicaci@'on bidireccional entre 
                               instrucciones.
* GNU Parallel::             Ejecutando instrucciones en paralelo.
@end menu

@node Instrucciones Simples
@subsection Instrucciones Simples
@cindex instrucciones, simple

Una instrucci@'on simple es el tipo de instrucci@'on encontrado m@'as a
menudo.  Es solo una secuencia de palabras separadas por @code{blanco}s,
terminada en uno de los operadores de control del int@'erprete
(@pxref{Definiciones}).  La primera palabra especifica generalmente una
instrucci@'on para que sea ejecutada, siendo el resto de las palabras los
argumentos de esa instrucci@'on.

El estado de retorno (@pxref{Estado de Salida}) de una instrucci@'on simple
es su estado de salida tal como estipula la funci@'on @sc{posix} 1003.1
@code{waitpid} o 128+@var{n} si la instrucci@'on fue terminada por la
se@~nal @var{n}.

@node Tuber@'{@dotless{i}}as
@subsection Tuber@'{@dotless{i}}as
@cindex tuber@'{@dotless{i}}a
@cindex instrucciones, tuber@'{@dotless{i}}a

Una @code{tuber@'{@dotless{i}}a} es una secuencia de una o m@'as
instrucciones separadas por uno de los operadores de control @samp{|} o
@samp{|&}.

@rwindex time
@rwindex !
@cindex cronometraje de instrucci@'on
El formato para una tuber@'{@dotless{i}}a es
@example
[time [-p]] [!] @var{instrucci@'on1} [ | o |& @var{instrucci@'on2} ] @dots{}
@end example

@noindent
La salida de cada instrucci@'on en la tuber@'{@dotless{i}}a es conectada por
medio de una tuber@'{@dotless{i}}a a la entrada de la siguiente
instrucci@'on.  Es decir, cada instrucci@'on lee la salida de la anterior
instrucci@'on.  Esta conexi@'on se realiza antes de cualquier redirecci@'on
especificada por la instrucci@'on.

Si se usa @samp{|&}, el error est@'andar de @var{instrucci@'on1}, adem@'as
de su salida est@'andar, es conectado a la entrada est@'andar de
@var{instrucci@'on2} a trav@'es de la tuber@'{@dotless{i}}a; es una
abreviatura de @code{2>&1 |}.  Esta redirecci@'on impl@'{@dotless{i}}cita
del error est@'andar a la salida est@'andar es realizada despu@'es de
cualquier redirecci@'on especificada por la instrucci@'on.

La palabra reservada @code{time} hace que sean imprimidas
estad@'{@dotless{i}}sticas temporales para la tuber@'{@dotless{i}}a
una vez finalice.  Las estad@'{@dotless{i}}sticas constan actualmente
del tiempo (de reloj) transcurrido y del tiempo de usuario y de
sistema consumido por la ejecuci@'on de la instrucci@'on.  La opci@'on
@option{-p} cambia el formato de salida al especificado por
@sc{posix}.  Cuando el int@'erprete est@'a en el modo @sc{posix}
(@pxref{Modo POSIX de Bash}), no reconoce @code{time} como una palabra
reservada si el siguiente s@'{@dotless{i}}mbolo comienza por @samp{-}.
La variable @env{TIMEFORMAT} puede ser establecida a un formato que
especifica c@'omo debe ser mostrada la informaci@'on temporal.
@xref{Variables de Bash}, para una descripci@'on de los formatos
disponibles.  El uso de @code{time} como una palabra reservada permite
el cronometraje de las instrucciones integradas del int@'erprete,
funciones del int@'erprete y tuber@'{@dotless{i}}as.  Una
instrucci@'on @code{time} externa no puede cronometrar estas
f@'acilmente.

Cuando el int@'erprete est@'a en modo @sc{posix} (@pxref{Modo POSIX de
Bash}), @code{time} puede ser seguido por una nueva l@'{@dotless{i}}nea.  En
este caso, el int@'erprete muestra el tiempo total de usuario y de sistema
consumido por el int@'erprete y sus hijos.  La variable @env{TIMEFORMAT}
puede ser usada para especificar el formato de la informaci@'on temporal.

Si la tuber@'{@dotless{i}}a no es ejecutada as@'{@dotless{i}}ncronamete
(@pxref{Listas}), el int@'erprete espera a que todas las instrucciones en la
tuber@'{@dotless{i}}a se completen.

Cada instrucci@'on en una tuber@'{@dotless{i}}a es ejecutada en su propio
subint@'erprete (@pxref{Entorno de Ejecuci@'on de Instrucciones}).  El
estado de salida de una tuber@'{@dotless{i}}a es el estado de salida de la
@'ultima instrucci@'on en la tuber@'{@dotless{i}}a, a no ser que est@'e
habilitada la opci@'on @code{pipefail} (@pxref{La Instrucci@'on Integrada
Set}).  Si est@'a habilitada @code{pipefail}, el estado de retorno de la
tuber@'{@dotless{i}}a es el valor de la @'ultima (la m@'as a la derecha)
instrucci@'on que finalice con un estado error distinto a cero, o de cero si
todas las instrucciones finalizan con @'exito.  Si la palabra reservada
@samp{!} precede a la tuber@'{@dotless{i}}a, el estado de salida es la
negaci@'on l@'ogica del estado de salida como se describi@'o anteriormente.
El int@'erprete espera a que todas las instrucciones en la
tuber@'{@dotless{i}}a finalicen antes de devolver un valor.

@node Listas
@subsection Listas de Instrucciones
@cindex instrucciones, listas

Una @code{lista} es una secuencia de una o m@'as tuber@'{@dotless{i}}as
separadas por uno de los operadores @samp{;}, @samp{&}, @samp{&&} o
@samp{||}, y opcionalmente terminada por @samp{;}, @samp{&}, or a
@code{nueva l@'{@dotless{i}}nea}.

De esta lista de operadores, @samp{&&} y @samp{||} tienen igual precedencia,
seguidos de @samp{;} y @samp{&}, que tienen igual precedencia.

Una secuencia de una o m@'as nuevas l@'{@dotless{i}}neas puede aparecer en
una @code{lista} para delimitar instrucciones, equivalente a un punto y
coma.

Si se termina una instrucci@'on con el operador de control @samp{&}, el
int@'erprete ejecuta la instrucci@'on as@'{@dotless{i}}ncronamente en un
subint@'erprete.  Esto se conoce como ejecutar la instrucci@'on en
@var{segundo plano}.  El int@'erprete no espera a que termine la
instrucci@'on, y el estado de retorno es 0 (verdadero).  Cuando el control
de tareas no est@'a activo (@pxref{Control de Tareas}), la entrada
est@'andar para instrucciones as@'{@dotless{i}}ncronas, en ausencia de
cualquier redirecci@'on expl@'{@dotless{i}}cita, es redirigida desde
@code{/dev/null}.

Las instrucciones separadas por un @samp{;} son ejecutadas secuencialmente;
el int@'erprete espera a que cada instrucci@'on termine en orden.  El estado
de retorno es el estado de salida de la @'ultima instrucci@'on ejecutada.

Las listas @sc{and} y @sc{or} son secuencias de una o m@'as
tuber@'{@dotless{i}}as separadas por los operadores de control @samp{&&} y
@samp{||}, respectivamente.  Las listas @sc{and} y @sc{or} son ejecutadas
con asociatividad izquierda.

Una lista @sc{and} tiene la forma
@example
@var{instrucci@'on1} && @var{instrucci@'on2}
@end example

@noindent
@var{instrucci@'on2} es ejecutada @'unicamente si @var{instrucci@'on1}
devuelve un estado de salida de cero.

Una lista @sc{or} tiene la forma
@example
@var{instrucci@'on1} || @var{instrucci@'on2}
@end example

@noindent
@var{instrucci@'on2} es ejecutada @'unicamente si @var{instrucci@'on1}
devuelve un estado de salida distinto de cero.

El estado de retorno de las listas @sc{and} y @sc{or} es el estado de salida
de la @'ultima instrucci@'on ejecutada en la lista.

@node Instrucciones Compuestas
@subsection Instrucciones Compuestas
@cindex instrucciones, compuestas

@menu
* Construcciones de Bucle::  Instrucciones del int@'erprete para acci@'on 
                               iterativa.
* Construcciones Condicionales::  Instrucciones del int@'erprete para 
                                    ejecuci@'on condicional.
* Instrucciones Agrupativas::  Formas de agrupar instrucciones.
@end menu

Las instrucciones compuestas son las construcciones de programaci@'on del
int@'erprete.  Cada construcci@'on empieza con una palabra reservada u
operador de control y termina con una palabra reservada u operador
correspondiente.  Cualquier redirecci@'on (@pxref{Redirecciones}) asociada a
una instrucci@'on compuesta se aplica a todas las instrucciones dentro de
esa instrucci@'on compuesta a no ser que sea reemplazada
expl@'{@dotless{i}}citamente.

En la mayor@'{@dotless{i}}a de los casos, una lista de instrucciones en una
descripci@'on de instrucci@'on compuesta puede ser separada del resto de las
instrucci@'on por una o m@'as nuevas l@'{@dotless{i}}neas, y puede ser
seguida por una nueva l@'{@dotless{i}}nea en lugar de un punto y coma.

Bash proporciona construcciones de bucle, instrucciones condicionales y
mecanismos para agrupar instrucciones y ejecutarlas como una unidad.

@node Construcciones de Bucle
@subsubsection Construcciones de Bucle
@cindex instrucciones, bucle

Bash acepta las siguientes construcciones de bucle.

Tenga en cuenta que cada vez que aparezca un @samp{;} en la descripci@'on de
la sintaxis de una instrucci@'on, puede ser reemplazado por una o m@'as
nuevas l@'{@dotless{i}}neas.

@table @code
@item until
@rwindex until
@rwindex do
@rwindex done
La sintaxis de la instrucci@'on @code{until} es:

@example
until @var{instrucciones-test}; do @var{instrucciones-consiguientes}; done
@end example

Ejecuta @var{instrucciones-consiguientes} mientras que
@var{instrucciones-test} tenga un estado de salida que no sea cero.  El
estado de retorno es el estado de salida de la @'ultima instrucci@'on
ejecutada en @var{instrucciones-consiguientes}, o cero si ninguna fue
ejecutada.

@item while
@rwindex while
La sintaxis de la instrucci@'on @code{while} es:

@example
while @var{instrucciones-test}; do @var{instrucciones-consiguientes}; done
@end example

Ejecuta @var{instrucciones-consiguientes} mientras que
@var{instrucciones-test} tenga un estado de salida de cero.  El estado de
retorno es el estado de salida de la @'ultima instrucci@'on ejecutada en
@var{instrucciones-consiguientes}, o cero si ninguna fue ejecutada.

@item for
@rwindex for
La sintaxis de la instrucci@'on @code{for} es:

@example
for @var{nombre} [ [in [@var{palabras} @dots{}] ] ; ] do @var{instrucciones}; done
@end example

Expande @var{palabras} y ejecuta @var{instrucciones} una vez por cada
elemento en la lista resultante, con @var{nombre} vinculado al elemento
actual.  Si @samp{in @var{palabras}} no est@'a presente, la
instrucci@'on @code{for} ejecuta las @var{instrucciones} una vez por
cada par@'ametro posicional que est@'e establecido, como si @samp{in
"$@@"} hubiera sido especificado (@pxref{Par@'ametros Especiales}).
El estado de retorno es el estado de salida de la @'ultima
instrucci@'on que se ejecuta.  Si no hay elementos en la expansi@'on
de @var{palabras}, no ejecuta instrucciones, y el estado de retorno es
cero.

Tambi@'en se acepta una forma alternativa de la instrucci@'on @code{for}:

@example
for (( @var{expr1} ; @var{expr2} ; @var{expr3} )) ; do @var{instrucciones} ; done
@end example

Primero, la expresi@'on aritm@'etica @var{expr1} se eval@'ua de acuerdo a
las reglas descritas adelante (@pxref{Aritm@'etica del Int@'erprete}).  La
expresi@'on aritm@'etica @var{expr2} es entonces evaluada repetidamente
hasta que eval@'ue a cero.  Cada vez que @var{expr2} eval@'ue a un valor
distinto de cero, se ejecutan las @var{instrucciones} y se eval@'ua la
expresi@'on aritm@'etica @var{expr3}.  Si se omite cualquier expresi@'on, se
comporta como si evaluara a 1.  El valor de retorno es el estado de salida
de la @'ultima instrucci@'on que es ejecutada en @var{instrucciones}, o
falso si cualquiera de las expresiones es inv@'alida.
@end table

Las instrucciones integradas @code{break} y @code{continue}
(@pxref{Instrucciones Integradas del Bourne Shell}) se pueden usar para
controlar la ejecuci@'on del bucle.

@node Construcciones Condicionales
@subsubsection Construcciones Condicionales
@cindex instrucciones, condicional

@table @code
@item if
@rwindex if
@rwindex then
@rwindex else
@rwindex elif
@rwindex fi
La sintaxis de la instrucci@'on @code{if} es:

@example
if @var{instrucciones-test}; then
  @var{instrucciones-consecuentes};
[elif @var{m@'as-instrucciones-test}; then
  @var{m@'as-consecuentes};]
[else @var{consecuentes-alternativos};]
fi
@end example

La lista de @var{instrucciones-test} es interpretada, y si su estado de
retorno es cero, la lista de @var{instrucciones-consecuentes} se
ejecuta.  Si @var{instrucciones-test} devuelve un estado de retorno
distinto de cero, cada lista @code{elif} es ejecutada en orden, y si
su estado es cero, el @var{m@'as-consecuentes} correspondiente se
ejecuta y la instrucci@'on se completa.  Si @samp{else
@var{consecuentes-alternativos}} est@'a presente, y la instrucci@'on
final en la @'ultima cl@'ausula @code{if} o @code{elif} tiene un
estado de salida distinto de cero, entonces
@var{consiguientes-alternativos} se ejecutan.  El estado de retorno
es el estado de salida de la @'ultima instrucci@'on ejecutada, o cero
si ninguna condici@'on se evalu@'o a verdadera.

@item case
@rwindex case
@rwindex in
@rwindex esac
La sintaxis de la instrucci@'on @code{case} es:

@example
case @var{palabra} in [ [(] @var{patr@'on} [| @var{patr@'on}]@dots{})
@var{lista-de-instrucciones} ;;]@dots{} esac
@end example

@code{case} ejecutar@'a selectivamente la @var{lista-de-instrucciones}
correspondiente al primer @var{patr@'on} que coincide con la
@var{palabra}.  Si la opci@'on del int@'erprete @code{nocasematch}
(vea la descripci@'on de @code{shopt} en @ref{La Instrucci@'on
Integrada Shopt}) est@'a habilitada, la coincidencia se realiza sin
tener en cuenta las may@'usculas y min@'usculas de caracteres
alfab@'eticos.  El @samp{|} es usado para separar m@'ultiples
patrones, y el operador @samp{)} finaliza una lista de patr@'on.  Se
llama @var{cl@'ausula} a la lista de patrones y a su lista de
instrucciones asociada.

Cada cl@'ausula debe terminar en @samp{;;}, @samp{;&} o @samp{;;&}.
La @var{palabra} pasa por la expansi@'on de virgulilla, expansi@'on de
par@'ametro, sustituci@'on de instrucci@'on, expansi@'on aritm@'etica
y eliminaci@'on de comillas antes de que se intente la coincidencia.
Cada @var{patr@'on} pasa por la expansi@'on de virgulilla,
sustituci@'on de instrucci@'on y expansi@'on aritm@'etica.

Puede haber un n@'umero arbitrario de cl@'ausulas @code{case}, cada una
terminada en @samp{;;}, @samp{;&} o @samp{;;&}.  El primer patr@'on que
coincide determina la lista de instrucciones que es ejecutada.  Es una
expresi@'on normal usar @samp{*} como el patr@'on final para definir el caso
predeterminado, ya que ese patr@'on siempre coincidir@'a.

Aqu@'{@dotless{i}} hay un ejemplo que usa @code{case} en un guion que
podr@'{@dotless{i}}a ser usado para describir un rasgo interesante de un
animal:

@example
echo -n "Introduzca el nombre de un animal: "
read ANIMAL
echo -n "El $ANIMAL tiene "
case $ANIMAL in
  caballo | perro | gato) echo -n "cuatro";;
  hombre | canguro ) echo -n "dos";;
  *) echo -n "un n@'umero desconocido de";;
esac
echo " patas."
@end example

@noindent

Si se usa el operador @samp{;;}, no se intentan m@'as coincidencias
despu@'es de la primera coincidencia de patr@'on.  Usar @samp{;&} en lugar
de @samp{;;} hace que la ejecuci@'on contin@'ue con la
@var{lista-de-instrucciones} asociada con la pr@'oxima cl@'ausula, si
existe.  Usar @samp{;;&} en lugar de @samp{;;} hace que el int@'erprete
pruebe los patrones en la pr@'oxima cl@'ausula, si existen, y ejecuta
cualquier @var{lista-de-instrucciones} asociada cuando hay una coincidencia
con @'exito.

El estado de retorno es cero si ning@'un @var{patr@'on} coincide.  En caso
contrario, el estado de retorno es el estado de salida de la
@var{lista-de-instrucciones} ejecutada.

@item select
@rwindex select

La construcci@'on @code{select} permite la sencilla generaci@'on de
men@'us.  Tiene casi la misma sintaxis que la instrucci@'on @code{for}:

@example
select @var{nombre} [in @var{palabras} @dots{}]; do @var{instrucciones}; done
@end example

La lista de palabras detr@'as de @code{in} es expandida, generando una lista
de elementos.  El conjunto de palabras expandidas es impreso en el flujo de
la salida de error est@'andar, cada una precedida por un n@'umero.  Si se
omite el @samp{in @var{palabras}}, se imprimen los par@'ametros
posicionales, como si @samp{in "$@@"} hubiera sido especificado.  El prompt
@env{PS3} es entonces mostrado y es le@'{@dotless{i}}da una
l@'{@dotless{i}}nea de la entrada est@'andar.  Si la l@'{@dotless{i}}nea
consta de un n@'umero correspondiente a una de las palabras mostradas, el
valor de @var{nombre} es establecido a esa palabra.  Si la
l@'{@dotless{i}}nea est@'a vac@'{@dotless{i}}a, las palabras y el prompt se
muestran de nuevo.  Si es le@'{@dotless{i}}do @code{EOF}, la instrucci@'on
@code{select} se completa.  Cualquier otro valor le@'{@dotless{i}}do hace
que @var{nombre} se establezca a nulo.  La l@'{@dotless{i}}nea
le@'{@dotless{i}}da es guardada en la variable @env{REPLY}.

Las @var{instrucciones} son ejecutadas despu@'es de cada selecci@'on hasta
que se ejecute una instrucci@'on @code{break}, en cuyo momento la
instrucci@'on @code{select} se completa.

He aqu@'{@dotless{i}} un ejemplo que permite al usuario escoger un nombre de
archivo del directorio actual y muestra el nombre y el @'{@dotless{i}}ndice
del archivo seleccionado.

@example
select narchivo in *;
do
	echo escogiste $narchivo \($REPLY\)
	break;
done
@end example

@item ((@dots{}))
@example
(( @var{expresi@'on} ))
@end example

La @var{expresi@'on} aritm@'etica se eval@'ua de acuerdo a las reglas
descritas adelante (@pxref{Aritm@'etica del Int@'erprete}).  Si el valor de
la expresi@'on es distinto de cero, el estado de retorno es 0; de lo
contrario, el valor de retorno es 1.  Esto es exactamente equivalente a
@example
let "@var{expresi@'on}"
@end example
@noindent
@xref{Instrucciones Integradas de Bash}, para una descripci@'on completa de
la instrucci@'on integrada @code{let}.

@item [[@dots{}]]
@rwindex [[
@rwindex ]]
@example
[[ @var{expresi@'on} ]]
@end example

Devuelve un estado de 0 o 1 dependiendo de la evaluaci@'on de la expresi@'on
condicional @var{expresi@'on}.  Las expresiones est@'an compuestas de los
elementos primarios descritos m@'as adelante en @ref{Expresiones
Condicionales de Bash}.  La divisi@'on de palabras y la expansi@'on de
nombre de archivo no se realizan en las palabras entre el @code{[[} y el
@code{]]}; son realizadas la expansi@'on de virgulilla, la expansi@'on de
par@'ametro y de variable, la expansi@'on aritm@'etica, la sustituci@'on de
instrucciones, la sustituci@'on de proceso y la eliminaci@'on de
entrecomillado.  Los operadores condicionales como @samp{-f} no deben estar
entrecomillados para ser reconocidos como opciones primarias.

Cuando se usa con @code{[[}, los operadores @samp{<} y @samp{>} ordenan
lexicogr@'aficamente usando la configuraci@'on regional actual.

Cuando se usan los operadores @samp{==} y @samp{!=}, la cadena a la derecha
del operador es considerada un patr@'on y es correspondida seg@'un las
reglas descritas a continuaci@'on en @ref{Coincidencia de Patrones}, como si
la opci@'on del int@'erprete @code{extglob} estuviera habilitada.  El
operador @samp{=} es id@'entico a @samp{==}.  Si la opci@'on del
int@'erprete @code{nocasematch} (vea la descripci@'on de @code{shopt} en
@ref{La Instrucci@'on Integrada Shopt}) est@'a habilitada, la
correspondencia es realizada sin importar las may@'usculas y min@'usculas de
los caracteres alfab@'eticos.  El valor de retorno es 0 si la cadena
coincide (@samp{==}) o no coincide (@samp{!=}) con el patr@'on, y 1 en caso
contrario.  Cualquier parte del patr@'on puede ser entrecomillada para
forzar la porci@'on entrecomillada a que sea coincidida con una cadena.

Un operador binario adicional, @samp{=~}, est@'a disponible, con la misma
precedencia que @samp{==} y @samp{!=}.  Cuando se usa, la cadena a la
derecha del operador es considerada una expresi@'on regular extendida y es
coincidida correspondientemente (como en @i{regex}3)).  El valor de retorno
es 0 si la cadena coincide con el patr@'on, y 1 en caso contrario.  Si la
expresi@'on regular es sint@'acticamente incorrecta, el valor de retorno de
la expresi@'on condicional es 2.  Si est@'a habilitada la opci@'on del
int@'erprete @code{nocasematch} (vea la descripci@'on dee @code{shopt} en
@ref{La Instrucci@'on Integrada Shopt}), la coincidencia es realizada sin
consideraci@'on de may@'usculas y min@'usculas de los caracteres
alfab@'eticos.  Cualquier parte del patr@'on puede ser entrecomillada para
obligar a que la porci@'on entrecomillada sea coincidida como cadena.  Las
expresiones de llaves en expresiones regulares deben ser tratadas
cuidadosamente, pues los caracteres de entrecomillado normales pierden sus
significados entre llaves.  Si el patr@'on es guardado en una variable del
int@'erprete, entrecomillar la expansi@'on de variable fuerza el patr@'on
entero a ser coincidido como cadena.  Las subcadenas coincididas por
subexpresiones entre par@'entesis dentro de la expresi@'on regular son
guardadas en la variable de vector @code{BASH_REMATCH}.  El elemento de
@code{BASH_REMATCH} con @'{@dotless{i}}ndice 0 es la porci@'on de la cadena
que coincide con la expresi@'on regular completa.  El elemento de
@code{BASH_REMATCH} con @'{@dotless{i}}ndice @var{n} es la porci@'on de la
cadena que coincide con la subexpresi@'on entre par@'entesis n@'umero
@var{n}.

Por ejemplo, lo siguiente coincidir@'a con una l@'{@dotless{i}}nea (guardada
en la variable del int@'erprete @var{linea})  si hay una secuencia de
caracteres en el valor que conste de cualquier n@'umero, incluido cero, de
caracteres de espacio, cero o m@'as instancias de @samp{a}, despu@'es una
@samp{b}:
@example
[[ $linea =~ [[:space:]]*(a)?b ]]
@end example

@noindent
Eso quiere decir que valores como @samp{aab} y @samp{ aaaaaab}
coincidir@'an, como tambi@'en lo har@'a una l@'{@dotless{i}}nea que contenga
una @samp{b} en cualquier lugar en su valor.

Guardar la expresi@'on regular en una variable del int@'erprete es
habitualmente una forma @'util de evitar problemas con entrecomillar
caracteres que son especiales para el int@'erprete.  A veces es
dif@'{@dotless{i}}cil especificar una expresi@'on regular literalmente sin
usar comillas, o llevar un seguimiento del entrecomillado usado por las
expresiones regulares mientras se presta atenci@'on a la eliminaci@'on de
comillas del int@'erprete.  Usar una variable del int@'erprete disminuye
estos problemas.  Por ejemplo, lo siguiente es equivalente a lo anterior:
@example
patron='[[:space:]]*(a)?b'
[[ $linea =~ $patron ]]
@end example

@noindent
Si quieres hacer coincidir un car@'acter que es especial para la gram@'atica
de expresiones regulares, tiene que ser entrecomillado para eliminar su
significado especial.  Esto significa que en el patr@'on @samp{xxx.txt}, el
@samp{.} corresponde a cualquier car@'acter en la cadena (su significado
usual de expresi@'on regular), pero en el patr@'on @samp{"xxx.txt"} puede
corresponder solo a un @samp{.} literal.  Los programadores del int@'erprete
deber@'{@dotless{i}}an tener un especial cuidado con las barras invertidas,
puesto que las barras invertidas son usadas tanto por el int@'erprete como
por las expresiones regulares para eliminar el significado especial del
siguiente car@'acter.  Los siguientes dos conjuntos de instrucciones
@emph{no} son equivalentes:
@example
patron='\.'

[[ . =~ $patron ]]
[[ . =~ \. ]]

[[ . =~ "$patron" ]]
[[ . =~ '\.' ]]
@end example

@noindent
Las primeras dos coincidencias tendr@'an @'exito, pero las segundas dos no,
porque en las segundas las barras invertidas ser@'an parte del patr@'on que
ser@'a coincidido.  En los primeros dos ejemplos, la barra invertida elimina
el significado especial de @samp{.}, para que el @samp{.} coincida.  Si la
cadena en los primeros ejemplos fuera cualquier cosa distinta de @samp{.},
digamos que @samp{a}, el patr@'on no coincidir@'{@dotless{i}}a, porque el
@samp{.} entrecomillado en el patr@'on pierde su significado especial de
coincidir con cualquier car@'acter.

Las expresiones pueden ser combinadas usando los siguientes operadores,
listados en orden decreciente de precedencia:

@table @code
@item ( @var{expresi@'on} )
Devuelve el valor de @var{expresi@'on}.  Esto puede ser usado para
sobrescribir la precedencia normal de operadores.

@item ! @var{expresi@'on}
Verdadero si @var{expresi@'on} es falso.

@item @var{expresi@'on1} && @var{expresi@'on2}
Verdadero si tanto @var{expresi@'on1} como @var{expresi@'on} son verdaderas.

@item @var{expresi@'on1} || @var{expresi@'on2}
Verdadero si @var{expresi@'on1} o @var{expresi@'on2} es verdadera.
@end table

@noindent
Los operadores @code{&&} y @code{||} no eval@'uan @var{expresi@'on2} si el
valor de @var{expresi@'on1} es suficiente para determinar el valor de
retorno de la expresi@'on condicional completa.
@end table

@node Instrucciones Agrupativas
@subsubsection Agrupaci@'on de Instrucciones
@cindex instrucciones, agrupaci@'on

Bash proporciona dos manera de agrupar una lista de instrucciones para ser
ejecutada como una @'unidad.  Cuando las instrucciones son agrupadas, las
redirecciones pueden ser agrupadas por la lista de instrucciones
completa. Por ejemplo, la salida de todas las instrucciones en la lista
puede ser redirigida a un @'unico flujo.

@table @code
@item ()
@example
( @var{lista} )
@end example

Ubicar una lista de instrucciones entre par@'entesis hace que se cree un
entorno de subint@'erprete (@pxref{Entorno de Ejecuci@'on de
Instrucciones}), y cada una de las instrucciones en @var{lista} sea
ejecutada en ese subint@'erprete.  Dado que la @var{lista} es ejecutada en
un subint@'erprete, las asignaciones de variable no permanecen en vigor
despu@'es de que el subint@'erprete finalice. 

@item @{@}
@rwindex @{
@rwindex @}
@example
@{ @var{lista}; @}
@end example

Ubicar una lista de instrucciones entre llaves hace que la lista sea
ejecutada en el contexto actual del int@'erprete.  No se crea un
subint@'erprete.  Se requiere el punto y coma (o nueva l@'{@dotless{i}}nea)
despu@'es de @var{lista}.
@end table

Adem@'as de la creaci@'on de un subint@'erprete, hay una sutil diferencia
entre estas dos construcciones debido a razones hist@'oricas.  Las llaves
son @code{palabras reservadas}, as@'{@dotless{i}} que tienen que estar
separadas de @var{lista} por @code{blanco}s o otros metacaracteres del
int@'erprete.  Los par@'entesis son @code{operadores}, y son reconocidos
como s@'{@dotless{i}}mbolos separados por el int@'erprete incluso si no
est@'an separados de la @var{lista} por espacios en blanco.

El estado de salida de estas dos construcciones es el estado de salida de
@var{lista}.

@node Coprocesos
@subsection Coprocesos
@cindex coprocesos

Un @code{coproceso} es una instrucci@'on del int@'erprete precedida por la
palabra reservada @code{coproc}.  Un coproceso es ejecutado
as@'{@dotless{i}}ncronamente en un subint@'erprete, como si la instrucci@'on
se hubiera terminado con el operador de control @samp{&}, con una
tuber@'{@dotless{i}}a de dos sentidos establecida entre el intérprete en
ejecuci@'on y el coproceso.

El formato para un coproceso es:
@example
coproc [@var{NOMBRE}] @var{instrucci@'on} [@var{redirecciones}]
@end example

@noindent
Esto crea un coproceso llamado @var{NOMBRE}.  Si no se proporciona
@var{NOMBRE}, el nombre predeterminado es @var{COPROC}.  @var{NOMBRE} no
tiene que ser proporcionado si @var{instrucci@'on} es una instrucci@'on
simple (@pxref{Instrucciones Simples}); de lo contrario, es interpretado
como la primera palabra de una instrucci@'on simple.

Cuando se ejecuta el coproceso, el int@'erprete crea una variable de vector
(@pxref{Vectores}) llamada @env{NAME} en el contexto del int@'erprete en
ejecuci@'on.  La salida est@'andar de @var{instrucci@'on} se conecta a
trav@'es de una tuber@'{@dotless{i}}a al descriptor de archivo en el
int@'erprete en ejecuci@'on, y ese descriptor de archivo es asignado a
@env{NAME}[0].  La entrada est@'andar de @var{instrucci@'on} se conecta a
trav@'es de una tuber@'{@dotless{i}}a a un descriptor de archivo en el
int@'erprete en ejecuci@'on, y ese descriptor de archivo es asignado a
@env{NAME}[1].  Esta tuber@'{@dotless{i}}a se establece antes de cualquier
redirecci@'on especificada por la instrucci@'on (@pxref{Redirecciones}).
Los descriptores de archivo pueden ser utilizados como argumentos para
instrucciones del int@'erprete y redirecciones usando expansiones de
palabras est@'andares.  Los descriptores de archivos no est@'an disponibles
en subint@'erpretes.

El identificador de proceso del int@'erprete generado para ejecutar el
coproceso est@'a disponible como el valor de la variable @var{NAME}_PID.  La
instrucci@'on integrada @code{wait} puede usarse para esperar a que el
coproceso finalice.

Dado que el coproceso es creado como una instrucci@'on
as@'{@dotless{i}}ncrona, la instrucci@'on @code{coproc} siempre retorna
@'exito.  El estado de retorno de un coproceso es el estado de salida de
@var{instrucci@'on}.

@node GNU Parallel
@subsection GNU Parallel

Hay varias maneras de ejecutar instrucciones en paralelo que no est@'an
integradas en Bash.  GNU Parallel es una herramienta para hacer precisamente
esto.

GNU Parallel, como su nombre sugiere, puede ser usado para construir y
ejecutar instrucciones en paralelo.  Puede ejecutar las mismas instrucciones
con diferentes argumentos, ya sean nombres de archivo, nombre de usuario,
nombres de equipos o l@'{@dotless{i}}neas le@'{@dotless{i}}das de archivos.
GNU Parallel proporciona referencias abreviadas a muchas de las operaciones
m@'as comunes (l@'{@dotless{i}}neas de entrada, varias porciones de la
l@'{@dotless{i}}nea de entrada, diferentes formas de especificar la fuente
de entrada y dem@'as).  Parallel puede reemplazar @code{xargs} o surtir de
instrucciones de sus fuentes de entrada a varias instancias diferentes de
Bash.

Para una descripci@'on completa, consulte la documentaci@'on de GNU
Parallel.  Unos pocos ejemplos deber@'{@dotless{i}}an proporcionar una breve
introducci@'on a su uso.

Por ejemplo, es f@'acil reemplazar @code{xargs} para comprimir con gzip
todos los archivos HTML en el directorio actual y sus subdirectorios:
@example
find . -type f -name '*.html' -print | parallel gzip
@end example
@noindent
Si necesita proteger caracteres especiales como nuevas l@'{@dotless{i}}neas
en nombres de archivo, use la opci@'on de find @option{-print0} y la
opci@'on de parallel @option{-0}.

Puede usar Parallel para mover archivos desde el directorio actual cuando el
n@'umero de archivos es muy grande para procesar can una llamada a
@code{mv}:
@example
ls | parallel mv @{@} dirdest
@end example

Como puede ver, la @{@} es reemplazada con cada l@'{@dotless{i}}nea
le@'{@dotless{i}}da de la entrada est@'andar.  Mientras que usar @code{ls}
funcionar@'a en la mayor@'{@dotless{i}}a de los casos, no es suficiente
encargarse de todos los nombres de archivo.  Si necesita acomodar caracteres
especiales en nombres de archivo, puede usar

@example
find . -depth 1 \! -name '.*' -print0 | parallel -0 mv @{@} dirdest
@end example

@noindent
como se menciona anteriormente.

Esto ejecutar@'a tantas instrucciones @code{mv} como archivos haya en el
directorio actual.  Puede emular un @code{xargs} paralelo a@~nadiendo la
opci@'on @option{-X}:
@example
find . -depth 1 \! -name '.*' -print0 | parallel -0 -X mv @{@} dirdest
@end example

GNU Parallel puede reemplazar ciertas expresiones comunes que operan en
l@'{@dotless{i}}neas le@'{@dotless{i}}das de un archivo (en este caso, los
nombres de archivo listados uno por l@'{@dotless{i}}nea):
@example
	while IFS= read -r x; do
		haz-algo1 "$x" "config-$x"
		haz-algo2 < "$x"
	done < archivo | procesa-salida
@end example

@noindent
con una sintaxis m@'as compleja reminiscente de lambdas:
@example
cat lista | parallel "haz-algo1 @{@} config-@{@} ; haz-algo2 < @{@}" | \
procesa-salida
@end example

Parallel proporciona un mecanismo integrado para eliminar las extensiones de
nombre de archivo, que se presta a transformaciones o renombraciones de
archivos en lote:
@example
ls *.gz | parallel -j+0 "zcat @{@} | bzip2 >@{.@}.bz2 && rm @{@}"
@end example
@noindent
Esto volver@'a a comprimir todos los archivos en el directorio actual con
nombres acabados en .gz usando bzip2, ejecutando una tarea por CPU (-j+0) en
paralelo.  (Usamos @code{ls} por brevedad aqu@'{@dotless{i}}; usar
@code{find} como antes es m@'as robusto de cara a nombres de archivo que
contienen caracteres inesperados.)  Parallel puede tomar argumentos de la
l@'{@dotless{i}}nea de instrucciones; lo anterior puede ser tambi@'en
escrito como

@example
parallel "zcat @{@} | bzip2 >@{.@}.bz2 && rm @{@}" ::: *.gz
@end example

Si una instrucci@'on genera salida, puede que quieras preservar el orden de
entrada en la salida.  Por ejemplo, la siguiente instrucci@'on
@example
@{ echo foss.org.my ; echo debian.org;
echo freenetproject.org; @} | parallel traceroute
@end example
@noindent
mostrar@'a como salida la llamada a traceroute que finalice primero.
A@~nadiendo la opci@'on @option{-k} 
@example
@{ echo foss.org.my ; echo debian.org;
echo freenetproject.org; @} | parallel -k traceroute
@end example
@noindent
asegurar@'a que la salida de @code{traceroute foss.org.my} sea mostrada
primero.

Finalmente, Parallel se puede usar para ejecutar una secuencia de
instrucciones del int@'erprete en paralelo, similar a @samp{cat file |
bash}.  No es raro tomar una lista de nombres de archivo, crear conjuntos de
instrucciones del int@'erprete para operar sobre ellos y surtir de esa
l@'{@dotless{i}}nea de instrucciones a un int@'erprete.  Parallel puede
acelerar esto.  Asumiendo que @file{archivo} contiene una lista de
instrucciones del int@'erprete, una por l@'{@dotless{i}}nea,

@example
parallel -j 10 < archivo
@end example

@noindent
evaluar@'a las instrucciones usando el int@'erprete (ya que no se ha
proporcionado ninguna instrucci@'on expl@'{@dotless{i}}cita como argumento),
en bloques de diez tareas del int@'erprete cada vez.

@node Funciones del Int@'erprete
@section Funciones del Int@'erprete
@cindex funci@'on del int@'erprete
@cindex funciones, int@'erprete

Las funciones del int@'erprete son una forma de agrupar instrucciones para
su posterior ejecuci@'on usando un @'unico nombre para el grupo.  Son
ejecutadas como una instrucci@'on «normal».  Cuando se usa el nombre de una
funci@'on del int@'erprete como un nombre de instrucci@'on simple, se
ejecuta la lista de instrucciones asociada con ese nombre de funci@'on.  Las
funciones del int@'erprete son ejecutadas en el contexto actual del
int@'erprete; ning@'un nuevo proceso es creado para interpretarlas.

Las funciones se declaran usando esta sintaxis:
@rwindex function
@example
@var{nombre} () @var{instrucci@'on-compuesta} [ @var{redirecciones} ]
@end example

o

@example
function @var{nombre} [()] @var{instrucci@'on-compuesta} [ @var{redirecciones} ]
@end example

Esto define una funci@'on del int@'erprete llamada @var{nombre}.  La palabra
reservada @code{function} es opcional.  Si se proporciona la palabra
reservada @code{function}, los par@'entesis son opcionales.  El @var{cuerpo}
de la funci@'on es la instrucci@'on compuesta @var{instrucci@'on-compuesta}
(@pxref{Instrucciones Compuestas}).  Esa instrucci@'on es normalmente una
@var{lista} encerrada entre @{ y @}, pero puede ser cualquier instrucci@'on
compuesta listada anteriormente, con una excepci@'on: si se usa la palabra
reservada @code{function}, pero no se proporcionan los par@'entesis, las
llaves son requeridas.  @var{instrucci@'on-compuesta} es ejecutada cada vez
que @var{nombre} es especificado como el nombre de una instrucci@'on.
Cuando el int@'erprete est@'a en modo @sc{posix} (@pxref{Modo POSIX de
Bash}), @var{nombre} no puede ser el mismo que una de las instrucciones
integradas especiales (@pxref{Instrucciones Integradas Especiales}).  Todas
las (@pxref{Redirecciones}) asociadas con la funci@'on del int@'erprete son
realizadas cuando se ejecuta la funci@'on.

Una definici@'on de funci@'on puede ser eliminada usando la opci@'on
@option{-f} con la instrucci@'on integrada @code{unset}
(@pxref{Instrucciones Integradas del Bourne Shell}).

El estado de salida de una definici@'on de funci@'on es cero a no ser que
ocurra un error de sintaxis o una funci@'on de solo lectura con el mismo
nombre ya exista.  Cuando se ejecuta, el estado de salida de una funci@'on
es el estado de salida de la @'ultima instrucci@'on ejecutada en el cuerpo.

Tenga en cuenta que por razones hist@'oricas, en el modo m@'as usual las
llaves que rodean el cuerpo de la funci@'on tienen que estar separadas del
cuerpo por @code{blanco}s o nuevas l@'{@dotless{i}}neas.  Esto es porque las
llaves son palabras reservadas que solo son reconocidas como tales cuando
est@'an separadas de la lista de instrucciones por espacios en blanco u
otros metacaracteres del int@'erprete.  Adem@'as, al usar llaves, la
@var{lista} debe terminar en un punto y coma, un @samp{&} o una nueva
l@'{@dotless{i}}nea.

Cuando se ejecuta una funci@'on, los argumentos para la funci@'on se
convierten en los par@'ametros posicionales durante su ejecuci@'on
(@pxref{Par@'ametros Posicionales}).  El par@'ametro especial @samp{#} que
se expande al n@'umero de par@'ametros posicionales se actualiza para
reflejar el cambio.  El par@'ametro especial @code{0} no es modificado.  El
primer elemento de la variable @env{FUNCNAME} es establecido al nombre de la
funci@'on durante la ejecuci@'on de la funci@'on.

Todos los otros aspectos del entorno de ejecuci@'on del int@'erprete son
id@'enticos entre una funci@'on y su ejecutor con estas excepciones: las
traps @env{DEBUG} y @env{RETURN} no se heredan a no ser que se le haya dado
a la funci@'on el atributo @code{trace} usando la instrucci@'on integrada
@code{declare} o la opci@'on @code{-o functrace} haya sido habilitada con la
instrucci@'on integrada @code{set}, (en cuyo caso todas las funciones
heredan las traps @env{DEBUG} y @env{RETURN}), y la trap @env{ERR} no se
hereda a no ser que la opci@'on del int@'erprete @code{-o errtrace} haya
sido habilitada.  @xref{Instrucciones Integradas del Bourne Shell}, para la
decripci@'on de la instrucci@'on integrada @code{trap}.

La variable @env{FUNCNEST}, si est@'a establecida a un valor num@'erico
mayor que 0, define el nivel m@'aximo de anidamiento de funciones.  Las
llamadas de funciones que exceden el l@'{@dotless{i}}mite hacen que la
instrucci@'on completa se aborte.

Si la instrucci@'on integrada @code{return} es ejecutada en una funci@'on,
la funci@'on finaliza y la ejecuci@'on se reanuda con la siguiente
instrucci@'on despu@'es de la llamada a la funci@'on.  Cualquier
instrucci@'on asociada con la trap @code{RETURN} es ejecutada antes de que
la ejecuci@'on se reanude.  Cuando una funci@'on finaliza, los valores de
los par@'ametros posicionales y el par@'ametro especial @samp{#} son
restablecidos a los valores que ten@'{@dotless{i}}an antes de la ejecuci@'on
de la funci@'on.  Si se le pasa un argumento num@'erico a @code{return},
este es el estado de retorno de la funci@'on; si no, el estado de retorno de
la funci@'on es el estado de salida de la @'ultima instrucci@'on ejecutada
antes de @code{return}.

Las variables locales a la funci@'on pueden ser declaradas con la
instrucci@'on integrada @code{local}.  Estas variables son solo visibles
para la funci@'on y las instrucciones que invoca.

Los nombres y definiciones de funciones pueden ser listados con la opci@'on
@option{-f} para la instrucci@'on integrada @code{declare} (@code{typeset})
(@pxref{Instrucciones Integradas de Bash}).  La opci@'on @option{-F} para
@code{declare} o @code{typeset} listar@'a solo los nombres de funciones (y
opcionalmente el archivo fuente y el n@'umero de l@'{@dotless{i}}nea, si la
opci@'on del int@'erprete @code{extdebug} est@'a habilitada).  Las funciones
pueden ser importadas para que los subint@'erpretes las tengan definidas con
la opci@'on @option{-f} para la instrucci@'on integrada @code{export}
(@pxref{Instrucciones Integradas del Int@'erprete}).  Tenga en cuenta que
las funciones y variables del int@'erprete con el mismo nombre pueden
resultar en entradas m@'ultiples nombradas ind@'enticamente en el entorno
pasado a los hijos del int@'erprete.  Se deber@'{@dotless{i}}a tener cuidado
en casos en los que esto podr@'{@dotless{i}}a causar un problema.

Las funciones pueden ser recursivas.  La variable @code{FUNCNEST} se puede
usar para limitar la profundidad de la pila de llamadas y restringir el
n@'umero de llamadas de funci@'on.  Por defecto, no hay l@'{@dotless{i}}mite
en el n@'umero de llamadas recursivas.

@node Par@'ametros del Int@'erprete
@section Par@'ametros del Int@'erprete
@cindex par@'ametros
@cindex variable, int@'erprete
@cindex variable del int@'erprete

@menu
* Par@'ametros Posicionales::  Los argumentos de l@'{@dotless{i}}nea de 
                                 @'ordenes del int@'erprete.
* Par@'ametros Especiales::  Par@'ametros denotados por caracteres 
                               especiales.
@end menu

Un @var{par@'ametro} es una entidad que almacena valores.  Puede ser un
@code{nombre}, un n@'umero o uno de los caracteres especiales listados m@'as
abajo.  Una @var{variable} es un par@'ametro denotado por un @code{nombre}.
Una variable tiene un @var{valor} y cero o m@'as @var{atributos}.  Los
atributos son asignados usando la instrucci@'on integrada @code{declare}
(consulte la descripci@'on de la instrucci@'on integrada @code{declare} en
@ref{Instrucciones Integradas de Bash}).

Un par@'ametro est@'a establecido si se le ha asignado un valor.  La cadena
nula es un valor v@'alido.  Una vez que se asigne una variable, solo puede
ser eliminada usando la instrucci@'on integrada @code{unset}.

Se puede asignar a una variable con una declaraci@'on de la forma
@example
@var{nombre}=[@var{valor}]
@end example
@noindent
Si no se da @var{valor}, se asigna la cadena nula a la variable.  Todos los
@var{valor}es experimentan la expansi@'on de virgulilla, la expansi@'on de
par@'ametros y de variables, sustituci@'on de instrucciones, expansi@'on
aritm@'etica y eliminaci@'on de comillas (detallada a continuaci@'on).  Si
la variable tiene establecido su atributo @code{integer}, entonces el
@var{valor} es evaluado como una expansi@'on aritm@'etica incluso si no es
usada la expansi@'on @code{$((@dots{}))} (@pxref{Expansi@'on
Aritm@'etica}).  No se realiza la separaci@'on de palabras, con la
excepci@'on de @code{"$@@"} como se explica m@'as abajo.  No se realiza la
expansi@'on de nombre de archivo.  Las declaraciones de asignaciones pueden
aparecer tambi@'en como argumentos para las instrucciones integradas
@code{alias}, @code{declare}, @code{typeset}, @code{export}, @code{readonly}
y @code{local} (instrucciones de @var{declaraci@'on}).  Durante modo
@sc{posix} (@pxref{Modo POSIX de Bash}), estas instrucciones integradas
pueden aparecer en una instrucci@'on despu@'es de una o m@'as instancias de
la instrucci@'on integrada @code{command} y mantener estas propiedades de
declaraci@'on de asignaci@'on.

En el contexto en el que una sentencia de asignaci@'on est@'e asignando un
valor a una variable o @'{@dotless{i}}ndice de vector (@pxref{Vectores}) del
int@'erprete, el operador @samp{+=} puede ser usado para a@~nadir o sumar al
valor previo de la variable.  Esto incluye argumentos de instrucciones
integradas como @code{declare} que aceptan sentencias de asignaci@'on
(instrucciones de @var{declaración}).  Cuando @samp{+=} se aplica a una
variable para la cual el atributo @var{integer} ha sido establecido,
@var{valor} se eval@'ua como una expresi@'on aritm@'etica y se suma al valor
actual de la variable, que tambi@'en es evaluado.  Cuando @samp{+=} se
aplica a una variable de vector usando la asignaci@'on compuesta
(@pxref{Vectores}), el valor de la variable no es eliminado (como lo es al
usar @samp{=}), y se adjuntan nuevos valores al vector empezando por un
n@'umero a partir del @'{@dotless{i}}ndice m@'aximo del vector (para
vectores indexados), o se a@~nade como una pareja clave-valor en un vector
asociativo.  Cuando se aplica a una variable con valor de cadena,
@var{valor} se expande y se a@~nade al valor de la variable.

Se puede asignar una variable el atributo @var{nameref} usando la opci@'on
@option{-n} para las instrucciones integradas @code{declare} o @code{local}
(@pxref{Instrucciones Integradas de Bash}) para crear una @var{nameref}, o
una referencia a otra variable.  Esto permite que las variables sean
manipuladas indirectamente.  Cada vez que se haga referencia a la variable
nameref, se asigne, elimine o sean modificados sus atributos (aparte de
usando o cambiando el atributo nameref en s@'{@dotless{i}}), la operaci@'on
se realiza en la variable especificada por el valor de la variable nameref.
Un nameref se usa com@'unmente dentro de las funciones del int@'erprete para
referirse a una variable cuyo nombre es pasado como un argumento a la
funci@'on.  Por ejemplo, si un nombre de variable es pasado a una funci@'on
del int@'erprete como su primer argumento, ejecutar
@example
declare -n ref=$1
@end example
@noindent
dentro de la funci@'on crea una variable nameref @var{ref} cuyo valor es el
nombre de variable pasado como el primer argumento.  Las referencias y
asignaciones a @var{ref}, y cambios a sus atributos, son tratados como
referencias, asignaciones y modificaciones de atributo a la variable cuyo
nombre fue pasado a @code{$1}.

Si la variable de control en un bucle @code{for} tiene el atributo nameref,
la lista de palabras puede ser una lista de variables del int@'erprete, y
una referencia de nombre ser@'a establecida para cada palabra en la lista,
en orden, cuando el bucle sea ejecutado.  No se le puede dar el atributo
nameref a las variables de vector.  Sin embargo, las variables nameref
pueden hacer referencia a variables de vector y variables de
sub@'{@dotless{i}}ndice de vector.  Los namerefs pueden ser eliminados
usando la opci@'on @option{-n} de la instrucci@'on integrada @code{unset}
(@pxref{Instrucciones Integradas del Bourne Shell}).  De lo contrario, si se
ejecuta @code{unset} con el nombre de una variable nameref como un
argumento, la variable referenciada por la variable nameref ser@'a
eliminada.

@node Par@'ametros Posicionales
@subsection Par@'ametros Posicionales
@cindex par@'ametros, posicional

Un @var{par@'ametro posicional} es un par@'ametro denotado por uno o m@'as
d@'{@dotless{i}}gitos, aparte del @'unico d@'{@dotless{i}}gito @code{0}.
Los argumentos posicionales se asignan desde los argumentos del int@'erprete
cuando es llamado y pueden ser reasignados usando la instrucci@'on integrada
@code{set}.  El par@'ametro posicional @code{N} puede ser referenciado como
@code{$@{N@}}, o como @code{$N} cuando @code{N} consta de un @'unico
d@'{@dotless{i}}gito.  Los par@'ametros posicionales no pueden ser asignados
con declaraciones de asignaci@'on.  Las instrucciones integradas @code{set}
y @code{shift} son usadas para asignar y eliminarlos (@pxref{Instrucciones
Integradas del Int@'erprete}).  Los par@'ametros posicionales son
temporalmente reemplazados cuando se ejecuta una funci@'on del int@'erprete
(@pxref{Funciones del Int@'erprete}).

Cuando un par@'ametro posicional que consta de un @'unico
d@'{@dotless{i}}gito es expandido, debe estar rodeado de llaves.

@node Par@'ametros Especiales
@subsection Par@'ametros Especiales
@cindex par@'ametros, especial

El int@'erprete trata varios par@'ametros de forma especial.  Estos
parametros solo pueden ser referenciados; las asignaciones a ellos no
est@'an permitidas.

@vtable @code

@item *
@vindex $*
($*) Se expande a los par@'ametros posicionales, empezando por uno.  Cuando
la expansi@'on no est@'a entre comillas dobles, cada par@'ametro posicional
se expande a una palabra separada.  En los contextos donde se realiza,
aquellas palabras est@'an sujetas a una divisi@'on de palabras y expansi@'on
de nombre de archivo posteriores.  Cuando la expansi@'on ocurre dentro de
comillas dobles, se expande a una @'unica palabra con el valor de cada
par@'ametro separado por el primer car@'acter de la variable especial
@env{IFS}.  Es decir, @code{"$*} es equivalente a
@code{"$1@var{c}$2@var{c}@dots{}"}, donde @var{c} es el primer car@'acter
del valor de la variable @code{IFS}.  Si es eliminado @env{IFS}, los
par@'ametros se separan por espacios.  Si @env{IFS} no está asignado, los
par@'ametros se unen sin separadores intermedios.

@item @@
@vindex $@@
($@@) Se expande a los par@'ametros posicionales, empezando por uno.  Cuando
la expansi@'on ocurre entre comillas dobles, cada par@'ametro se expande a
una palabra separada.  Es decir, @code{"$@@"} es equivalente a @code{"$1"
"$2" @dots{}}.  Si la expansi@'on de comillas dobles ocurre dentro de una
palabra, la expansi@'on del primer par@'ametro se une con la parte inicial
de la palabra original, y la expansi@'on del @'ultimo par@'ametro se une con
la @'ultima parte de la palabra original.  Cuando no hay par@'ametros
posicionales, @code{"$@@"} y @code{$@@} se expanden a nada (esto es, son
eliminados).

@item #
@vindex $#
($#) Se expande al n@'umero de par@'ametros posicionales en decimal.

@item ?
@vindex $?
($?) Se expande al estado de salida de la tuber@'{@dotless{i}}a en primer
plano ejecutada m@'as recientemente.

@item -
@vindex $-
($-, un guion.)  Se expande a las actuales opciones centinelas como se
especifica en la llamada, por la instrucci@'on integrada @code{set} o
aquellas establecidas por el propio int@'erprete (como la opci@'on
@option{-i}).

@item $
@vindex $$
($$) Se expande al @sc{id} de proceso del int@'erprete.  En un
subint@'erprete @code{()}, se expande al @sc{id} de proceso del int@'erprete
que lo llama, no del subint@'erprete.

@item !
@vindex $!
($!) Se expande al @sc{id} de proceso de tarea ubicada en segundo plano
m@'as recientemente, bien ejecutada como una instrucci@'on
as@'{@dotless{i}}ncrona o usando la instrucci@'on integrada @code{bg}
(@pxref{Instrucciones Integradas de Control de Tareas}).

@item 0
@vindex $0
($0) Se expande al nombre del int@'erprete o el guion del int@'erprete.
Esto es establecido durante la inicializaci@'on del int@'erprete.  Si Bash
es invocado con un archivo de instrucciones (@pxref{Guiones del
Int@'erprete}), @code{$0} es establecido al nombre de ese archivo.  Si Bash
es iniciado con la opci@'on @option{-c} (@pxref{Llamando a Bash}), entonces
@code{$0} es establecido al primer argumento despu@'es de que la cadena sea
ejecutada, si una est@'a presente.  De lo contrario,  es establecido al
nombre de archivo usado para llamar a Bash, como si fuera dado como
argumento cero.

@item _
@vindex $_
($_, una barra baja).  Durante el inicio del int@'erprete, establecida al
nombre de ruta absoluto usado para llamar al int@'erprete o el guion del
int@'erprete ejecutado como se pasa en el entorno o en la lista de
argumentos.  Posteriormente, se expande al @'ultimo argumento de la
instrucci@'on anterior, despu@'es de la expansi@'on.  Tambi@'en asignada al
nombre de ruta completo usado para llamar a cada instrucci@'on ejecutada y
ubicada en el entorno exportado para esa instrucci@'on.  Al consultar el
correo, este par@'ametro guarda el nombre del archivo de correo.
@end vtable

@node Expansiones del Int@'erprete
@section Expansiones del Int@'erprete
@cindex expansi@'on

La expansi@'on es realizada en la l@'{@dotless{i}}nea de @'ordenes despu@'es
de que haya sido dividida en @code{s@'{@dotless{i}}mbolo}s.  Hay siete tipos
de expansi@'on realizados:

@itemize @bullet
@item expansi@'on de llaves
@item expansi@'on de virgulilla
@item expansi@'on de par@'ametros y variables
@item sustituci@'on de instrucciones
@item expansi@'on aritm@'etica
@item divisi@'on de palabras
@item expansi@'on de nombre de archivo
@end itemize

@menu
* Expansi@'on de Llaves::    Expansi@'on de expresiones dentro de llaves.
* Expansi@'on de Virgulilla::  Expansi@'on del car@'acter ~.
* Expansi@'on de Par@'ametros del Int@'erprete::  Como Bash expande 
                                                    variables a sus valores.
* Sustituci@'on de Instrucciones::  Usando la salida de una instrucci@'on 
                                      como argumento.
* Expansi@'on Aritm@'etica::  C@'omo usar la aritm@'etica en expansiones del 
                                int@'erprete.
* Sustituci@'on de Procesos::  Una forma de escribir y leer a y desde una 
                                 instrucci@'on.
* Divisi@'on de Palabras::   C@'omo los resultados de expansi@'on son 
                               divididos en argumentos separados.
* Expansi@'on de Nombre de Archivo::  Una abreviatura para especificar 
                                        nombres de archivos que coinciden 
                                        conpatrones.
* Eliminaci@'on de Comillas::  C@'omo y cu@'ando los caracteres de 
                                 entrecomillado son eliminados depalabras.
@end menu

El orden de las expansiones es expansi@'on de llaves; expansi@'on de
virgulilla, expansi@'on de par@'ametros y variables, expansi@'on
aritm@'etica y sustituci@'on de instrucciones (hechas de izquierda a
derecha); divisi@'on de palabras; y expansi@'on de nombre de archivo.

En sistemas que lo soportan, hay un expansi@'on adicional disponible:
@var{sustituci@'on de proceso}.  Esta es realizada al mismo tiempo que la
expansi@'on de virgulilla, par@'ametros y variables y la sustituci@'on de
instrucciones.

Despu@'es de que se hayan realizado estas expansiones, los caracteres de
entrecomillado presentes en la palabra original son eliminados a no ser que
estos mismos hayan sido entrecomillados (@var{eliminaci@'on de comillas}).

Solo la expansi@'on de llaves, divisi@'on de palabras y la expansi@'on de
nombre de archivo pueden cambiar el n@'umero de palabras de la expansi@'on;
otras expansiones expanden una sola palabra a una sola palabra.  Las
@'unicas excepciones a esto son las expansiones de @code{"$@@"}
(@pxref{Par@'ametros Especiales} y @code{"$@{@var{nombre}[@@]@}"}
(@pxref{Vectores}).

Despu@'es de todas las expansiones, se realiza la @code{eliminaci@'on de
comillas} (@pxref{Eliminaci@'on de Comillas}).

@node Expansi@'on de Llaves
@subsection Expansi@'on de Llaves
@cindex expansi@'on de llaves
@cindex expansi@'on, llave

La expansi@'on de llaves en un mecanismo por el cual se pueden generar
cadenas arbitrarias.  Este mecanismo es similar a la @var{expansi@'on de
nombre de archivo} (@pxref{Expansi@'on de Nombre de Archivo}), pero los
nombres de archivo generados no necesitan existir.  Los patrones que ser@'an
expandidos por llaves toman la forma de un @var{pre@'ambulo} opcional,
seguido de una serie de cadenas separadas por comas o una expresi@'on
secuencial entre un par de llaves, seguida por un
@var{ep@'{@dotless{i}}logo} opcional.  El pre@'ambulo es prefijado a cada
cadena contenida entre las llaves, y el ep@'{@dotless{i}}logo es entonces
a@~nadido a cada cadena resultante, expandiendo de izquierda a derecha.

Las expansiones de llaves pueden ser anidadas.  Los resultados de cada
cadena expandida no se ordenan; se preserva el orden de izquierda a
derecha.  Por ejemplo,
@example
bash$ echo a@{d,c,b@}e
ade ace abe
@end example

Una expresi@'on secuencial toma la forma
@code{@{@var{x}..@var{y}[..@var{incr}]@}}, donde @var{x} y @var{y} son
enteros o caracteres @'unicos, y @var{incr}, un incremento opcional, es un
entero.  Cuando se proporcionan enteros, la expresi@'on se expande a cada
n@'umero entre @var{x} y @var{y}, inclusive.  Los enteros proporcionados
pueden ser prefijados con @samp{0} para forzar que cada termino tenga la
misma anchura.  Cuando @var{x} o @var{y} comienzan en cero, el int@'erprete
trata de obligar a todos los t@'erminos generados contener el mismo n@'umero
de d@'{@dotless{i}}gitos, rellenando con ceros donde sea necesario.  Cuando
se proporcionan los caracteres, la expresi@'on se expande a cada car@'acter
lexicogr@'aficamente entre @var{x} y @var{y}, inclusive, usando la
configuraci@'on regional predeterminada C.  Observe que tanto @var{x} y
@var{y} deben ser del mismo tipo.  Cuando se proporciona el incremento, se
usa como diferencia entre cada t@'ermino.  El incremento predeterminado es 1
o -1 seg@'un corresponda.

La expansi@'on de llaves se realiza antes que cualquier otra expansi@'on, y
se preservan todos los caracteres especiales de otras expansiones en el
resultado.  Es estrictamente textual.  Bash no aplica ninguna
interpretaci@'on sint@'actica al contexto de la expansi@'on o al texto entre
las llaves.  Para evitar conflictos con la expansi@'on de par@'ametros, la
cadena @samp{$@{} no se considera aceptable para la expansi@'on de llaves.

Una expansi@'on de llaves correctamente formada debe contener llaves de
apertura y de cierre sin entrecomillar, y al menos una coma sin
entrecomillar o una expresi@'on secuencial v@'alida.  Cualquier expansi@'on
de llaves formada incorrectamente se deja sin modificar.

Un @{ o @samp{,} puede ser entrecomillado con una barra invertida para
evitar que sea considerado parte de la expansi@'on de llaves.  Para evitar
conflictos con la expansi@'on de par@'ametros, la cadena @samp{$@{} no se
considera apta para la expansi@'on de llaves.

Esta construcci@'on se usa t@'{@dotless{i}}picamente como atajo cuando el
prefijo com@'un de las cadenas que van a ser generadas es m@'as largo que en
el siguiente ejemplo:
@example
mkdir /usr/local/src/bash/@{old,new,dist,bugs@}
@end example
o
@example
chown root /usr/@{ucb/@{ex,edit@},lib/@{ex?.?*,how_ex@}@}
@end example

@node Expansi@'on de Virgulilla
@subsection Expansi@'on de Virgulilla
@cindex expansi@'on de virgulilla
@cindex expansi@'on, virgulilla

Si una palabra comienza por un car@'acter de virgulilla sin entrecomillar
(@samp{~}), todos los caracteres hasta la primera barra sin entrecomillar (o
todos los caracteres, si no hay barra sin entrecomillar) son considerados un
@var{prefijo de virgulilla}.  Si ninguno de los caracteres en el prefijo de
virgulilla est@'a entrecomillado, los caracteres en el prefijo de virgulilla
que siguen a la virgulilla son tratados como un posible @var{nombre de
acceso}.  Si este nombre de acceso es la cadena nula, la virgulilla es
reemplazada por el valor de la variable @env{HOME} del int@'erprete.  Si
@env{HOME} no est@'a establecida, se sustituye el directorio personal del
usuario ejecutando el int@'erprete en su lugar.  De lo contrario, se
reemplaza el prefijo de virgulilla por el directorio personal asociado con
el nombre de acceso especificado.

Si el prefijo de virgulilla es @samp{~+}, el valor de la variable del
int@'erprete @env{PWD} reemplaza el prefijo de virgulilla.  Si el prefijo de
virgulilla es @samp{~-}, se sustituye el valor de la variable @env{OLDPWD},
si est@'a establecida.

Si los caracteres que siguen la virgulilla en el prefijo de virgulilla
constan de un n@'umero @var{N}, opcionalmente prefijado por un @samp{+} o un
@samp{-}, la expansi@'on de virgulilla se reemplaza por el elemento
correspondiente de la pila de directorios, como se mostrar@'{@dotless{i}}a
por la instrucci@'on integrada @code{dirs} llamada con los caracteres que
siguen a la virgulilla en el prefijo de virgulilla como un argumento
(@pxref{La Pila de Directorios}).  Si el prefijo de virgulilla, sin la
virgulilla, consta de un n@'umero sin un @samp{+} o @samp{-} inicial, se
asume @samp{+}.

Si el nombre de acceso es inv@'alido, o la expansi@'on de virgulilla falla,
la palabra se deja sin modificar.

Cada asignaci@'on de variable se revisa en busca de prefijos de virgulilla
sin entrecomillar que inmediatamente sigan a un @samp{:} o al primer
@samp{=}.  En estos casos, tambi@'en es realizada la expansi@'on de
virgulilla.  Consecuentemente, uno puede usar nombres de archivo con
virgulillas en asignaciones a @env{PATH}, @env{MAILPATH} y @env{CDPATH}, y
el int@'erprete asigna el valor expandido.

La siguiente tabla muestra c@'omo trata Bash los prefijos de virgulilla sin
entrecomillar:

@table @code
@item ~
El valor de @code{$HOME}
@item ~/foo
@file{$HOME/foo}

@item ~fred/foo
El subdirectorio @code{foo} del directorio personal del usuario @code{fred}

@item ~+/foo
@file{$PWD/foo}

@item ~-/foo
@file{$@{OLDPWD-'~-'@}/foo}

@item ~@var{N}
La cadena que ser@'{@dotless{i}}a mostrada por @samp{dirs +@var{N}}

@item ~+@var{N}
La cadena que ser@'{@dotless{i}}a mostrada por @samp{dirs +@var{N}}

@item ~-@var{N}
La cadena que ser@'{@dotless{i}}a mostrada por @samp{dirs -@var{N}}
@end table

@node Expansi@'on de Par@'ametros del Int@'erprete
@subsection Expansi@'on de Par@'ametros del Int@'erprete
@cindex expansi@'on de par@'ametros
@cindex expansi@'on, par@'ametro

El car@'acter @samp{$} introduce la expansi@'on de par@'ametros,
sustituci@'on de instrucciones o expansi@'on aritm@'etica.  El nombre o
s@'{@dotless{i}}mbolo del par@'ametro para ser expandido se puede encerrar
en llaves, que son opcionales pero sirven para evitar que la variable se
expanda de caracteres que inmediatamente lo siguen que podr@'{@dotless{i}}an
ser interpretados como parte del nombre.

Cuando se usan llaves, la llave de cierre coincidente es el primer @samp{@}}
no escapado por una barra invertida o dentro de una cadena entrecomillada, y
no dentro de una expresi@'on aritm@'etica, sustituci@'on de instrucci@'on o
expansi@'on de par@'ametro incrustadas.

La forma b@'asica de expansi@'on de par@'ametros es $@{@var{par@'ametro}@}.
El valor de @var{par@'ametro} es sustituido.  El @var{par@'ametro} es un
par@'ametro del int@'erprete como se describe arriba (@pxref{Par@'ametros
del Int@'erprete}) o una referencia de vector (@pxref{Vectores}).  Las
llaves son requeridas cuando @var{par@'ametro} es un par@'ametro posicional
con m@'as de un d@'{@dotless{i}}gito, o cuando @var{par@'ametro} es seguido
por un car@'acter que no est@'a pensado para ser interpretado como parte de
su nombre.

Si el primer car@'acter de @var{par@'ametro} es un signo de exclamaci@'on
(!) y @var{par@'ametro} no es un @var{nameref}, introduce un nivel de
indirecci@'on de variable.  Bash usa el valor de la variable formada del
resto del @var{par@'ametro} como el nombre de la variable; esta variable se
expande entonces, y ese valor se usa en el resto de la sustituci@'on, en vez
del valor de @var{par@'ametro} en s@'{@dotless{i}}.  Esto se conoce como
@code{expansi@'on indirecta}.  Si @var{par@'ametro} es un nameref, esto se
expande al nombre de la variable referenciada por @var{par@'ametro} en vez
de realizar la expansi@'on completa indireccional.  Las excepciones a esto
son las expansiones de $@{!@var{prefijo}*@} y $@{!@var{nombre}[@@]@}
descritas a continuaci@'on.  El signo de exclamaci@'on de cierre debe seguir
inmediatamente a la llave izquierda para introducir indirecci@'on.

En todos los siguientes casos, @var{palabra} est@'a sujeta a la expansi@'on
de virgulilla, expansi@'on de par@'ametro, sustituci@'on de instrucci@'on y
expansi@'on aritm@'etica.

Cuando no se realiza la expansi@'on de subcadena, usando la forma descrita
abajo (p. ej., @samp{:-}), Bash comprueba por un par@'ametro que sea nulo o
no est@'e establecido.  Omitir los dos puntos resulta en una prueba solo
para un par@'ametro que no est@'e establecido.  Dicho de otra manera, si se
incluyen los dos puntos, el operador comprueba la existencia de
@var{par@'ametro} y que su valor no sea nulo; si se omiten los dos puntos,
el operador solo comprueba su existencia.

@table @code

@item $@{@var{par@'ametro}:@minus{}@var{palabra}@}
Si @var{par@'ametro} no est@'a establecido o es nulo, se sustituye por la
expansi@'on de @var{palabra}.  De lo contrario, se sustituye por el valor de
@var{par@'ametro}.

@item $@{@var{par@'ametro}:=@var{palabra}@}
Si @var{par@'ametro} no est@'a establecido o es nulo, se asigna la
expansi@'on de @var{palabra} a @var{par@'ametro}.  Se sustituye entonces el
valor de @var{par@'ametro}.  A los par@'ametros posicionales y par@'ametros
especiales no se les puede asignar de esta manera.

@item $@{@var{par@'ametro}:?@var{palabra}@}
Si @var{par@'ametro} no est@'a establecido o es nulo, la expansi@'on de
@var{palabra} (o un mensaje al respecto si @var{palabra} no est@'a presente)
es escrita al error est@'andar, y el int@'erprete, si no es interactivo, se
cierra.  De lo contrario, se sustituye el valor de @var{par@'ametro}.

@item $@{@var{par@'ametro}:+@var{palabra}@}
Si @var{par@'ametro} es nulo o no est@'a establecido, no se sustituye por
nada; de lo contrario, se sustituye por la expansi@'on de @var{palabra}.

@item $@{@var{par@'ametro}:@var{desplazamiento}@}
@itemx $@{@var{par@'ametro}:@var{desplazamiento}:@var{longitud}@}
Esto se conoce como Expansi@'on de Subcadena.  Se expande hasta
@var{longitud} car@'acteres del valor de @var{par@'ametro} empezando por el
car@'acter especificado por @var{desplazamiento}.  Si @var{par@'ametro} es
@samp{@@}, un vector indexado subindexado por @samp{@@} o @samp{*} o un
nombre de vector asociativo, los resultados difieren como se describe m@'as
abajo.  Si se omite @var{longitud}, se expande a la subcadena del valor de
@var{par@'ametro} empezando en el car@'acter especificado por
@var{desplazamiento} y extendi@'endose hasta el final del valor.
@var{longitud} y @var{desplazamiento} son expresiones aritm@'eticas
(@pxref{Aritm@'etica del Int@'erprete}).

Si @var{desplazamiento} se eval@'ua a un n@'umero menor que cero, el valor
se usa como un desplazamiento en caracteres desde el final del valor de
@var{par@'ametro}.  Si @var{longitud} se eval@'ua a un n@'umero menor que
cero, se interpreta como un desplazamiento en caracteres desde el final del
valor de @var{par@'ametro} en vez de un n@'umero de caracteres, y la
expansi@'on equivale a los caracteres entre @var{desplazamiento} y ese
resultado.  Observe que un desplazamiento negativo debe ser separado de los
dos puntos por al menos un espacio para evitar confusi@'on con la
expansi@'on @samp{:-}.

Aqu@'{@dotless{i}} hay algunos ejemplos que ilustran la expansi@'on de
subcadenas en par@'ametros y vectores subindexados:

@verbatim
$ cadena=01234567890abcdefgh
$ echo ${cadena:7}
7890abcdefgh
$ echo ${cadena:7:0}

$ echo ${cadena:7:2}
78
$ echo ${cadena:7:-2}
7890abcdef
$ echo ${cadena: -7}
bcdefgh
$ echo ${cadena: -7:0}

$ echo ${cadena: -7:2}
bc
$ echo ${cadena: -7:-2}
bcdef
$ set -- 01234567890abcdefgh
$ echo ${1:7}
7890abcdefgh
$ echo ${1:7:0}

$ echo ${1:7:2}
78
$ echo ${1:7:-2}
7890abcdef
$ echo ${1: -7}
bcdefgh
$ echo ${1: -7:0}

$ echo ${1: -7:2}
bc
$ echo ${1: -7:-2}
bcdef
$ vector[0]=01234567890abcdefgh
$ echo ${vector[0]:7}
7890abcdefgh
$ echo ${vector[0]:7:0}

$ echo ${vector[0]:7:2}
78
$ echo ${vector[0]:7:-2}
7890abcdef
$ echo ${vector[0]: -7}
bcdefgh
$ echo ${vector[0]: -7:0}

$ echo ${vector[0]: -7:2}
bc
$ echo ${vector[0]: -7:-2}
bcdef
@end verbatim

Si @var{par@'ametro} es @samp{@@}, el resultado es @var{longitud}
par@'ametros posicionales comenzando por @var{desplazamiento}.  Un
@var{desplazamiento} se toma en relaci@'on a uno mayor que el par@'ametro
posicional m@'as grande, de manera que un desplazamiento de -1 eval@'ua al
@'ultimo par@'ametro posicional.  Es un error de expansi@'on si
@var{longitud} eval@'ua a un n@'umero menor que cero.

Los siguientes ejemplos ilustran la expansi@'on de subcadenas usando
par@'ametros posicionales:

@verbatim
$ set -- 1 2 3 4 5 6 7 8 9 0 a b c d e f g h
$ echo ${@:7}
7 8 9 0 a b c d e f g h
$ echo ${@:7:0}

$ echo ${@:7:2}
7 8
$ echo ${@:7:-2}
bash: -2: expresión de subcadena < 0
$ echo ${@: -7:2}
b c
$ echo ${@:0}
./bash 1 2 3 4 5 6 7 8 9 0 a b c d e f g h
$ echo ${@:0:2}
./bash 1
$ echo ${@: -7:0}

@end verbatim

Si @var{par@'ametro} es un nombre de vector subindexado por @samp{@@} o
@samp{*}, el resultado es la @var{longitud} de miembros del vector que
comienzan por @code{$@{@var{par@'ametro}[@var{desplazamiento}]@}}.  Un
@var{desplazamiento} negativo se toma respecto a uno mayor que el m@'aximo
@'{@dotless{i}}ndice del vector especificado.  Es un error de expansi@'on si
@var{longitud} eval@'ua a un n@'umero menor que cero.

Estos ejemplos muestran c@'omo puede usar la expansi@'on de subcadenas con
vectores indexados:

@verbatim
$ vector=(0 1 2 3 4 5 6 7 8 9 0 a b c d e f g h)
$ echo ${vector[@]:7}
7 8 9 0 a b c d e f g h
$ echo ${vector[@]:7:2}
7 8
$ echo ${vector[@]: -7:2}
b c
$ echo ${vector[@]: -7:-2}
bash: -2: expresión de subcadena < 0
$ echo ${vector[@]:0}
0 1 2 3 4 5 6 7 8 9 0 a b c d e f g h
$ echo ${vector[@]:0:2}
0 1
$ echo ${vector[@]: -7:0}

@end verbatim

La expansi@'on de subcadena aplicada a un vector asociativo produce
resultados inesperados.

La indexaci@'on de subcadenas es a partir del cero a no ser que se usen los
par@'ametros posicionales, en cuyo caso la indexaci@'on comienza en 1 por
defecto.  Si @var{desplazamiento} es 0 y se usan los par@'ametros
posicionales, se prefija @code{$@@} a la lista.

@item $@{!@var{prefijo}*@}
@itemx $@{!@var{prefijo}@@@}
Se expande a los nombres de variables cuyos nombres empiezan por
@var{prefijo}, separados por el primer car@'acter de la variable especial
@env{IFS}.  Cuando se usa @samp{@@} y la expansi@'on aparece entre comillas
dobles, cada nombre de variable se expande a una palabra separada.

@item $@{!@var{nombre}[@@]@}
@itemx $@{!@var{nombre}[*]@}
Si @var{nombre} es una variable de vector, se expande a la lista de indices
de vectores (claves) asignada en @var{nombre}.  Si @var{nombre} no es un
vector, se expande a 0 si @var{nombre} est@'a establecido y a nulo en caso
contrario.  Cuando se usa @samp{@@} y la expansi@'on aparece entre comillas
dobles, cada clave se expande a una palabra separada.

@item $@{#@var{par@'ametro}@}
Se sustituye la longitud en caracteres del valor expandido de
@var{par@'ametro}.  Si @var{par@'ametro} es @samp{*} o @samp{@@}, el valor
sustituido es el n@'umero de par@'ametros posicionales.  Si
@var{par@'ametro} es un nombre de vector subindexado por @samp{*} o
@samp{@@}, el valor sustituido es el n@'umero de elementos en el vector.  Si
@var{par@'ametro} es un nombre de vector indexado subindexado por un
n@'umero negativo, ese n@'umero es interpretado como relativo a uno mayor
que el @'{@dotless{i}}ndice m@'aximo de @var{par@'ametro}, de forma que los
@'{@dotless{i}}ndices negativos cuenten atr@'as desde el final del vector, y
un @'{@dotless{i}}ndice de -1 referencie al @'ultimo elemento.

@item $@{@var{par@'ametro}#@var{palabra}@}
@itemx $@{@var{par@'ametro}##@var{palabra}@}
La @var{palabra} se expande para producir un patr@'on de la misma manera que
en una expansi@'on de nombre de archivo (@pxref{Expansi@'on de Nombre de
Archivo}).  Si el patr@'on coincide con el principio del valor expandido de
@var{par@'ametro}, el resultado de la expansi@'on es el valor expandido de
@var{par@'ametro} con el patr@'on m@'as corto coincidente (el caso @samp{#})
o el patr@'on m@'as largo coincidente (el caso @samp{##}) eliminado.  Si
@var{par@'ametro} es @samp{@@} o @samp{*}, la operaci@'on de eliminaci@'on
de patr@'on se aplica a cada par@'ametro posicional en orden, y la
expansi@'on es la lista resultante.  Si @var{par@'ametro} es una variable de
sub@'{@dotless{i}}ndice de vector con @samp{@@} o @samp{*}, se aplica la
operaci@'on de eliminaci@'on de patr@'on a cada miembro del vector en orden,
y la expansi@'on es la lista resultante.

@item $@{@var{par@'ametro}%@var{palabra}@}
@itemx $@{@var{par@'ametro}%%@var{palabra}@}
La @var{palabra} se expande para producir un patr@'on de la misma manera que
en la expansi@'on de nombre de archivo.  Si el patr@'on coincide con una
porci@'on del final del valor expandido de @var{par@'ametro}, el resultado
de la expansi@'on es el valor de @var{par@'ametro} con el patr@'on
coincidente m@'as corto (el caso @samp{%})  o el patr@'on coincidente m@'as
largo (el caso @samp{%%}).  Si @var{par@'ametro} es @samp{@@} o @samp{*}, se
aplica la operaci@'on de eliminaci@'on de patr@'on a cada par@'ametro
posicional en orden, y la expansi@'on es la lista resultante.  Si
@var{par@'ametro} es una variable de vector subindexada con @samp{@@} o
@samp{*}, la operaci@'on de eliminaci@'on de patr@'on se aplica a cada
miembro del vector en orden, y la expansi@'on es la lista resultante.

@item $@{@var{par@'ametro}/@var{patr@'on}/@var{cadena}@}

El @var{patr@'on} se expande para producir un patr@'on de la misma manera
que en la expansi@'on de nombre de archivo.  Se expande @var{par@'ametro}, y
se reemplaza por @var{cadena} la coincidencia de @var{patr@'on} con el valor
m@'as largo.  Si @var{patr@'on} comienza por @samp{/}, todas las
coincidencias de @var{patr@'on} son reemplazadas por @var{cadena}.
Normalmente solo se reemplaza la primera coincidencia.  Si @var{patr@'on}
comienza en @samp{#}, debe coincidir al comienzo del valor expandido de
@var{par@'ametro}.  Si @var{patr@'on} comienza por @samp{%}, debe coincidir
al final del valor expandido de @var{par@'ametro}.  Si @var{cadena} es nulo,
las coincidencias de @var{patr@'on} son eliminadas y se puede omitir el
@code{/} que sigue a @var{patr@'on}.  Si est@'a habilitada la opci@'on del
int@'erprete @code{nocasematch} (consulte la descripci@'on de @code{shopt}
en @ref{La Instrucci@'on Integrada Shopt}), la coincidencia se realiza sin
importar las may@'usculas y min@'usculas de caracteres alfab@'eticos.  Si
@var{par@'ametro} es @samp{@@} o @samp{*}, la operaci@'on de sustituci@'on
se aplica a cada par@'ametro posicional en orden y la expansi@'on es la
lista resultante.  Si @var{par@'ametro} es una variable de vector
subindexada con @samp{@@} o @samp{*}, se aplica la operaci@'on de
sustituci@'on a cada miembro del vector en orden y la expansi@'on es la
lista resultante.

@item $@{@var{par@'ametro}^@var{patr@'on}@}
@itemx $@{@var{par@'ametro}^^@var{patr@'on}@}
@itemx $@{@var{par@'ametro},@var{patr@'on}@}
@itemx $@{@var{par@'ametro},,@var{patr@'on}@}
La expansi@'on modifica las may@'usculas y min@'usculas de los caracteres
alfab@'eticos.  El @var{patr@'on} se expande para producir un patr@'on de la
misma manera que en la expansi@'on de nombre de archivo.  Cada car@'acter en
el valor expandido de @var{par@'ametro} es comprobado contra @var{patr@'on},
y, si coincide con el patr@'on, se alterna entre may@'usculas y
min@'usculas.  El patr@'on no deber@'{@dotless{i}}a tratar de coincidir con
m@'as de un car@'acter.  El operador @samp{^} convierte ĺetras min@'usculas
que coinciden con @var{patr@'on} a may@'usculas; el operador @samp{,}
convierte letras may@'usculas coincidentes a min@'usculas.  Las expansiones
@samp{^^} y @samp{,,} convierten cada car@'acter coincidente en el valor
expandido; las las expansiones @samp{^} y @samp{,} coinciden y convierten
solo el primer car@'acter en el valor expandido.  Si se omite
@var{patr@'on}, se trata como un @samp{?}, que coincide con cualquier
car@'acter.  Si @var{par@'ametro} es @samp{@@} o @samp{*}, la operaci@'on de
modificaci@'on de alternaci@'on entre may@'usculas y min@'usculas se aplica
a cada par@'ametro posicional en orden y la expansi@'on es la lista
resultante.  Si @var{par@'ametro} es una variable de vector subindexada con
@samp{@@} o @samp{*}, la operaci@'on de modificaci@'on de alternaci@'on
entre may@'usculas y min@'usculas se aplica a cada miembro en orden y la
expansi@'on es la lista resultante.

@item $@{@var{par@'ametro}@@@var{operador}@}
La expansi@'on es o una transformaci@'on del valor de @var{par@'ametro} o
informaci@'on sobre @var{par@'ametro} en s@'{@dotless{i}}, dependiendo del
valor de @var{operador}.  Cada @var{operador} es una @'unica letra:

@table @code
@item Q
La expansi@'on es una cadena que es el valor de @var{par@'ametro}
entrecomillado en un formato que puede ser reutilizado como entrada.
@item E
La expansi@'on es una cadena que es el valor de @var{par@'ametro} con
secuencias de escape de barras bajas expandidas con el mecanismo de
entrecomillado @code{$'@dots{}'}.
@item P
La expansi@'on es una cadena que es el resultado de expandir el valor de
@var{par@'ametro} como si fuera una cadena de prompt (@pxref{Controlando el
Prompt}).
@item A
La expansi@'on es una cadena en forma de una sentencia de asignaci@'on o
instrucci@'on @code{declare} que, si se eval@'ua, recrear@'a
@var{par@'ametro} con sus atributos y valor.
@item a
La expansi@'on es una cadena consistente en valores centinela que
representan los atributos de @var{par@'ametro}.
@end table

Si @var{par@'ametro} es @samp{@@} o @samp{*}, se aplica la operaci@'on a
cada par@'ametro posicional en orden y la expansi@'on es la lista
resultante.  Si @var{par@'ametro} es una variable de vector subindexada con
@samp{@@} o @samp{*}, la operaci@'on se aplica a cada miembro del vector en
orden y la expansi@'on es la lista resultante.

El resultado de la expansi@'on est@'a sujeto a la divisi@'on de palabras y
la expansi@'on de nombre de archivo como se describe m@'as abajo.
@end table

@node Sustituci@'on de Instrucciones
@subsection Sustituci@'on de Instrucciones
@cindex sustituci@'on de instrucciones

La sustituci@'on de instrucciones permite a la salida de una instrucci@'on
reemplazar a la propia instrucci@'on.  La sustituci@'on de instrucci@'on
ocurre cuando se rodea una instrucci@'on as@'{@dotless{i}}:
@example
$(@var{instrucci@'on})
@end example
@noindent
o
@example
`@var{instrucci@'on}`
@end example

@noindent
Bash realiza la expansi@'on ejecutando @var{instrucci@'on} en un entorno de
subint@'erprete y reemplazando la sustituci@'on de la instrucci@'on con la
salida est@'andar de la instrucci@'on, con cualquier nueva
l@'{@dotless{i}}nea final eliminada.  Las nuevas l@'{@dotless{i}}neas
integradas no se eliminan, pero pueden ser borradas durante la divisi@'on de
palabras.  La instrucci@'on de sustituci@'on @code{$(cat @var{file})} puede
ser reemplazada por el equivalente pero m@'as r@'apido @code{$(<
@var{archivo})}.

Cuando se usa la vieja forma de sustituci@'on de comilla invertida, la barra
invertida mantiene su significado literal excepto cuando es seguida por
@samp{$}, @samp{`} o @samp{\}.  La primera barra invertida no precedida por
una barra invertida termina la sustituci@'on de instrucci@'on.  Al usar la
forma @code{$(@var{instrucci@'on})}, todos los caracteres entre los
par@'entesis componen la instrucci@'on; ninguno es tratado de forma
especial.

Las sustituciones de instrucciones se pueden anidar.  Para anidar usando la
forma de comilla invertida, escape las comillas invertidas interiores con
barras invertidas.

Si la sustituci@'on aparece entre comillas dobles, la divisi@'on de palabras
y la expansi@'on de nombre de archivo no se realizan en los resultados.

@node Expansi@'on Aritm@'etica
@subsection Expansi@'on Aritm@'etica
@cindex expansi@'on, aritm@'etica
@cindex expansi@'on aritm@'etica

La expansi@'on aritm@'etica permite la evaluaci@'on de una expresi@'on
aritm@'etica y la sustituci@'on del resultado.  El formato para la
expansi@'on aritm@'etica es:

@example
$(( @var{expresi@'on} ))
@end example

La expresi@'on se trata como si estuviera entre comillas dobles, pero una
comilla doble dentro de los par@'entesis no se trata de forma especial.
Todos los s@'{@dotless{i}}mbolos en la expresi@'on pasan por la expansi@'on
de par@'ametro y variable, sustituci@'on de instrucci@'on y eliminaci@'on de
comillas.  El resultado se trata como la expresi@'on aritm@'etica a
evaluar.  Las expansiones aritm@'eticas pueden ser anidadas. 

La evaluaci@'on se realiza de acuerdo a las reglas listadas abajo
(@pxref{Aritm@'etica del Int@'erprete}).  Si la expresi@'on es inv@'alida,
Bash imprime un mensaje indicando fallo al error est@'andar y no ocurre
ninguna sustituci@'on.

@node Sustituci@'on de Procesos
@subsection Sustituci@'on de Procesos
@cindex sustituci@'on de proceso

La sustituci@'on de proceso permite hacer referencia a la entrada o salida
de un proceso usando un nombre de archivo.  Toma la forma de 
@example
<(@var{lista})
@end example
@noindent
o
@example
>(@var{lista})
@end example
@noindent
La @var{lista} de proceso es ejecutada as@'{@dotless{i}}ncronamente, y su
entrada o salida aparece como un nombre de archivo.  Este nombre de archivo
es pasado como un argumento a la instrucci@'on actual como el resultado de
la expansi@'on.  Si se usa la forma @code{>(@var{lista})}, el archivo pasado
como un argumento deber@'{@dotless{i}}a ser le@'{@dotless{i}}do para obtener
la salida de @var{lista}.  Observe que no puede aparecer ning@'un espacio
entre @code{<} o @code{>} y el par@'entesis izquierdo, de lo contrario la
construcci@'on ser@'{@dotless{i}}a interpretada como una redirecci@'on.  La
sustituci@'on de procesos está soportada en sistemas que admiten
tuber@'{@dotless{i}}as nombradas (@sc{fifo}s) o el m@'etodo @file{/dev/fd}
de nombrar archivos abiertos.

Cuando est@'a disponible, la sustituci@'on de proceso se realiza
simult@'aneamente con la expansi@'on de par@'ametro y de variable, la
sustituci@'on de instrucci@'on y la expansi@'on aritm@'etica.

@node Divisi@'on de Palabras
@subsection Divisi@'on de Palabras
@cindex divisi@'on de palabras

El int@'erprete escanea los resultados de la expansi@'on de par@'ametros, la
sustituci@'on de instrucci@'on y la expansi@'on aritm@'etica que no
ocurrieron dentro de comillas dobles para divisi@'on de palabras.

El int@'erprete trata cada car@'acter de @env{$IFS} como un delimitador y
divide los resultados de las otras expansiones en palabras usando estos
caracteres como terminadores de campos.  Si @env{IFS} no est@'a habilitado o
su valor es exactamente @code{<espacio><tabulaci@'on><nueva
l@'{@dotless{i}}nea>}, el predeterminado, las secuencias de
@code{<espacio>}, @code{<tabulaci@'on>} y @code{<nueva l@'{@dotless{i}}nea>}
al principio y el final de los resultados de las expansiones previas son
ignorados, y cualquier secuencia de caracteres @env{IFS} que no est@'en al
principio o al final sirve para delimitar palabras.  Si @env{IFS} tiene un
valor distinto al predeterminado, las secuencias de caracteres de espacios
en blanco @code{espacio}, @code{tabulaci@'on} y @code{nueva
l@'{@dotless{i}}nea} son ignoradas al principio y final de la palabra,
mientras que el car@'acter de espacio en blanco est@'e en el valor de
@env{IFS} (un car@'acter en blanco de @env{IFS}).  Cualquier car@'acter en
@env{IFS} que no sea un espacio en blanco de @env{IFS}, junto a alg@'un
car@'acter de espacio en blanco de @env{IFS}, delimita un campo.  Una
secuencia de caracteres de espacio en blanco de @env{IFS} tambi@'en se trata
como un delimitador.  Si el valor de @env{IFS} es nulo, no ocurre ninguna
divisi@'on de palabra.

Los argumentos expl@'{@dotless{i}}citamente nulos (@code{""} o @code{''})
son conservados y pasados a instrucciones como cadenas
vac@'{@dotless{i}}as.  Los argumentos nulos impl@'{@dotless{i}}citos,
resultantes de la expansi@'on de par@'ametros que no tiene valores, son
eliminados.  Si un par@'ametro sin valor se expande entre comillas dobles,
resulta en un argumento nulo y es retenido y pasado a una instrucci@'on como
una cadena vac@'{@dotless{i}}a.  Cuando un argumento nulo entrecomillado
aparece como parte de una palabra cuya expansi@'on no es nula, se elimina el
argumento nulo.  Es decir, la palabra @code{-d"} se convierte en @code{-d}
despu@'es de la divisi@'on de palabras y la eliminaci@'on de argumentos
nulos.

Observe que si no ocurre ninguna expansi@'on, no se realiza ninguna
divisi@'on.

@node Expansi@'on de Nombre de Archivo
@subsection Expansi@'on de Nombre de Archivo
@menu
* Coincidencia de Patrones::  C@'omo el int@'erprete coincide con patrones.
@end menu
@cindex expansi@'on, nombre de archivo
@cindex expansi@'on, nombre de ruta
@cindex expansi@'on de nombre de archivo
@cindex expansi@'on de nombre de ruta

Despu@'es de la divisi@'on de palabras, a no ser que la opci@'on @option{-f}
haya sido establecida (@pxref{La Instrucci@'on Integrada Set}), Bash escanea
cada palabra en busca de los caracteres @samp{*}, @samp{?} y @samp{[}.  Si
uno de estos caracteres aparece, la palabra es tratada como un
@var{patr@'on} y reemplazada con una lista de nombres de archivo ordenada
alfab@'eticamente que coincide con el patr@'on (@pxref{Coincidencia de
Patrones}).  Si no se encuentra ning@'un nombre de archivo coincidente y
est@'a desactivada la opci@'on del int@'erprete @code{nullglob}, la palabra
se deja sin modificar.  Si la opci@'on @code{nullglob} est@'a habilitada y
no se encuentran coincidencias, la palabra es eliminada.  Si la opci@'on del
int@'erprete @code{failglob} est@'a establecida y no se encuentran
coincidencias, se imprime un mensaje de error y no se ejecuta la
instrucci@'on.  Si est@'a habilitada la opci@'on de int@'erprete
@code{nocaseglob}, la coincidencia se realiza sin tener en cuenta las
may@'usculas y min@'usculas de caracteres alfab@'eticos.

Cuando se usa un patr@'on para la expansi@'on de nombre de archivo, el
car@'acter @samp{.} al principio de un nombre de archivo o inmediatamente
siguiendo a una barra debe ser coincidido expl@'{@dotless{i}}citamente, a no
ser que la opci@'on del int@'erprete @code{dotglob} est@'e habilitada.  Al
coincidir un nombre de archivo, el car@'acter de barra debe ser coincidido
siempre expl@'{@dotless{i}}citamente.  En otros casos, el car@'acter
@samp{.} no es tratado de forma especial.

Consulte la descripci@'on de @code{shopt} en @ref{La Instrucci@'on Integrada
Shopt}, para una descripci@'on de las opciones @code{nocaseglob},
@code{nullglob}, @code{failglob} y @code{dotglob}.

La variable del int@'erprete @env{GLOBIGNORE} puede ser usada para
restringir el conjunto de nombres de archivo que coinciden con un patr@'on.
Si @env{GLOBIGNORE} est@'a establecida, cada nombre de archivo coincidente
que tambi@'en coincida con uno de los patrones en @env{GLOBIGNORE} es
eliminado de la lista de coincidencias.  Si la opci@'on @code{nocaseglob}
est@'a habilitada, la coincidencia con el patr@'on en @env{GLOBIGNORE} se
realiza sin importar las may@'usculas y min@'usculas.  Los nombres de
archivo @file{.} y @file{..} siempre se ignoran cuando @env{GLOBIGNORE}
est@'a establecida y no es nula.  Sin embargo, establecer @env{GLOBIGNORE} a
un valor no nulo tiene el efecto de activar la opci@'on del int@'erprete
@code{dotglob}, para que todos los otros nombres de archivo que empiezan por
@samp{.} coincidan.  Para obtener el viejo comportamiento de ignorar los
nombres de archivo que comienzan por @samp{.}, haz @samp{.*} uno de los
patrones en @env{GLOBIGNORE}.  La opci@'on @code{dotglob} se desabilita
cuando @env{GLOBIGNORE} no est@'a establecida.

@node Coincidencia de Patrones
@subsubsection Coincidencia de Patrones
@cindex coincidencia de patr@'on
@cindex coincidencia, patr@'on

Cualquier car@'acter que aparezca en un patr@'on, distinto a los caracteres
de patr@'on especial descritos m@'as abajo, coincide con s@'{@dotless{i}}
mismo.  El car@'acter @sc{nul} no puede ocurrir en un patr@'on.  Una barra
invertida escapa el siguiente car@'acter; la barra invertida de escape se
descarta durante la coincidencia.  Los caracteres de patrones especiales
deben ser entrecomillados si no van a ser coincididos literalmente.

Los caracteres de patr@'on especiales tienen los siguientes significados:
@table @code
@item *
Coincide con cualquier cadena, incluida la cadena nula.  Cuando est@'a
habilitada la opci@'on @code{globstar} y se usa @samp{*} en un contexto de
expansi@'on de nombre de archivo, dos @samp{*} adyacentes usados como un
patr@'on @'unico coincidir@'an con todos los archivos y cero o m@'as
directorios y subdirectorios.  Detrás de una @samp{/}, dos @samp{*}
adyacentes solo coincidir@'an con directorios y subdirectorios.
@item ?
Coincide con un @'unico car@'acter.
@item [@dots{}]
Coincide con cualquiera de los patrones incluidos.  Una pareja de patrones
separada por un guion denota una @var{expresi@'on de rango}; cualquier
car@'acter que se encuentre entre esos dos caracteres, inclusive, usando la
secuencia de ordenaci@'on y el conjunto de caracteres de la configuraci@'on
regional actual, es coincidido.  Si el primer car@'acter que sigue al
@samp{[} es un @samp{!} o un @samp{^}, es coincidido cualquier car@'acter no
incluido.  Un @samp{@minus{}} puede ser coincidido incluy@'endolo como el
primer o @'ultimo car@'acter en el conjunto.  Un @samp{]} puede ser
coincidido incluy@'endolo como el primer car@'acter en el conjunto.  El
orden de ordenaci@'on de caracteres en las expresiones de rango se determina
por la configuraci@'on regional actual y los valores de las variables del
int@'erprete @env{LC_COLLATE} y @env{LC_ALL}, si est@'an establecidas.

Por ejemplo, en la configuraci@'on regional predeterminada C,
@samp{[a-dx-z]} es equivalente a @samp{[abcdxyz]}.  Muchas configuraciones
regionales ordenan los caracteres en orden de diccionario, y en estas
configuraciones regionales @samp{[a-dx-z]} no es normalmente equivalente a
@samp{[abcdxyz]}; podr@'{@dotless{i}}a ser equivalente a
@samp{[aBbCcDdxXyYz]}, por ejemplo.  Para obtener la interpretaci@'on
tradicional de rangos en las expresiones de llaves, puede forzar el uso de
la configuraci@'on regional C estableciendo la variable de entorno
@env{LC_COLLATE} o @env{LC_ALL} al valor @samp{C}, o habilitar la opci@'on
del int@'erprete @code{globasciiranges}.

Dentro de @samp{[} y @samp{]}, se pueden especificar @var{clases de
caracteres} usando la sintaxis @code{[:}@var{clase}@code{:]}, donde
@var{clase} es una de las siguientes clases definidas en el est@'andar
@sc{posix}:
@example
alnum   alpha   ascii   blank   cntrl   digit   graph   lower
print   punct   space   upper   word    xdigit
@end example
@noindent
Una clase de car@'acter coincide cualquier car@'acter que perteneciente a
esa clase.  La clase de car@'acter @code{word} coincide con letras,
d@'{@dotless{i}}gitos y el car@'acter @samp{_}.

Dentro de @samp{[} y @samp{]}, se puede especificar una @var{clase de
equivalencia} usando la sintaxis @code{[=}@var{c}@code{=]}, que coincide con
todos los caracteres con el mismo peso de ordenaci@'on (seg@'un est@'e
definido en la configuraci@'on regional actual) como el car@'acter @var{c}.

Dentro de @samp{[} y @samp{]}, la sintaxis
@code{[.}@var{s@'{@dotless{i}}mbolo}@code{.]} coincide con el
s@'{@dotless{i}}mbolo de ordenaci@'on @var{s@'{@dotless{i}}mbolo}.
@end table

Si la opci@'on del int@'erprete @code{extglob} se habilita usando la
instrucci@'on integrada @code{shopt}, se reconocen varios operadores de
coincidencia de patr@'on extendido.  En la siguiente descripci@'on, una
@var{lista-de-patrones} es una lista de uno o m@'as patrones separados por
un @samp{|}.  Se pueden formar patrones compuestos usando uno o m@'as de los
siguientes subpatrones:

@table @code
@item ?(@var{lista-de-patrones})
Coincide con cero o una ocurrencia de los patrones dados.

@item *(@var{lista-de-patrones})
Coincide con cero o m@'as ocurrencias de los patrones dados.

@item +(@var{lista-de-patrones})
Coincide con una o m@'as ocurrencias de los patrones dados.

@item @@(@var{lista-de-patrones})
Coincide con uno de los patrones dados.

@item !(@var{lista-de-patrones})
Coincide con cualquier cosa menos uno de los patrones dados.
@end table

@node Eliminaci@'on de Comillas
@subsection Eliminaci@'on de Comillas

Despu@'es de las expansiones precedentes, todas las ocurrencias sin
entrecomillar de los caracteres @samp{\}, @samp{'} y @samp{"} que no se
produjeron a partir de una de las expresiones anteriores son eliminadas.

@node Redirecciones
@section Redirecciones
@cindex redirecci@'on

Antes de que se ejecute una instrucci@'on, su entrada y su salida pueden ser
@var{redirigidas} usando una notaci@'on especial interpretada por el
int@'erprete.  La redirecci@'on permite a manejadores de archivos de
instrucciones ser duplicados, abiertos, cerrados, referidos a otros
archivos, y puede cambiar los archivos de los que la instrucci@'on lee y a
los que escribe.  La redirecci@'on tambi@'en se puede usar para modificar
los manejadores de archivos en el actual entorno de ejecuci@'on del
int@'erprete.  Los siguientes operadores de redirecci@'on pueden preceder o
aparecer en cualquier lugar dentro de una instrucci@'on simple o pueden
seguir a una instrucci@'on.  Las redirecciones se procesan en el orden en
que aparecen, de izquierda a derecha.

Cada redirecci@'on que pueda ser precedida por un n@'umero de descriptor de
archivo podr@'{@dotless{i}}a ser precedida en su lugar por una palabra de la
forma @{@var{nombre-de-var}@}.  En este caso, por cada operador de
redirecci@'on excepto >&- y <&-, el int@'erprete destinar@'a un descriptor
de archivo mayor que 10 y lo asignar@'a a @{@var{nombre-de-var}@}.  Si >&- o
<&- est@'a precedido por @{@var{nombre-de-var}@}, el valor de
@var{nombre-de-var} define el descriptor de archivo que cerrar.

En las siguientes descripciones, si se omite el n@'umero del descriptor de
archivo y el primer car@'acter del operador de redirecci@'on es @samp{<}, la
redirecci@'on hace referencia a la entrada est@'andar (descriptor de archivo
0).  Si el primer car@'acter del operador de redirecci@'on es @samp{>}, la
redirecci@'on hace referencia a la salida est@'andar (descriptor de archivo
1).

La palabra que sigue al operador de redirecci@'on en las siguientes
descripciones, a no ser que se indique lo contrario, est@'a sujeta a la
expansi@'on de llaves, expansi@'on de virgulilla, expansi@'on de
par@'ametros, sustituci@'on de instrucciones, expansi@'on aritm@'etica,
eliminaci@'on de comillas, expansi@'on de nombre de archivo y divisi@'on de
palabras.  Si se expande a m@'as de una palabra, Bash informa de un error.

Observe que el orden de las redirecciones es importante.  Por ejemplo, la
instrucci@'on
@example
ls > @var{lista-de-dir} 2>&1
@end example
@noindent
dirige tanto la salida est@'andar (descriptor de archivo 1) como el error
est@'andar (descriptor de archivo 2) al archivo @var{lista-de-dir}, mientras
que la instrucci@'on
@example
ls 2>&1 > @var{lista-de-dir}
@end example
@noindent
dirige solo la salida est@'andar al archivo @var{lista-de-dir}, porque el
error est@'andar fue convertido en una copia de la salida est@'andar antes
de que la salida est@'andar fuera redirigida a @var{lista-de-dir}.

Bash maneja varios nombres de archivos de forma especial cuando son usados
en redirecciones, como se describe en la siguiente tabla.  Si el sistema
operativo en que Bash se ejecuta proporciona estos archivos especiales, Bash
los usar@'a; en caso contrario, los emular@'a internamente con el
comportamiento descrito a continuaci@'on.

@table @code
@item /dev/fd/@var{da}
Si @var{da} es un entero v@'alido, se duplica el descriptor de archivo
@var{da}.

@item /dev/stdin
Se duplica el descriptor de archivo 0.

@item /dev/stdout
Se duplica el descriptor de archivo 1.

@item /dev/stderr
Se duplica el descriptor de archivo 2.

@item /dev/tcp/@var{anfitri@'on}/@var{puerto}
Si @var{anfitri@'on} es un nombre v@'alido de anfitri@'on o direcci@'on de
Internet y @var{puerto} es un n@'umero entero de puerto o nombre de
servicio, Bash trata de abrir el socket TCP correspondiente.

@item /dev/udp/@var{anfitri@'on}/@var{puerto}
Si @var{anfitri@'on} es un nombre v@'alido de anfitri@'on o direcci@'on de
Internet y @var{puerto} es un n@'umero entero de puerto o nombre de
servicio, Bash trata de abrir el socket UDP correspondiente.
@end table

Un fallo al crear o abrir un archivo hace que la redirecci@'on falle.

Las redirecciones usando descriptores de archivo mayores que 9
deber@'{@dotless{i}}an ser usadas con cuidado, ya que pueden entrar en
conflicto con descriptores de archivo que el int@'erprete usa internamente.

@subsection Redirigiendo Entrada
La redirecci@'on de entrada hace que los archivos cuyo nombre deriva de la
expansi@'on de @var{palabra} sean abiertos para lectura en el descriptor de
archivo @code{n}, o la entrada est@'andar (descriptor de archivo 0) si
@code{n} no est@'a especificado.

El formato generar para redirigir entrada es:
@example
[@var{n}]<@var{palabra}
@end example

@subsection Redirigiendo Salida
La redirecci@'on de salida hace que el archivo cuyo nombre deriva de la
expansi@'on de @var{palabra} sea abierto para escritura en el descriptor de
archivo @var{n}, o el error est@'andar (descriptor de archivo 1) si no se
especifica @var{n}.  Si el archivo no existe, se crea; si existe, es
truncado a tama@~no cero.

El formato general para redirigir salida es:
@example
[@var{n}]>[|]@var{palabra}
@end example

Si el operador de redirecci@'on es @samp{>} y la opci@'on @code{noclobber}
de la instrucci@'on integrada @code{set} ha sido habilitada, la
redirecci@'on fallar@'a si el archivo cuyo nombre deriva de la expansi@'on
de @var{palabra} existe y es un archivo normal.  Si el operador de
redirecci@'on es @samp{>|} o si el operador de redirecci@'on es @samp{>} y
no est@'a habilitada la opci@'on @code{noclobber}, la redirecci@'on se
intenta incluso si el archivo nombrado por @var{palabra} existe.

@subsection A@~nadiendo Salida Redirigida
La redirecci@'on de salida de esta manera hace que el archivo cuyo nombre
deriva de la expansi@'on de @var{palabra} sea abierto para a@~nadir en el
descriptor de archivo @var{n}, o la salida est@'andar (descriptor de archivo
1), si no se especifica @var{n}.  Si el archivo no existe, se crea.

El formato generar para a@~nadir salida es:
@example
[@var{n}]>>@var{palabra}
@end example

@subsection Redirigiendo Error Est@'andar y Salida Est@'andar
Esta construcci@'on permite que sean redirigidas tanto la salida est@'andar
(descriptor de archivo 1) como la salida de error est@'andar (descriptor de
archivo 2) al archivo cuyo nombre es la expansi@'on de @var{palabra}.

Hay dos formatos para redirigir error est@'andar y salida est@'andar:
@example
&>@var{palabra}
@end example
@noindent
y
@example
>&@var{palabra}
@end example
@noindent
De las dos formas, se prefiere la primera.  Esto es equivalente
sem@'anticamente a
@example
>@var{palabra} 2>&1
@end example
Al usar la segunda forma, puede que la @var{palabra} no se expanda a un
n@'umero o a @samp{-}.  Si lo hace, se aplican otros operadores de
redirecci@'on (v@'ease Duplicando Descriptores de Archivo abajo) por razones
de compatibilidad.

@subsection A@~nadiendo la Salida Est@'andar y el Error Est@'andar
Esta construcci@'on permite que sean a@~nadidas tanto la salida est@'andar
(descriptor de archivo 1) como la salida de error est@'andar (descriptor de
archivo 2) al archivo cuyo nombre es la expansi@'on de @var{palabra}.

El formato para a@~nadir la salida est@'andar y el error est@'andar es:
@example
&>>@var{palabra}
@end example
@noindent
Esto es equivalente sem@'anticamente a
@example
>>@var{palabra} 2>&1
@end example
(v@'ease Duplicando Descriptores de Archivo abajo).

@subsection Documentos Aqu@'{@dotless{i}}
Este tipo de redirecci@'on le ordena al int@'erprete leer la entrada de la
fuente actual hasta que se encuentra una l@'{@dotless{i}}nea que contiene
solo @var{palabra} (sin blancos al final).  Todas las l@'{@dotless{i}}neas
le@'{@dotless{i}}das hasta ese punto son entonces usadas como la entrada
est@'andar (o descriptor de archivo @var{n} si se especifica @var{n}) para
una instrucci@'on.

El formato del documento-aqu@'{@dotless{i}} es:
@example
[@var{n}]<<[@minus{}]@var{palabra}
        @var{documento-aqu@'{@dotless{i}}}
@var{delimitador}
@end example

No se realiza expansi@'on de par@'ametro y variable, sustituci@'on de
instrucci@'on, expansi@'on aritm@'etica ni expansi@'on de nombre de archivo
en @var{palabra}.  Si se entrecomilla alguna parte de @var{palabra} el
@var{delimitador} es el resultado de la eliminaci@'on de comillas en
@var{palabra}, y no se expanden las l@'{@dotless{i}}neas en el
documento-aqu@'{@dotless{i}}.  Si @var{palabra} no est@'a entrecomillada,
todas las l@'{@dotless{i}}neas del documento aqu@'{@dotless{i}} est@'an
sujetas a la expansi@'on de par@'ametro, sustituci@'on de instrucci@'on y
expansi@'on aritm@'etica, se ignora la secuencia de caracteres @code{\nueva
l@'{@dotless{i}}nea} y @samp{/} se debe usar para mencionar los caracteres
@samp{\}, @samp{$} y @samp{`}.

Si el operador de redirecci@'on es @samp{<<-}, todos los caracteres de
tabulaci@'on iniciales son eliminados de las l@'{@dotless{i}}neas de entrada
y la l@'{@dotless{i}}nea que contiene @var{delimitador}.  Esto permite
indentar documentos-aqu@'{@dotless{i}} en guiones de forma natural.

@subsection Cadenas Aqu@'{@dotless{i}}
Una variante de documentos aqu@'{@dotless{i}}, el formato es:
@example
[@var{n}]<<< @var{palabra}
@end example

La @var{palabra} experimenta la expansi@'on de llaves, expansi@'on de
virgulilla, expansi@'on de par@'ametro y variable, sustituci@'on de
instrucci@'on, expansi@'on aritm@'etica y eliminaci@'on de comillas.  No se
realizan la expansi@'on de nombre de ruta ni la divisi@'on de palabras.  El
resultado es proporcionado como una cadena @'unica, con una nueva
l@'{@dotless{i}}nea a@~nadida, a la instrucci@'on en su entrada est@'andar
(o descriptor de archivo @var{n} si se especifica).

@subsection Duplicando Descriptores de Archivo
El operador de redirecci@'on
@example
[@var{n}]<&@var{palabra}
@end example
@noindent
se usa para duplicar descriptores de archivo de entrada.  Si @var{palabra}
se expande a uno o m@'as d@'{@dotless{i}}gitos, el descriptor de archivo
denotado por @var{n} se vuelve una copia de ese descriptor de archivo.  Si
los d@'{@dotless{i}}gitos en @var{palabra} no especifican un descriptor de
archivo abierto para entrada, ocurre un error de redirecci@'on.  Si
@var{palabra} se eval@'ua a @samp{-}, se cierra el descriptor de archivo
@var{n}.  Si no se especifica @var{n}, se usa la entrada est@'andar
(descriptor de archivo 0).

El operador
@example
[@var{n}]>&@var{palabra}
@end example
@noindent
se usa de forma parecida para duplicar la salida de descriptores de
archivo.  Si no se especifica @var{n}, se usa la salida est@'andar
(descriptor de archivo 1).  Si los d@'{@dotless{i}}gitos en @var{palabra} no
especifican un descriptor de archivo abierto para salida, ocurre un error de
redirecci@'on.  Si @var{palabra} se eval@'ua a @samp{-}, se cierra el
descriptor de archivo @var{n}.  Como caso especial, si se omite @var{n} y
@var{palabra} no se expande a uno o m@'as d@'{@dotless{i}}gitos o @samp{-},
la salida est@'andar y el error est@'andar son redirigidos como se
describi@'o anteriormente.

@subsection Moviendo Descriptores de Archivo
El operador de redirecci@'on
@example
[@var{n}]<&@var{d@'{@dotless{i}}gito}-
@end example
@noindent
mueve el descriptor de archivo @var{d@'{@dotless{i}}gito} al descriptor de
archivo @var{n}, o a la entrada est@'andar (descriptor de archivo 0) si no
se especifica @var{n}.  @var{d@'{@dotless{i}}gito} se cierra tras ser
duplicado a @var{n}.

De forma similar, el operador de redirecci@'on
@example
[@var{n}]>&@var{d@'{@dotless{i}}gito}-
@end example
@noindent
mueve el descriptor de archivo @var{d@'{@dotless{i}}gito} al descriptor de
archivo @var{n}, o a la salida est@'andar (descriptor de archivo 1) si no se
especifica @var{n}.

@subsection Abriendo Descriptores de Archivo para Leer y Escribir
El operador de redirecci@'on
@example
[@var{n}]<>@var{palabra}
@end example
@noindent
hace que el archivo cuyo nombre es la expansi@'on de @var{palabra} sea
abierto tanto para leer como para escribir en el descriptor de archivo
@var{n} o en el descriptor de archivo 0 si no se especifica @var{n}.  Si el
archivo no existe, se crea.

@node Ejecutando Instrucciones
@section Ejecutando Instrucciones

@menu
* Expansi@'on de Instrucciones Simples::  C@'omo expande Bash las 
                                            instrucciones simples antes de 
                                            ejecutarlas.
* B@'usqueda y Ejecuci@'on de Instrucciones::  C@'omo Bash busca 
                                                 instrucciones y las ejecuta.
* Entorno de Ejecuci@'on de Instrucciones::  El entorno en que Bash ejecuta 
                                               instrucciones que no son 
                                               instruccionesintegradas del 
                                               int@'erprete.
* Entorno::                  El entorno dado a una instrucci@'on.
* Estado de Salida::         El estado devuelto por instrucciones y c@'omo 
                               Bash lo interpreta.
* Se@~nales::                Qu@'e pasa cuando Bash o una instrucci@'on que 
                               ejecuta recibe una se@~nal.
@end menu

@node Expansi@'on de Instrucciones Simples
@subsection Expansi@'on de Instrucciones Simples
@cindex expansi@'on de instrucciones

Cuando se ejecuta una instrucci@'on simple, el int@'erprete realiza las
siguientes expansiones, asignaciones y redirecciones, de izquierda a
derecha.

@enumerate
@item
Las palabras que el analizador ha marcado como asignaciones de variables
(aquellas que preceden al nombre de la instrucci@'on) y redirecciones se
guardan para su tratamiento posterior.

@item
Las palabras que no son asignaciones de variable o redirecciones son
expandidas (@pxref{Expansiones del Int@'erprete}).  Si alguna palabra
permanece tras la expansi@'on, la primera palabra se toma como el nombre de
la instrucci@'on y las dem@'as palabras son los argumentos.

@item
Las redirecciones se realizan como se describi@'o anteriormente
(@pxref{Redirecciones}).

@item
El texto despu@'es del @samp{=} en cada asignaci@'on de variable experimenta
la expansi@'on de virgulilla, expansi@'on de par@'ametro, sustituci@'on de
instrucciones, expansi@'on aritm@'etica y eliminaci@'on de comillas antes de
ser asignado a una variable.
@end enumerate

Si no se produce un nombre de instrucci@'on, las asignaciones de variables
afectan al entorno actual del int@'erprete.  De lo contrario, las variables
son a@~nadidas al entorno de la instrucci@'on ejecutada y no afectan al
entorno del int@'erprete actual.  Si cualquiera de las asignaciones intenta
asignar un valor a una variable de solo lectura, ocurre un error y la
instrucci@'on sale con un estado de error distinto a cero.

Si no se produce un nombre de instrucci@'on, se realizan redirecciones, pero
no afectan al entorno actual del int@'erprete.  Un error de redirecci@'on
hace que la instrucci@'on se cierre con un estado distinto de cero.

Si hay un nombre de instrucci@'on sobrante despu@'es de la expansi@'on, la
ejecuci@'on procede como se describe m@'as adelante.  De lo contrario, la
instrucci@'on finaliza.  Si una de las expansiones conten@'{@dotless{i}}a
una sustituci@'on de instrucci@'on, el estado de salida de la instrucci@'on
es el estado de salida de la @'ultima sustituci@'on de instrucci@'on
realizada.  Si no hab@'{@dotless{i}}a ninguna sustituci@'on, la
instrucci@'on finaliza con un estado de cero.

@node B@'usqueda y Ejecuci@'on de Instrucciones
@subsection B@'usqueda y Ejecuci@'on de Instrucciones
@cindex ejecuci@'on de instrucciones
@cindex b@'usqueda de instrucciones

Despu@'es de que una instrucci@'on haya sido dividida en palabras, si
resulta en una instrucci@'on simple y una lista opcional de argumentos, se
toman las siguientes acciones.

@enumerate
@item
Si el nombre de la instrucci@'on no contiene barras, el int@'erprete trata
de localizarla.  Si existe una funci@'on del int@'erprete con ese nombre,
ese funci@'on se llama como se describe en @ref{Funciones del Int@'erprete}.

@item
Si el nombre no coincide con una funci@'on, el int@'erprete lo busca en la
lista de instrucciones integradas del int@'erprete.  Si se encuentra una
coincidencia, se llama a esa instrucci@'on integrada.

@item
Si el nombre no es ni una funci@'on del int@'erprete ni una instrucci@'on
integrada y no contiene barras, Bash busca un directorio que contenga un
archivo ejecutable con ese nombre en cada elemento de @env{$PATH}.  Bash usa
una tabla hash para recordar los nombres de ruta completos de archivos
ejecutables para evitar m@'ultiples b@'usquedas @env{PATH} (vea la
descripci@'on de @code{hash} en @ref{Instrucciones Integradas del Bourne
Shell}).  Solo se realiza una b@'usqueda de los directorios en @env{$PATH}
si la instrucci@'on no se encontr@'o en la tabla hash.  Si la b@'usqueda es
infructuosa, el int@'erprete busca una funci@'on del int@'erprete definida
llamada @code{command_not_found_handle}.  Si esa funci@'on existe, se llama
con la instrucci@'on original y los argumentos de la instrucci@'on original
como sus argumentos, y el estado de salida de la funci@'on se convierte en
el estado de salida del int@'erprete.  Si no est@'a definida esa funci@'on,
el int@'erprete imprime un mensaje de error y devuelve un estado de salida
de 127.

@item
Si la b@'usqueda es exitosa o si el nombre de la instrucci@'on contiene una
o m@'as barras, el int@'erprete ejecuta el programa nombrado en un entorno
de ejecuci@'on aislado.  El argumento 0 se establece al nombre dado, y el
resto de argumentos para la instrucci@'on se establecen a los argumentos
proporcionados, si hay.

@item
Si esta ejecuci@'on fallo porque el archivo no est@'a en formato ejecutable,
y el archivo no es un directorio, se toma por un @var{guion de int@'erprete}
y el int@'erprete lo ejecuta como se describe en @ref{Guiones del
Int@'erprete}.

@item
Si la instrucci@'on no fue iniciada as@'{@dotless{i}}ncronamente, el
int@'erprete espera a que la instrucci@'on se complete y recoge su estado de
salida.

@end enumerate

@node Entorno de Ejecuci@'on de Instrucciones
@subsection Entorno de Ejecuci@'on de Instrucciones
@cindex entorno de ejecuci@'on

El int@'erprete tiene un @var{entorno de ejecuci@'on}, que consta de lo
siguiente:

@itemize @bullet
@item
abre archivos heredados por el int@'erprete durante la llamada, como se
modificaron por redirecciones proporcionadas a la instrucci@'on integrada
@code{exec}

@item
el directorio de trabajo actual como fue establecido por @code{cd},
@code{pushd} o @code{popd}, o heredado por el int@'erprete durante la
llamada

@item
el modo de m@'ascara de creaci@'on de archivo como fue establecido por
@code{umask} o heredado del padre del int@'erprete

@item
traps actuales establecidas por @code{trap}

@item
par@'ametros del int@'erprete que son establecidos mediante asignaci@'on de
variables o con @code{set} o heredados del padre del int@'erprete en el
entorno

@item
funciones del int@'erprete definidas durante la ejecuci@'on o heredadas del
padre del int@'erprete en el entorno

@item
opciones habilitadas en la llamada (o predeterminadas o con argumentos de
l@'{@dotless{i}}nea de @'ordenes) o mediante @code{set}

@item
opciones habilitadas por @code{shopt} (@pxref{La Instrucci@'on Integrada
Shopt})

@item
aliases del int@'erprete definidos con @code{alias} (@pxref{Aliases})

@item
varios @sc{id}s de procesos, incluyendo aquellos de las tareas en segundo
plano (@pxref{Listas}), el valor de @code{$$} y el valor de @env{$PPID}

@end itemize

Cuando una instrucci@'on simple distinta de una instrucci@'on integrada o
una funci@'on del int@'erprete va a ser ejecutada, es llamada en un entorno
de ejecuci@'on aislado que consta de lo siguiente.  A no ser que se indique
lo contrario, los valores se heredan del int@'erprete.

@itemize @bullet
@item
los archivos abiertos del int@'erprete, m@'as las modificaciones y adiciones
especificadas por redirecciones a la instrucci@'on

@item
el directorio de trabajo actual

@item
el modo de la m@'ascara de creaci@'on de archivos

@item
las variables y funciones del int@'erprete marcadas para exportar, junto a
variables exportadas para la instrucci@'on, pasadas en el entorno
(@pxref{Entorno})

@item
las traps atrapadas por el int@'erprete son restablecidas a los valores
heredados del padre del int@'erprete, y las traps ignoradas por el
int@'erprete son ignoradas

@end itemize

Una instrucci@'on llamada en este entorno aislado no puede afectar al
entorno de ejecuci@'on del int@'erprete.

La sustituci@'on de instrucciones, las instrucciones agrupadas con
par@'entesis y las instrucciones as@'{@dotless{i}}ncronas son llamadas en un
entorno de subint@'erprete que es una copia del entorno del int@'erprete, a
excepci@'on de que las traps atrapadas por el int@'erprete son restablecidas
a los valores que el int@'erprete hered@'o de su padre durante la llamada.
Las instrucciones integradas que son llamadas como parte de una
tuber@'{@dotless{i}}a tambi@'en son ejecutadas en un entorno de
subint@'erprete.  Los cambios hechos al entorno del subint@'erprete no
pueden afectar al entorno de ejecuci@'on del int@'erprete.

Los subint@'erpretes generados para ejecutar sustituciones de instrucciones
heredan el valor de la opci@'on @option{-e} del padre del int@'erprete.
Cuando no est@'a en modo @sc{posix}, Bash borra la opci@'on @option{-e} en
dichos subint@'erpretes.

Si una instrucci@'on es seguida por un @samp{&} y no est@'a activado el
control de tareas, la entrada est@'andar para el instrucci@'on es el archivo
vac@'{@dotless{i}}o @file{/dev/null}.  De lo contrario, la instrucci@'on
llamada hereda los descriptores de archivo del int@'erprete ejecutor seg@'un
se modifican mediante redirecci@'on.

@node Entorno
@subsection Entorno
@cindex entorno

Cuando se llama un programa se le pasa un vector de cadenas llamado el
@var{entorno}.  Esto es una lista de pares nombre-valor, de la forma
@code{nombre=valor}.

Bash proporciona varias formas de manipular el entorno.  Durante la llamada,
el int@'erprete escanea su propio entorno y crea un par@'ametro para cada
nombre encontrado, autom@'aticamente marc@'andolo para @var{exportar} a los
procesos hijos.  Las instrucciones ejecutadas heredan el entorno.  Las
instrucciones @code{export} y @samp{declare -x} permiten a@~nadir y eliminar
par@'ametros y funciones en el int@'erprete.  Si se modifica el valor de un
par@'ametro en el int@'erprete, el nuevo valor se vuelve parte del entorno,
reemplazando al viejo.  El entorno heredado por cualquier instrucci@'on
ejecutada consta del entorno inicial del int@'erprete, cuyos valores pueden
ser modificados en el int@'erprete, menos las parejas eliminadas mediante
las instrucciones @code{unset} y @samp{export -n}, m@'as las adiciones
mediante las instrucciones @code{export} y @samp{declare -x}.

El entorno para cualquier instrucci@'on simple o funci@'on puede ser
aumentado temporalmente prefij@'andolo con asignaciones de par@'ametros,
como se describe en @ref{Par@'ametros del Int@'erprete}.  Estas sentencias
de asignaci@'on afectan solo al entorno visto por esa instrucci@'on.

Si est@'a habilitada la opci@'on @option{-k} (@pxref{La Instrucci@'on
Integrada Set}), todas las asignaciones de par@'ametros son ubicadas en el
entorno para una instrucci@'on, no solo aquellas que preceden al nombre de
la instrucci@'on.

Cuando Bash llama a una instrucci@'on externa, la variable @samp{$_} es
establecida al nombre de ruta completo de la instrucci@'on y pasado a esa
instrucci@'on en su entorno.

@node Estado de Salida
@subsection Estado de Salida
@cindex estado de salida

El estado de salida de una instrucci@'on ejecutada es el valor devuelto por
la llamada de sistema @var{waitpid} o funci@'on equivalente.  Los estados de
salida se sit@'uan entre 0 y 255, sin embargo, como se explica a
continuaci@'on, el int@'erprete puede usar los valores encima de 125 de
forma especial.  Los estados de salida de instrucciones integradas del
int@'erprete y instrucciones compuestas tambi@'en est@'an limitadas a este
rango.  Bajo ciertas condiciones, el int@'erprete usar@'a valores especiales
para indicar modos de fallo espec@'{@dotless{i}}ficos.

Para prop@'ositos del int@'erprete, una instrucci@'on que salga con un
estado de salida de cero ha tenido @'exito.  Un estado de salida distinto de
cero indica fallo.  Este esquema aparentemente en contra del sentido com@'un
se usa para que haya un modo bien definido de indicar @'exito y una variedad
de formas de indicar varios modos de fallo.  Cuando una instrucci@'on
termina con una se@~nal fatal cuyo n@'umero es @var{N}, Bash usa el valor
128+@var{N} como el estado de salida.

Si no se encuentra una instrucci@'on, el proceso hijo creado para ejecutarla
devuelve un estado de 127.  Si se encuentra una instrucci@'on pero no es
ejecutable, el estado de retorno es 126.

Si una instrucci@'on falla a causa de un error durante la expansi@'on o
redirecci@'on, el estado de salida es mayor que cero.

El estado de salida es usado por las instrucciones condicionales de Bash
(@pxref{Construcciones Condicionales}) y algunas de las construcciones de
listas (@pxref{Listas}).

Todas las instrucciones integradas de Bash devuelven un estado de salida de
cero si tienen @'exito y un estado de salida distinto de cero en caso de
fallo, de forma que pueden ser usados por las construcciones condicionales y
de listas.  Todas las instrucciones integradas devuelven un estado de salida
de 2 para indicar un uso incorrecto, generalmente opciones inv@'alidas o
argumentos que faltan.

@node Se@~nales
@subsection Se@~nales
@cindex manejo de se@~nales

Cuando Bash es interactivo, en ausencia de traps, ignora @code{SIGTERM} (de
forma que @samp{kill 0} no mate un int@'erprete interactivo) y @code{SIGINT}
se atrapa y se maneja (de forma que la instrucci@'on integrada @code{wait}
no se pueda interrumpir).  Cuando Bash recive una @code{SIGINT}, sale de
cualquier bucle que se ejecute.  En todos los casos, Bash ignora
@code{SIGQUIT}.  Si est@'a en efecto el control de tareas (@pxref{Control de
Tareas}), Bash ignora @code{SIGTTIN}, @code{SIGTTOU} y @code{SIGTSTP}.

Las instrucciones que no son integradas iniciadas por Bash tienen
manejadores de se@~nales establecidos a los valores heredados por el
int@'erprete de su padre.  Cuando no est@'a en efecto el control de tareas,
las instrucciones as@'{@dotless{i}}ncronas ignoran @code{SIGINT} y
@code{SIGQUIT} adem@'as de estos manejadores heredados.  Las instrucciones
ejecutadas como un resultado de la sustituci@'on de instrucciones ignoran
las se@~nales de control de tareas generadas con el teclado @code{SIGTTIN},
@code{SIGTTOU} y @code{SIGTSTP}.

El int@'erprete se cierra por defecto al recibir un @code{SIGHUP}.  Antes de
cerrarse, un int@'erprete interactivo reenv@'{@dotless{i}}a la @code{SIGHUB}
a todas las tareas, en ejecuci@'on o detenidas.  A las tareas detenidas se
les env@'{@dotless{i}}a @code{SIGCONT} para asegurarse de que reciben la
@code{SIGHUB}.  Para evitar que el int@'erprete env@'{@dotless{i}}e la
se@~nal @code{SIGHUB} a una tarea concreta, deber@'{@dotless{i}}a ser
eliminada de la tabla de tareas con la instrucci@'on integrada @code{disown}
(@pxref{Instrucciones Integradas de Control de Tareas}) o marcada para no
recibir @code{SIGHUB} usando @code{disown -h}.

Si se ha habilitado la opci@'on @code{huponexit} con @code{shopt} (@pxref{La
Instrucci@'on Integrada Shopt}), Bash manda una @code{SIGHUB} a todas las
tareas cuando se cierra un int@'erprete de acceso interactivo.

Si Bash est@'a esperando a que una instrucci@'on se complete y recibe una
se@~nal para la cual una trap ha sido establecida, el trap no ser@'a
ejecutada hasta que la instrucci@'on se complete.  Cuando Bash est@'a
esperando a una instrucci@'on as@'{@dotless{i}}ncrona mediante la
instrucci@'on integrada @code{wait}, la recepci@'on de una se@~nal para la
cual una trap ha sido establecida har@'a que la instrucci@'on integrada
@code{wait} retorne inmediatamente con un estado de salida mayor que 128,
inmediatamente despu@'es se ejecuta la trap.

@node Guiones del Int@'erprete
@section Guiones del Int@'erprete
@cindex guion del int@'erprete

Un guion del int@'erprete es un archivo de texto que contiene instrucciones
del int@'erprete.  Cuando se usa tal archivo como el primer argumento no
opcional al llamar a Bash, y ni la opci@'on @option{-c} ni la @option{-s} es
proporcionada (@pxref{Llamando a Bash}), Bash lee y ejecuta instrucciones
del archivo, despu@'es se cierra.  Este modo de operaci@'on crea un
int@'erprete no interactivo.  El int@'erprete busca primero el archivo en el
directorio actual, y busca en los directorios en @env{PATH} si no es
encontrado ah@'{@dotless{i}}.

Cuando Bash ejecuta un guion del int@'erprete, establece el par@'ametro
especial @code{0} al nombre del archivo, en vez de al nombre del
int@'erprete, y los argumentos restantes se asignan a los par@'ametros
posicionales, si se pasa alguno.  Si no se proporcionan argumentos
adicionales, se eliminan los par@'ametros posicionales.

Un guion del int@'erprete puede hacerse ejecutable usando la instrucci@'on
@code{chmod} para activar el bit de ejecuci@'on.  Cuando Bash encuentra tal
archivo al buscar una instrucci@'on en el @env{$PATH}, genera un
subint@'erprete para ejecutarlo.  En otras palabras, ejecutar
@example
nombre-de-archivo @var{argumentos}
@end example
@noindent
es equivalente a ejecutar
@example
bash nombre-de-archivo @var{argumentos}
@end example

@noindent
si @code{nombre-de-archivo} es un guion del int@'erprete ejecutable.  Este
subint@'erprete se reinicializa, para que el efecto sea como si un nuevo
int@'erprete hubiera sido llamado para interpretar el guion, con la
excepci@'on de que las ubicaciones de las instrucciones recordadas por el
padre (lea la descripci@'on de @code{hash} en @ref{Instrucciones Integradas
del Bourne Shell})  son retenidas por el hijo.

La mayor@'{@dotless{i}}a de versiones de Unix hacen esto parte del mecanismo
de ejecuci@'on de instrucciones del sistema operativo.  Si la primera
l@'{@dotless{i}}nea del guion empieza por los dos caracteres @samp{#!}, el
resto de la l@'{@dotless{i}}nea especifica un int@'erprete para el
programa.  As@'{@dotless{i}}, puede especificar Bash, @code{awk}, Perl o
cualquier otro int@'erprete y escribir el resto del archivo de guion en ese
lenguaje.

Los argumentos para el int@'erprete constan de un @'unico argumento opcional
que sigue al nombre del int@'erprete en la primera l@'{@dotless{i}}nea del
archivo de guion, seguido del nombre del archivo del guion, seguido del
resto de argumentos.  Bash realizar@'a est@'a acci@'on en sistemas
operativos que no la manejan por s@'{@dotless{i}} mismos.  Tenga en cuenta
que algunas versiones antiguas de Unix limitan el nombre y argumento del
int@'erprete a un m@'aximo de 32 caracteres.

Los guiones de Bash empiezan normalmente por @code{#! /bin/bash} (asumiendo
que Bash ha sido instalado en @file{/bin}), ya que se asegura que Bash
ser@'a usado para interpretar el guion, incluso si es ejecutado desde otro
int@'erprete.

@node Instrucciones Integradas del Int@'erprete
@chapter Instrucciones Integradas del Int@'erprete

@menu
* Instrucciones Integradas del Bourne Shell::  Las instrucciones integradas 
                                                 heredadas del Bourne Shell.
* Instrucciones Integradas de Bash::  Tabla de instrucciones integradas 
                                        espec@'{@dotless{i}}ficas de Bash.
* Modificando el Comportamiento del Int@'erprete::  Instrucciones integradas 
                                                      para modificar atributos 
                                                      del int@'erprete 
                                                      ycomportamiento 
                                                      opcional.
* Instrucciones Integradas Especiales::  Instrucciones integradas 
                                           clasificadas de forma especial por 
                                           POSIX.
@end menu

Las instrucciones integradas est@'an incluidas en el propio int@'erprete.
Cuando el nombre de una instrucci@'on integrada se usa como la primera
palabra de una instrucci@'on simple (@pxref{Instrucciones Simples}), el
int@'erprete ejecuta la orden directamente, sin invocar otro programa.  Las
instrucciones integradas son necesarias para implementar funcionalidad
imposible o inconveniente de obtener con utilidades separadas.

Esta secci@'on describe brevemente las instrucciones integradas que Bash
hereda del Bourne Shell, as@'{@dotless{i}} como las instrucciones integradas
que son @'unicas o han sido extendidas en Bash.

En otros cap@'{@dotless{i}}tulos se describen varias instrucciones
integradas: las instrucciones integradas que proporcionan la interfaz de
Bash para las utilidades del control de tareas (@pxref{Instrucciones
Integradas de Control de Tareas}), la pila de directorio
(@pxref{Instrucciones Integradas de la Pila de Directorios}), el historial
de instrucciones (@pxref{Instrucciones Integradas del Historial de Bash}) y
las utilidades de completado programables (@pxref{Instrucciones Integradas
de Compleci@'on Programable}).

Muchas de las instrucciones integradas han sido extendidas por @sc{posix} o
Bash.

A no ser que se indique lo contrario, cada instrucci@'on integrada
documentada como que acepta opciones precedidas por @samp{-} acepta
@samp{--} para indicar el fin de las opciones.  Las instrucciones integradas
@code{:}, @code{true}, @code{false} y @code{test} no aceptan opciones y no
tratan @samp{--} de forma especial.  Las instrucciones integradas
@code{exit}, @code{logout}, @code{return}, @code{break}, @code{continue},
@code{let} y @code{shift} aceptan y procesan argumentos que empiezan con
@samp{-} sin requerir @samp{--}.  Otras instrucciones integradas que aceptan
argumentos pero no especifican que aceptan opciones, interpretan argumentos
que empiezan con @samp{-} como opciones inv@'alidas y requieren @samp{--}
para evitar esta interpretaci@'on.

@node Instrucciones Integradas del Bourne Shell
@section Instrucciones Integradas del Bourne Shell

Las siguientes instrucciones integradas del int@'erprete son heredadas del
Bourne Shell.  Estas @'ordenes se implementan como est@'a especificado en el
est@'andar @sc{posix}.

@table @code
@item :    @r{(dos puntos)}
@btindex :
@example
: [@var{argumentos}]
@end example

No hace nada m@'as all@'a de expandir @var{argumentos} y realizar
redirecciones.  El estado de retorno es cero.

@item .    @r{(un punto)}
@btindex .
@example
. @var{nombre-de-archivo} [@var{argumentos}]
@end example

Lee y ejecuta instrucciones del argumento @var{nombre-de-archivo} en el
actual contexto del int@'erprete.  Si @var{nombre-de-archivo} no contiene
una barra, la variable @env{PATH} se usa para encontrar
@var{nombre-de-archivo}.  Cuando Bash no est@'a en modo @sc{posix}, se
explora el directorio actual si @var{nombrearchivo} no se encuentra en
@env{PATH}.  Si se pasan @var{argumentos}, se convierten en los argumentos
posicionales cuando se ejecuta @var{nombre-de-archivo}.  De modo contrario,
los argumentos posicionales no se cambian.  Si la opci@'on @option{-T}
est@'a habilitada, @code{source} hereda cualquier trap en @code{DEBUG}; si
no, cualquier cadena de @code{DEBUG} trap se guarda y se restaura alrededor
de la llamada a @code{source}, y @code{source} elimina la trap @code{DEBUG}
mientras se ejecuta.  Si @option{-T} no est@'a establecido, y el archivo
le@'{@dotless{i}}do cambia el trap @code{DEBUG}, el nuevo valor se almacena
cuando @code{source} termina.  El estado de retorno es el estado de salida
de la @'ultima instrucci@'on ejecutada, o cero si no se ejecuta ninguna
orden.  Si no se encuentra @var{nombre-de-archivo}, o no se puede leer, el
estado de retorno es diferente de cero.  Esta instrucci@'on integrada es
equivalente a @code{source}.

@item break
@btindex break
@example
break [@var{n}]
@end example

Sale de un bucle @code{for}, @code{while}, @code{until} o @code{select}.  Si
se proporciona @var{n}, se sale del nivel @var{n} de anidaci@'on del bucle.
@var{n} debe ser mayor o igual a 1.  El estado de salida es cero a no ser
que @var{n} no sea mayor o igual a 1.

@item cd
@btindex cd
@example
cd [-L|[-P [-e]] [-@@] [@var{directorio}]
@end example

Cambia el actual directorio de trabajo a @var{directorio}.  Si no se
proporciona @var{directorio}, se usa el valor de la variable del
int@'erprete @env{HOME}.  Cualquier argumento adicional que siga a
@var{directorio} es ignorado.  Si la variable de int@'erprete @env{CDPATH}
existe, es usada como ruta de b@'usqueda: en cada nombre de directorio de
@env{CDPATH} se busca @var{directorio}, con los nombres alternativos de
directorios en @env{CDPATH} separados por dos puntos (@samp{:}).  Si
@var{directorio} empieza por una barra, @env{CDPATH} no se usa.

La opci@'on @option{-P} significa que no sigue los enlaces simb@'olicos: los
enlaces simb@'olicos son resueltos mientras @code{cd} est@'a recorriendo
@var{directorio} y antes de procesar una instancia de @samp{..} en
@var{directorio}.

Por defecto, o cuando se proporciona la opci@'on @option{-L}, los enlaces
simb@'olicos en @var{directory} son resueltos despu@'es de que @code{cd}
procesa una instancia de @samp{..} en @var{directorio}.

Si @samp{..} aparece en @var{directorio}, se procesa eliminando el
componente de nombre de ruta que le precede inmediatamente, de vuelta a una
barra o al inicio de @var{directory}.

Si la opci@'on @option{-e} es proporcionada junto a @option{-P} y el
directorio de trabajo actual no se puede determinar con @'exito despu@'es de
un exitoso cambio de directorio, @code{cd} revolver@'a un estado de retorno
no exitoso.

En sistemas que lo soportan, la opci@'on @option{-@@} presenta los atributos
extendidos asociados a un archivo como directorio.              

Si @var{directorio} es @samp{-}, este se convierte en @env{$OLDPWD} antes de
que se intente el cambio de directorio.

Si se usa un nombre de directorio de @env{CDPATH} no vac@'{@dotless{i}}o o
si @samp{-} es el primer argumento y el cambio de directorio es exitoso, el
nombre de ruta absoluto del nuevo directorio de trabajo se escribe a la
salida est@'andar.

El c@'odigo de retorno es cero si el directorio es cambiado exitosamente,
distinto de cero de no ser as@'{@dotless{i}}.

@item continue
@btindex continue
@example
continue [@var{n}]
@end example

Reanuda la siguiente iteraci@'on de un bucle @code{for}, @code{while},
@code{until} o @code{select} que lo contiene.  Si se proporciona @var{n},
reanuda la ejecuci@'on del bucle de nivel de anidamiento @var{n} que lo
contiene.  @var{n} debe ser mayor o igual a 1.  El c@'odigo de retorno es
cero a no ser que @var{n} no sea mayor o igual a 1.

@item eval
@btindex eval
@example
eval [@var{arguments}]
@end example

Los argumentos son concatenados juntos en una @'unica instrucci@'on, que
entonces es le@'{@dotless{i}}da y ejecutada, y su estado de salida devuelto
como el estado de salida de @code{eval}.  Si no hay argumentos o solo
argumentos vac@'{@dotless{i}}os, el estado de retorno es cero.

@item exec
@btindex exec
@example
exec [-cl] [-a @var{nombre}] [@var{instrucci@'on} [@var{argumentos}]]
@end example

Si se proporciona @var{instrucci@'on}, esta reemplaza al int@'erprete sin
crear un nuevo proceso.  Si se proporciona la opci@'on @option{-l}, el
int@'erprete ubica un guion al comienzo del argumento n@'umero cero pasado a
@var{instrucci@'on}.  Esto es lo que el programa @code{login} hace.  La
opci@'on @option{-c} causa que @var{instrucci@'on} se ejecute con un entorno
vac@'{@dotless{i}}o.  Si se proporciona @option{-a}, el int@'erprete pasa
@var{nombre} como el argumento n@'umero cero a @var{instrucci@'on}.  Si por
alguna raz@'on no se puede ejecutar @var{instrucci@'on}, un int@'erprete no
interactivo se cierra, a no ser que la opci@'on del int@'erprete
@code{execfail} est@'e habilitada.  En ese caso, devuelve error.  Un
int@'erprete interactivo devuelve fallo si el archivo no puede ser
ejecutado.  Si no hay @var{instrucci@'on} especificada, se pueden usar
redirecciones para afectar al comportamiento del int@'erprete actual.  Si no
hay errores de redirecci@'on, el estado de retorno es cero; en caso
contrario, el estado de retorno es distinto a cero.

@item exit
@btindex exit
@example
exit [@var{n}]
@end example

Sale del int@'erprete, devolviendo un estado de @var{n} al padre del
int@'erprete.  Si se omite @var{n}, el estado de salida es el mismo de la
@'ultima orden ejecutada.  Cualquier trap en @code{EXIT} se ejecuta antes de
que el int@'erprete termine.

@item export
@btindex export
@example
export [-fn] [-p] [@var{nombre}[=@var{valor}]]
@end example

Marca cada @var{nombre} para que sea pasado a los procesos hijos en el
entorno.  Si se proporciona la opci@'on @option{-f}, los @var{nombre}s se
refieren a funciones del int@'erprete; de lo contrario, los nombres se
refieren a variables del int@'erprete.  La opci@'on @option{-n} equivale a
dejar de marcar cada @var{nombre} para exportaci@'on.  Si no se proporcionan
@var{nombres}, o si se pasa la opci@'on @option{-p}, se muestra una lista de
nombres de todas las variables exportadas.  La opci@'on @option{-p} muestra
la salida en una forma que puede ser reusada como entrada.  Si a un nombre
de variable sigue =@var{valor}, el valor de la variable se establece a
@var{valor}.

El estado de retorno es cero a no ser que se proporcione una opci@'on
inv@'alida, uno de los nombres no sea un nombre de variable de int@'erprete
v@'alido o se proporcione @option{-f} con un nombre que no sea una funci@'on
del int@'erprete.

@item getopts
@btindex getopts
@example
getopts @var{cadenaopc} @var{nombre} [@var{args}]
@end example

@code{getopts} se usa por los guiones del int@'erprete para analizar
par@'ametros posicionales.  @var{cadenaopc} contiene los caracteres de
opci@'on que ser@'an reconocidos; si a un car@'acter le siguen dos puntos,
se espera que la opci@'on tenga un argumento, que deber@'{@dotless{i}}a
estar separado de ese por un espacio.  Los dos puntos (@samp{:}) y el
s@'{@dotless{i}}mbolo de interrogaci@'on (@samp{?}) no pueden ser usados
como caracteres de opci@'on.  Cada vez que se invoca, @code{getopts} ubica
la siguiente opci@'on en la variable de int@'erprete @var{nombre},
inicializando @var{nombre} si no existe, y el @'{@dotless{i}}ndice del
siguiente argumento a ser procesado en la variable @env{OPTIND}.
@env{OPTIND} es inicializado a 1 cada vez que el int@'erprete o un guion de
int@'erprete es invocado.  Cuando una opci@'on requiere un par@'ametro,
@code{getopts} ubica ese argumento en la variable @env{OPTARG}.  El
int@'erprete no elimina @env{OPTIND} autom@'aticamente; tiene que ser
eliminado manualmente entre m@'ultiples llamadas a @code{getopts} dentro de
la misma invocaci@'on del int@'erprete si se pretende usar un nuevo conjunto
de par@'ametros.

Cuando se encuentra el fin de las opciones, @code{getopts} sale con un valor
de retorno mayor que cero.  Se establece @env{OPTIND} al
@'{@dotless{i}}ndice del primer argumento que no sea una opci@'on y
@var{nombre} se establece a @samp{?}.

@code{getopts} normalmente analiza los par@'ametros posicionales, pero si se
pasan m@'as argumentos en @var{args}, @code{getopts} analiza esos en su
lugar.

@code{getopts} puede informar de errores de dos formas.  Si el primer
car@'acter de @var{cadenaopc} es dos puntos, se usa el aviso de errores
@var{silencioso}.  En funcionamiento normal, los mensajes de diagn@'ostico
se imprimen cuando se encuentran opciones inv@'alidas o argumentos de
opci@'on que faltan.  Si se establece la variable @env{OPTERR} a 0, no se
mostrar@'an mensajes de error, incluso si el primer car@'acter de
@code{cadenaopc} no es dos puntos.

Si se detecta una opci@'on inv@'alida, @code{getopts} guarda @samp{?} en
@var{nombre} y, si no es silencioso, imprime un mensaje de error y elimina
@env{OPTARG}.  Si @code{getopts} es silencioso, el car@'acter de opci@'on
encontrado se guarda en @env{OPTARG} y no se muestra ning@'un mensaje de
diagn@'ostico.

Si no se encuentra un argumento requerido, y @code{getopts} no es
silencioso, se guarda un s@'{@dotless{i}}mbolo de interrogaci@'on (@samp{?})
en @var{nombre}, @code{OPTARG} se elimina, y se imprime un mensaje de
diagn@'ostico.  Si @code{getopts} es silencioso, se guardan dos puntos
(@samp{:}) en @var{nombre} y @env{OPTARG} se establece al car@'acter de
opci@'on encontrado.

@item hash
@btindex hash
@example
hash [-r] [-p @var{nombre-de-archivo}] [-dt] [@var{nombre}]
@end example

Cada vez que se invoca @code{hash}, recuerda los nombres de ruta completos
de las @'ordenes especificadas como argumentos @var{nombre}, de forma que no
deben ser buscados en las pr@'oximas invocaciones.  Las instrucciones se
encuentran buscando a trav@'es de los directorios listados en @env{$PATH}.
Cualquier nombre de ruta recordado previamente es descartado.  La opci@'on
@option{-p} inhibe la b@'usqueda por ruta, y @var{nombre-de-archivo} se usa
como la ubicaci@'on de @var{nombre}.  La opci@'on @option{-r} hace que el
int@'erprete se olvide de todas las ubicaciones recordadas.  La opci@'on
@option{-d} hace que el int@'erprete se olvide de la ubicaci@'on recordada
de cada @var{nombre}.  Si se proporciona la opci@'on @option{-t}, se imprime
el nombre de ruta completo al que corresponde cada @var{nombre}.  Si se
proporcionan m@'ultiples argumentos @var{nombre} con @option{-t}, el
@var{nombre} se imprime antes del nombre ruta completo hecho hash.  La
opci@'on @option{-l} hace que la salida se muestre en un formato que puede
ser reutilizado como entrada.  Si no se pasan argumentos, o si solo se
proporciona @option{-l}, se imprime informaci@'on sobre instrucciones
recordadas.  El estado de retorno es cero a no ser que @var{nombre} no se
encuentre o se proporcione una opci@'on inv@'alida.

@item pwd
@btindex pwd
@example
pwd [-LP]
@end example

Imprime el nombre de ruta absoluto del actual directorio de trabajo.  Si se
proporciona la opci@'on @option{-P}, el nombre de ruta imprimido no
contendr@'a enlaces simb@'olicos.  Si se proporciona la opci@'on
@option{-L}, el nombre de ruta impreso puede contener enlaces simb@'olicos.
El estado de retorno es cero a no ser que se produzca un error mientras se
determina el nombre del directorio actual o se proporcione una opci@'on
inv@'alida.

@item readonly
@btindex readonly
@example
readonly [-aAf] [-p] [@var{nombre}[=@var{valor}]] @dots{}
@end example

Marca cada @var{nombre} como de solo lectura.  Los valores de estos nombres
no pueden ser cambiados en asignaciones posteriores.  Si se proporciona la
opci@'on @option{-f}, cada @var{nombre} se refiere a una funci@'on del
int@'erprete.  La opci@'on @option{-a} significa que cada @var{nombre} se
refiere a una variable del tipo vector indexado; la opci@'on @option{-A}
significa que cada @var{nombre} se refiere a una variable del tipo vector
asociativo.  Si se proporcionan ambas opciones, @option{-A} tiene
precedencia.  Si no se pasan argumentos @var{nombre}, o si se proporciona la
opci@'on @option{-p}, se imprime una lista de todos los nombres de solo
lectura.  Las otras opciones pueden ser usadas para restringir la salida a
un subconjunto de los nombres de solo lectura.  La opci@'on @option{-p} hace
que la salida sea mostrada en un formato que puede ser reutilizado como
entrada.  Si nombre de variable est@'a seguido de =@var{valor}, el valor de
la variable se establece a @var{valor}.  El estado de retorno es cero a no
ser que se proporcione una opci@'on inv@'alida, uno de los argumentos
@var{nombre} no sea un nombre v@'alido de variable de int@'erprete o de
funci@'on o la opci@'on @option{-f} se proporcione con un nombre que no sea
una funci@'on del int@'erprete.

@item return
@btindex return
@example
return [@var{n}]
@end example

Hace que una funci@'on del int@'erprete se deje de ejecutar y devuelva el
valor @var{n} a su ejecutor.  Si no se proporciona @var{n}, el valor de
retorno es el estado de salida de la @'ultima instrucci@'on ejecutada en la
funci@'on.  Si @code{return} es ejecutado por un manejador trap, la @'ultima
instrucci@'on usada para determinar el estado es la @'ultima instrucci@'on
ejecutada antes del manejador trap.  Si se ejecuta @code{return} durante una
trap del tipo @code{DEBUG}, la @'ultima instruccion usada para determinar el
estado es la @'ultima instrucci@'on ejecutada por el manejador trap antes de
que @code{return} fuera invocado.  @code{return} puede ser usado tambi@'en
para terminar la ejecuci@'on de un guion que est@'a siendo ejecutado con la
funci@'on integrada @code{.}  (@code{source}), devolviendo o @var{n} o el
estado de salida de la @'ultima instrucci@'on ejecutada dentro del guion
como el estado de salida del guion.  Si se proporciona @var{n}, el valor de
retorno es sus 8 bits menos significativos.  Cualquier instrucci@'on
asociada a la trap @code{RETURN} es ejecutada antes de que se reanude la
ejecuci@'on tras la funci@'on o el guion.  El estado de retorno es distinto
a cero si @code{return} es proporcionado como un argumento no n@'umero o es
usado fuera de una funci@'on y no durante la ejecuci@'on de un guion por
@code{.} o @code{source}.

@item shift
@btindex shift
@example
shift [@var{n}]
@end example

Mueve los argumentos posicionales a la izquierda por @var{n}.  Los
argumentos posicionales de @var{n}+1 @dots{} @code{$#} son renombrados a
@code{$1} @dots{} @code{$#}-@var{n}.  Los argumentos representados por los
n@'umeros @code{$#} a @code{$#}-@var{n}+1 son eliminados.  @var{n} tiene que
ser un n@'umero no negativo menor o igual a @code{$#}.  Si @var{n} es cero o
mayor que @code{$#}, los argumentos posicionales no se cambian.  Si no se
proporciona @var{n}, se asume que es 1.  El c@'odigo de retorno es cero a no
ser que @var{n} sea mayor que @code{$#} o menor que cero, distinto de cero
de no ser as@'{@dotless{i}}.

@item test
@itemx [
@btindex test
@btindex [
@example
test @var{expr}
@end example

Eval@'ua una expresi@'on condicional @var{expr} y devuelve un estado de 0
(verdadero) o 1 (falso).  Cada operador y operando debe ser un argumento
separado.  Las expresiones est@'an compuestas de las opciones primarias
descritas m@'as abajo en @ref{Expresiones Condicionales de Bash}.
@code{test} no acepta ninguna opci@'on, tampoco acepta e ignora un argumento
de @option{--} como el significado del fin de las opciones.

Cuando se usa la forma @code{[}, el @'ultimo argumento de la instrucci@'on
debe ser un @code{]}.

Las expresiones pueden ser combinadas usando los siguientes operadores,
listados en orden descendente de precedencia.  La evaluaci@'on depende del
n@'umero de argumentos; consulta m@'as abajo.  La precedencia de operador se
usa cuando hay cinco o m@'as argumentos.

@table @code
@item ! @var{expr}
Verdadero si @var{expr} es falso.

@item ( @var{expr} )
Devuelve el valor de @var{expr}.  Esto puede ser usado para sobreescribir la
precedencia normal de operadores.

@item @var{expr1} -a @var{expr2}
Verdadero si tanto @var{expr1} y @var{expr2} son verdadero.

@item @var{expr1} -o @var{expr2}
Verdadero si @var{expr1} o @var{expr2} es verdadero.
@end table

Las instrucciones internas @code{test} y @code{[} eval@'uan expresiones
condicionales usando un conjunto de reglas basado en el n@'umero de
argumentos.

@table @asis
@item 0 argumentos
La expresi@'on es falsa.

@item 1 argumento
La expresi@'on es verdadera solamente si el argumento no es nulo.

@item 2 argumentos
Si el primer argumento es @samp{!}, la expresi@'on es verdadera solamente si
el segundo argumento es nulo.  Si el primer argumento es uno de los
operadores condicionales unarios (@pxref{Expresiones Condicionales de
Bash}), la expresi@'on es verdadera si la comprobaci@'on unaria es
verdadera.  Si el primer argumento no es un operador unario v@'alido, la
expresi@'on es falsa.

@item 3 argumentos
Las siguientes condiciones se aplican en el orden listado.  Si el segundo
argumento es uno de los operadores condicionales binarios
(@pxref{Expresiones Condicionales de Bash}), el resultado de la expresi@'on
es el resultado de la comprobaci@'on binaria usando el primer y tercer
argumentos como operandos.  Los operadores @samp{-a} y @samp{-o} son
considerados operadores binarios cuando hay tres argumentos.  Si el primer
argumento es @samp{!}, el valor es la negaci@'on de la comprobaci@'on de dos
argumentos usando el segundo y el tercer argumentos.  Si el primer argumento
es exactamente @samp{)} y el tercer argumento es exactamente @samp{)}, el
resultado es la comprobaci@'on de un argumento del segundo argumento.  De lo
contrario, el expresi@'on es falsa.

@item 4 argumentos
Si el primer argumento es @samp{!}, el resultado es la negaci@'on de la
expresi@'on de tres argumentos compuesta de los argumentos restantes.  De lo
contrario, la expresi@'on es analizada y evaluada seg@'un la precedencia
usando las reglas listadas anteriormente.

@item 5 o m@'as argumentos
La expresi@'on es analizada y evaluada seg@'un la precedencia usando las
reglas listadas anteriormente.
@end table

Cuando se usa con @code{test} o @samp{[}, los operadores @samp{<} y @samp{>}
ordenan lexicogr@'aficamente usando el orden ASCII.

@item times
@btindex times
@example
times
@end example

Imprime los tiempos de usuario y de sistema usados por el int@'erprete y sus
hijos.  El estado de retorno es cero.

@item trap
@btindex trap
@example
trap [-lp] [@var{arg}] [@var{id_se@~nal} @dots{}]
@end example

Las instrucciones en @var{arg} est@'an pensadas para ser
le@'{@dotless{i}}das y ejecutadas cuando el int@'erprete recibe la se@~nal
@var{id_se@~nal}.  Si falta @var{par@'am} (y hay una se@~nal
@var{id_se@~nal}) o es igual a @samp{-}, cada disposici@'on de se@~nal
especificada es restablecida al valor que ten@'{@dotless{i}}a cuando el
int@'erprete fue iniciado.  Si @var{arg} es la cadena nula, se ignora la
se@~nal especificada por cada @var{id_se@~nal} y las instrucciones que
ejecuta.  Si @var{arg} no est@'a presente y @option{-p} ha sido
proporcionado, el int@'erprete muestra las instrucciones trap asociadas con
cada @var{id_se@~nal}.  Si no se proporcionan argumentos, o solo se
proporciona @option{-p}, @code{trap} imprime la lista de instrucciones
asociadas con cada n@'umero de se@~nal en una forma que puede ser reusada
como entrada para el int@'erprete.  La opci@'on @option{-l} hace que el
int@'erprete imprima una lista de nombres de se@~nales y sus n@'umeros
correspondientes.  Cada @var{id_se@~nal} es o bien un nombre de se@~nal o un
n@'umero de se@~nal.  Los nombres de se@~nales no distinguen entre
may@'usculas y min@'usculas y el prefijo @code{SIG} es opcional.

Si una @var{id_se@~nal} es @code{0} o @code{EXIT}, @var{arg} se ejecuta
cuando el int@'erprete se cierra.  Si un @var{id_se@~nal} es @code{DEBUG},
se ejecuta la instrucci@'on @var{arg} antes de cada instrucci@'on simple,
instrucci@'on @code{for}, instrucci@'on @code{case}, instrucci@'on
@code{select}, cada instrucci@'on @code{for} aritm@'etica y antes de que se
ejecute la primera instrucci@'on en una funci@'on del int@'erprete.
Consulte la descripci@'on de la opci@'on @code{extdebug} de la instrucci@'on
integrada @code{shopt} (@pxref{La Instrucci@'on Integrada Shopt}) para
encontrar detalles de su efecto sobre la trap @code{DEBUG}.  Si un
@var{id_se@~nal} es @code{RETURN}, la instrucci@'on @var{arg} se ejecuta
cada vez que una instrucci@'on del int@'erprete o un guion ejecutado con las
instrucciones integradas @code{.} o @code{source} terminan de ejecutarse.

Si el @var{sigspec} es @code{ERR}, la instrucci@'on @var{arg} es ejecutada
cada vez que una tuber@'{@dotless{i}}a (que puede consistir de una @'unica
instrucci@'on simple), una lista o una instrucci@'on compuesta devuelve un
estado diferente de cero, de acuerdo a las siguientes condiciones.  El trap
@code{ERR} no es ejecutado si la instrucci@'on fallida es parte de la lista
de instrucciones inmediatamente despu@'es de una palabra clave @code{until}
o @code{while}, parte de la condici@'on que sigue a las palabras reservadas
@code{if} o @code{elif}, parte de una instrucci@'on ejecutada en una lista
@code{&&} o @code{||} excepto la instrucci@'on que sigue al @'ultimo
@code{&&} o @code{||}, cualquier instrucci@'on en una tuber@'{@dotless{i}}a
excepto la @'ultima o si el estado de retorno de la instrucci@'on est@'a
siendo invertido usando @code{!}.  Estas son las mismas condiciones
cumplidas por la opci@'on @code{errexit} (@option{-e}).

Las se@~nales ignoradas en la entrada al int@'erprete no pueden ser
atrapadas o eliminadas.  Las se@~nales atrapadas que no est@'an siendo
ignoradas son restablecidas a sus valores originales en un subint@'erprete o
un entorno de subint@'erprete cuando se crea una.

El estado de retorno es cero a no ser que @var{sigspec} no especifique una
se@~nal v@'alida.

@item umask
@btindex umask
@example
umask [-p] [-S] [@var{modo}]
@end example

Establece el proceso del int@'erprete de la m@'ascara de creaci@'on de
archivos a @var{modo}.  Si @var{modo} comienza por un d@'{@dotless{i}}gito,
es interpretado como un n@'umero octal; si no, es interpretado como una
m@'ascara de modo simb@'olico similar a la aceptada por la instrucci@'on
@code{chmod}.  Si se omite @var{modo}, se imprime el valor actual de la
m@'ascara.  Si se proporciona la opci@'on @option{-S} sin un argumento
@var{modo}, la m@'ascara se imprime en un formato simb@'olico.  Si se
proporciona la opci@'on @option{-p}, y se omite @var{modo}, la salida es de
forma que puede reusarse como entrada.  El estado de retorno es cero si el
modo se cambia exitosamente o si no se proporciona un argumento @var{modo},
y distinto a cero de no ser as@'{@dotless{i}}.

Ten en cuenta que cuando el modo es interpretado como un n@'umero octal,
cada n@'umero de umask es restado de @code{7}.  As@'{@dotless{i}}, un umask
de @code{022} resulta en permisos de @code{755}.

@item unset
@btindex unset
@example
unset [-fnv] [@var{nombre}]
@end example

Elimina cada variable o funci@'on @var{nombre}.  Si se pasa la opci@'on
@option{-v}, cada @var{nombre} se refiere a una variable del int@'erprete, y
esa variable es eliminada.  Si se pasa la opci@'on @option{-f}, los
@var{nombre}s se refieren a funciones del int@'erprete, y se elimina la
definici@'on de la funci@'on.  Si se proporciona la opci@'on @option{-n}, y
@var{nombre} es una variable con el atributo @var{nameref}, @var{nombre} se
eliminar@'a en vez de la variable a la que hace referencia.  @option{-n} no
tiene efecto si se proporciona la opci@'on @option{-f}.  Si no se
proporcionan opciones, cada @var{nombre} se refiere a una variable; si no
haya variable con ese nombre, cualquier funci@'on con ese nombre es
eliminada.  Las variables y funciones de solo lectura no pueden ser
eliminadas.  El estado de retorno es cero a no ser que @var{nombre} sea de
solo lectura.
@end table

@node Instrucciones Integradas de Bash
@section Instrucciones Integradas de Bash

Esta secci@'on describe las instrucciones integradas que son @'unicas de o
han sido extendidas en Bash.  Algunas de estas instrucciones son
especificadas en el est@'andar @sc{posix}.

@table @code

@item alias
@btindex alias
@example
alias [-p] [@var{nombre}[=@var{valor}] @dots{}]
@end example

Sin argumentos o con la opci@'on @option{-p}, @code{alias} imprime la lista
de aliases en la salida est@'andar en una forma que permite que sean
reutilizados como entrada.  Si se proporcionan argumentos, se define un
alias por cada @var{nombre} cuyo @var{valor} sea especificado.  Si no se
pasa un @var{valor}, se imprime el nombre y el valor del alias.  Los aliases
se describen en @ref{Aliases}

@item bind
@btindex bind
@example
bind [-m @var{mapa-de-teclas}] [-lpsvPSVX]
bind [-m @var{mapa-de-teclas}] [-q @var{funci@'on}] [-u @var{funci@'on}]
     [-r @var{secuencia-de-teclas}]
bind [-m @var{mapa-de-teclas}] -f @var{nombre-archivo}
bind [-m @var{mapa-de-teclas}]
     -x @var{secuencia-de-teclas:instrucci@'on-de-int@'erprete}
bind [-m @var{mapa-de-teclas}] @var{secuencia-de-teclas:nombre-funci@'on}
bind [-m @var{mapa-de-teclas}]
     @var{secuencia-de-teclas:instrucci@'on-readline}
@end example

Muestra las asociaciones actuales de teclas y funciones Readline
(@pxref{Edici@'on en L@'{@dotless{i}}nea de @'Ordenes}), asocia una
secuencia de teclas a una funci@'on o macro de Readline o estaclece una
variable de Readline.  Cada argumento que no es una opci@'on es una
instrucci@'on tal como aparecer@'{@dotless{i}}a en un archivo de
inicializaci@'on de Readline (@pxref{Archivo de Inicializaci@'on de
Readline}), pero cada asociaci@'on o instrucci@'on tiene que ser pasada como
un argumento independiente; p. ej., @samp{"\C-x\C-r":re-read-init-file}.

La opciones, si se proporcionan, tienen los siguientes significados:

@table @code
@item -m @var{mapa-de-teclas}
Usa @var{mapa-de-teclas} como el mapa de teclas afectado por las siguientes
asociaciones.  Son nombres aceptables de @var{mapa-de-teclas} @code{emacs},
@code{emacs-standard}, @code{emacs-meta}, @code{emacs-ctlx}, @code{vi},
@code{vi-move}, @code{vi-command} y @code{vi-insert}.  @code{vi} es
equivalente a @code{vi-command} (@code{vi-move} es tambi@'en un sin@'onimo);
@code{emacs} es equivalente a @code{emacs-standard}.

@item -l
Lista los nombres de todas las funciones de Readline.

@item -p
Muestra los nombres de las funciones y asociaciones de Readline de manera
que puedan ser usadas como entrada o en una archivo de inicializaci@'on de
Readline.

@item -P
Lista los nombres de funciones y las asociaciones de Readline.

@item -v
Muestra los nombres de variable y valores de Readline de una manera que
puedan ser usados como entrada o en un archivo de inicializaci@'on de
Readline.

@item -V
Lista los nombres de variable y los valores actuales de Readline.

@item -s
Muestra la secuencia de caracteres de Readline asociada a macros y las
cadenas que producen de manera que pueda ser usada como entrada o en un
archivo de inicializaci@'on Readline.

@item -S
Muestra las secuencias de teclas de Readline asociadas a macros y las
cadenas que producen.

@item -f @var{nombre-de-archivo}
Lee asociaciones de teclas de @var{nombre-de-archivo}

@item -q @var{funci@'on}
Consulta sobre las teclas que llaman a la @var{funci@'on} nombrada.

@item -u @var{funci@'on}
Desasocia todas las teclas asociadas a la @var{funci@'on} nombrada.

@item -r @var{secuencia-de-teclas}
Elimina cualquier asociaci@'on actual para @var{secuencia-de-teclas}

@item -x @var{secuencia-de-teclas:instrucci@'on-int@'erprete}
Hace que se ejecute @var{instrucci@'on-int@'erprete} cada vez que se
introduzca @var{secuencia-de-teclas}.  Cuando se ejecuta
@var{instrucci@'on-int@'erprete}, el int@'erprete establece la variable
@code{READLINE_LINE} al contenido del b@'ufer y la variable
@code{READLINE_POINT} a la ubicaci@'on actual del punto de inserci@'on.  Si
la instrucci@'on ejecutada cambia el valor de @code{READLINE_LINE} o
@code{READLINE_POINT}, se reflejar@'an esos nuevos valores en el estado de
edici@'on.

@item -X
Lista todas las secuencias de teclas asociadas a instrucciones del
int@'erprete y las instrucciones asociadas en un formato que puede ser
reutilizado como entrada.
@end table

@noindent
El estado de retorno es cero a no ser que se proporcione una opci@'on
inv@'alida u ocurra un error.

@item instrucci@'on integrada
@btindex instrucci@'on integrada
@example
builtin [@var{instrucci@'on-integrada} [@var{par@'ams}]]
@end example

Ejecuta una instrucci@'on integrada, pas@'andole @var{par@'ams}, y devuelve
su estado de salida.  Esto es @'util cuando se define una funci@'on del
int@'erprete con el mismo nombre que una funci@'on integrada del
int@'erprete, conservando la funcionalidad de la instrucci@'on integrada
dentro de la funci@'on.  El estado de retorno es distinto de cero si
@var{instrucci@'on-integrada} no es una instrucci@'on integrada del
int@'erprete.

@item caller
@btindex caller
@example
caller [@var{expr}]
@end example

Devuelve el contexto de cualquier llamada a una subrutina activa (una
instrucci@'on del int@'erprete o un guion ejecutado con las instrucciones
integradas @code{.} o @code{source}).

Sin @var{expr}, @code{caller} muestra el n@'umero de l@'{@dotless{i}}nea y
el nombre de archivo fuente de la actual llamada de subrutina.  Si se
proporciona un entero negativo como @var{expr}, @code{caller} muestra el
n@'umero de l@'{@dotless{i}}nea, el nombre de subrutina y el archivo fuente
correspondiente a esa posici@'on en la actual pila de llamadas de
ejecuci@'on.  Esta informaci@'on extra puede ser usada, por ejemplo, para
imprimir un volcado de pila.  El marco actual es el marco 0.

El valor de retorno es 0 a no ser que el int@'erprete no est@'e ejecutando
una llamada de subrutina o @var{expr} no corresponda a una posici@'on
v@'alida en la pila de llamadas.

@item command
@btindex command
@example
command [-pVv] @var{instrucci@'on} [@var{argumentos} @dots{}]
@end example

Ejecuta @var{instrucci@'on} con @var{argumentos} ignorando cualquier
instrucci@'on del int@'erprete llamada @var{instrucci@'on}.  Solo se
ejecutan las instrucciones integradas del int@'erprete o las instrucciones
encontradas al inspeccionar el @env{PATH}.  Si hay una instrucci@'on del
int@'erprete llamada @code{ls}, ejecutar @samp{command ls} dentro de la
funci@'on ejecutar@'a la instrucci@'on externa @code{ls} en vez de llamar a
la funci@'on recursivamente.  La opci@'on @option{-p} equivale a usar un
valor por defecto para @env{PATH} que garantiza encontrar todas las
utilidades est@'andares.  El estado de retorno en este caso es 127 si no se
puede encontrar @var{instrucci@'on} u ocurri@'o un error, y el estado de
salida de @var{instrucci@'on} en caso contrario.

Si se proporciona la opci@'on @option{-V} o la @option{-v}, se imprime una
descripci@'on de @var{instrucci@'on}.  La opci@'on @option{-v} hace que se
muestre una @'unica palabra indicando el nombre de la instrucci@'on o
archivo utilizado para llamar a @var{instrucci@'on}; la opci@'on @option{-V}
produce una descripci@'on m@'as estensa.  En este caso, el estado de retorno
es cero si @var{instrucci@'on} es encontrada, y distinto a cero en si no.

@item declare
@btindex declare
@example
declare [-aAfFgilnrtux] [-p] [@var{nombre}[=@var{valor}] @dots{}]
@end example

Declara variables y les da atributos.  Si no se pasan @var{nombre}s,
entonces muestra los valores de las variables en su lugar. 

La opci@'on @option{-p} mostrar@'a los atributos y valores de cada
@var{nombre}.  Cuando se usa la opci@'on @option{-p} con argumentos
@var{nombre}, se ignoran opciones adicionales, excepto @option{-f} y
@option{-F}.

Cuando se proporciona @option{-p} sin argumentos @var{nombre},
@code{declare} mostrar@'a los atributos y valores de todas las variables con
los atributos especificados por las opciones adicionales.  Si no se
proporcionan otras opciones con @option{-p}, @code{declare} mostrar@'a los
atributos y valores de todas las variables del int@'erprete.  La opci@'on
@option{-f} restringir@'a la salida a funciones del int@'erprete.

La opci@'on @option{-F} inhibe la salida de las definiciones de funciones;
solo se imprimen el nombre de funci@'on y los atributos.  Si se habilita la
opci@'on del int@'erprete @code{extdebug}  usando @code{shopt} (@pxref{La
Instrucci@'on Integrada Shopt}), se muestra tambi@'en el archivo fuente y el
n@'umero de l@'{@dotless{i}}nea donde cada @var{nombre} est@'a definido.
@option{-F} supone @option{-f}.

La opci@'on @option{-g} obliga a que las variables sean creadas o
modificadas en el alcance global, incluso cuando @code{declare} es ejecutado
en una funci@'on del int@'erprete.  Es ignorada en todos los dem@'as casos.

Las siguientes opciones pueden ser usadas para restringir la salida a
variables con los atributos especificados o para dar a las variables
atributos:

@table @code
@item -a
Cada @var{nombre} es una variable de vector indexado (@pxref{Vectores}).

@item -A
Cada @var{nombre} es una variable de vector asociativo (@pxref{Vectores}).

@item -f
Usa solo nombres de funci@'on.

@item -i
La variable ser@'a tratada como un entero; la evaluaci@'on aritm@'etica
(@pxref{Aritm@'etica del Int@'erprete}) se realiza cuando se asigna un valor
a la variable.

@item -l
Cuando se le asigna un valor a la variable, todos los caracteres en
may@'uscula son convertidos a min@'uscula.  El atributo upper-case es
deshabilitado.

@item -n
Da a cada @var{nombre} el atributo @var{nameref}, convirti@'endolo en una
referencia de nombre a otra variable.  Esa otra variable est@'a definida por
el valor de @var{nombre}.  Todas las referencias, asignaciones y
modificaciones de atributo a @var{nombre}, excepto para aquellas que usan o
cambian el mismo atributo @option{-n}, son realizadas en la variable
referenciada por el valor @var{nombre}.  El atributo nameref no puede ser
aplicado a variables de vector.

@item -r
Hace que @var{nombre}s sean de solo lectura.  Despu@'es no se pueden asignar
valores a estos nombres usando sentencias de asignaci@'on o eliminaci@'on.

@item -t
Da a cada @var{nombre} el atributo @code{trace}.  Las funciones rastreadas
heredan las traps @code{DEBUG} y @code{RETURN} del int@'erprete ejecutor.
El atributo trace no tiene ning@'un significado especial para variables.

@item -u
Cuando se asigna un valor a una variable, todos los caracteres en
min@'uscula son convertidos a may@'uscula.  El atributo lower-case es
deshabilitado.

@item -x
Marca cada @var{nombre} para exportar a posteriores instrucciones mediante
el entorno.
@end table

Usar @samp{+} en vez de @samp{-} deshabilita el atributo, con las
excepciones de que @samp{+a} no puede ser usado para destruir una variable
de vector y @samp{+r} no eliminar@'a el atributo de solo lectura.  Cuando se
usa en una funci@'on, @code{declare} hace cada @var{nombre} local, como con
la instrucci@'on @code{local}, a no ser que se use la opci@'on @option{-g}.
Si un nombre de variable es seguido de =@var{valor}, el valor de la variable
es establecido a @var{valor}.

Cuando se usa @option{-a} o @option{-A} y la sintaxis de asignaci@'on
compuesta para crear variables de vector, los atributos adicionales no
tienen efecto hasta siguientes asignaciones.

El estado de retorno es cero a no ser que se encuentre una opci@'on
inv@'alida, se realice un intento para definir una funci@'on usando @samp{-f
foo=bar}, se realice un intento de asignar un valor a una variable de solo
lectura, se realice un intento de asignar un valor a una variable de vector
sin usar la sintaxis de asignaciones compuestas (@pxref{Vectores}), uno de
los @var{nombres} no sea un nombre de variable de int@'erprete v@'alido, se
realice un intento de desactivar el estado de solo lectura de una variable
de solo lectura, se realice un intento de desactivar el estado de vector de
una variable de vector o se realice un intento para mostrar una funci@'on
inexistente con @option{-f}.

@item echo
@btindex echo
@example
echo [-neE] [@var{arg} @dots{}]
@end example

Muestra los @var{arg}s, separados por espacios, terminado en una nueva
l@'{@dotless{i}}nea.  El estado de retorno es 0 a no ser que ocurra un error
de escritura.  Si se especifica @option{-n}, la nueva l@'{@dotless{i}}nea
adicional es suprimida.  Si se pasa la opci@'on @option{-e}, se habilita la
interpretaci@'on de los siguientes caracteres escapados por barras
invertidas.  La opci@'on @option{-E} deshabilita la interpretaci@'on de
estos caracteres de escape, incluso en sistemas en los que son interpretados
por defecto.  La opci@'on del int@'erprete @code{xpg_echo} puede ser usada
para determinar din@'amicamente si @code{echo} expande estos caracteres de
escape por defecto o no.  @code{echo} no interpreta @option{--} para indicar
el final de las opciones.

@code{echo} interpreta las siguientes secuencias de escape:
@table @code
@item \a
alerta (timbre)
@item \b
retroceso
@item \c
suprime salida adicional
@item \e
@itemx \E
escape
@item \f
salto de p@'agina
@item \n
nueva l@'{@dotless{i}}nea
@item \r
retorno de carro
@item \t
tabulaci@'on horizontal
@item \v
tabulaci@'on vertical
@item \\
barra invertida
@item \0@var{nnn}
el car@'acter de ocho bits cuyo valor es el valor octal @var{nnn} (de cero a
tres d@'{@dotless{i}}gitos octales).
@item \x@var{HH}
el car@'acter de ocho bits cuyo valor es el valor hexadecimal @var{HH} (uno
o dos d@'{@dotless{i}}gitos hexadecimales)
@item \u@var{HHHH}
el car@'acter Unicode (ISO/IEC 10646) cuyo valor es el valor hexadecimal
@var{HHHH} (de uno a cuatro d@'{@dotless{i}}gitos hexadecimales)
@item \U@var{HHHHHHHH}
el car@'acter Unicode (ISO/IEC 10646) cuyo valor es el valor hexadecimal
@var{HHHHHHHH} (de uno a ocho d@'{@dotless{i}}gitos hexadecimales)
@end table

@item enable
@btindex enable
@example
enable [-a] [-dnps] [-f @var{nombre-de-archivo}] [@var{nombre} @dots{}]
@end example

Habilita y deshabilita instrucciones integradas del int@'erprete.
Deshabilitar una instrucci@'on integrada permite que una instrucci@'on del
disco que tiene el mismo nombre que una instrucci@'on integrada del
int@'erprete sea ejecutada sin especificar un nombre de ruta completo, a
pesar de que el int@'erprete normalmente busca instrucciones integradas
antes que instrucciones del disco.  Si se usa @option{-n}, se deshabilitan
los @var{nombre}s.  De lo contrario, son habilitados @var{nombre}s.  Por
ejemplo, para usar el binario @code{test} encontrado a trav@'es de
@env{$PATH} en vez de la versi@'on integrada del int@'erprete, escribe
@samp{enable -n test}.

Si se proporciona la opci@'on @option{-p}, o no aparecen argumentos
@var{nombre}, se imprime una lista de instrucciones del int@'erprete.  Sin
ning@'un otro argumento, la lista consta de todas las instrucciones
habilitadas del int@'erprete.  La opci@'on @option{-a} equivale a listar
cada instrucci@'on integrada con una se@~nal de si est@'a o no habilitada. 

La opci@'on @option{-f} equivale a cargar la nueva instrucci@'on integrada
@var{nombre} del objeto compartido @var{nombre-de-archivo}, en sistemas que
soportan carga din@'amica.  La opci@'on @option{-d} borrar@'a una
instrucci@'on integrada cargada con @option{-f}.

Si no hay opciones, se muestra una lista de todas las instrucciones
integradas.  La opci@'on @option{-s} limita @code{enable} a las
instrucciones integradas especiales @sc{posix}.  Si @option{-s} se usa con
@option{-f}, la nueva instrucci@'on integrada se convierte en una
instrucci@'on integrada especial (@pxref{Instrucciones Integradas
Especiales}).

El estado de retorno es cero a no ser que @var{nombre} no sea una
instrucci@'on integrada del int@'erprete o haya un error cargando una nueva
instrucci@'on integrada de un objeto compartido.

@item help
@btindex help
@example
help [-dms] [@var{patr@'on}]
@end example

Muestra informaci@'on @'util sobre instrucciones integradas.  Si se
especifica @var{patr@'on}, @code{help} muestra informaci@'on detallada sobre
todas las instrucciones que coincidan con @var{patr@'on}, sino se imprime
una lista de las instrucciones integradas.

La opciones, si se proporcionan, tienen los siguientes significados:

@table @code
@item -d
Muestra una descripci@'on corta de cada @var{patr@'on}
@item -m
Muestra la descripci@'on de cada @var{patr@'on} en un formato tipo
p@'agina-man
@item -s
Muestra solo un resumen de uso corto por cada @var{patr@'on}
@end table

El estado de retorno es cero a no ser que ninguna instrucci@'on coincida con
@var{patr@'on}.

@item let
@btindex let
@example
let @var{expression} [@var{expresi@'on} @dots{}]
@end example

La instrucci@'on integrada @code{let} permite realizar operaciones
aritm@'eticas en variables del int@'erprete.  Cada @var{expresi@'on} se
eval@'ua de acuerdo a las reglas detalladas adelante en @ref{Aritm@'etica
del Int@'erprete}.  Si la @'ultima @var{expresi@'on} eval@'ua a 0,
@code{let} devuelve 1; de lo contrario, devuelve cero.

@item local
@btindex local
@example
local [@var{opci@'on}] @var{nombre}[=@var{valor}] @dots{}
@end example

Por cada argumento, se crea una variable local llamada @var{nombre}, y se le
asigna @var{valor}.  La @var{opci@'on} puede ser cualquiera de las opciones
aceptadas por @code{declare}.  @code{local} solo puede ser usado dentro de
una funci@'on; hace que la variable @var{nombre} tenga un alcance de
visibilidad restringido a esa funci@'on y a sus hijos.  Si @var{nombre} es
@samp{-}, el conjunto de las opciones del int@'erprete se hace local a la
funci@'on en la que @code{local} es llamado: las opciones del int@'erprete
cambiadas usando la instrucci@'on integrada @code{set} dentro de la
funci@'on son restablecidas a sus valores originales cuando la funci@'on
retorna.  El estado de retorno es cero a no ser que @code{local} se use
fuera de una funci@'on, se proporcione un @var{nombre} inv@'alido o
@var{nombre} sea una variable de solo lectura.

@item logout
@btindex logout
@example
logout [@var{n}]
@end example

Sale de un int@'erprete de acceso, devolviendo un estado de @var{n} al padre
del int@'erprete.

@item mapfile
@btindex mapfile
@example
mapfile [-d @var{delim}] [-n @var{cuenta}] [-O @var{origen}] [-s @var{cuenta}]
    [-t] [-u @var{da}] [-C @var{retrollamada}] [-c @var{cuant@'{@dotless{i}}a}] [@var{vector}]
@end example

Lee l@'{@dotless{i}}neas de la intrada est@'andar en la variable de vector
indexado @var{vector}, o del descriptor de archivo @var{da} si se
proporciona la opci@'on @option{-u}.  La variable @code{MAPFILE} es el
@var{vector} predeterminado.  Si se proporcionan, las opciones tienen el
siguiente significado:

@table @code

@item -d
El primer car@'acter de @var{delim} se usa para terminar cada
l@'{@dotless{i}}nea de entrada, en vez de una nueva l@'{@dotless{i}}nea.
@item -n
Copia como m@'aximo @var{cuenta} l@'{@dotless{i}}neas.  Si @var{cuenta} es
0, se copian todas las l@'{@dotless{i}}neas.
@item -O
Empieza asignando a @var{vector} en el @'{@dotless{i}}ndice @var{origen}.
El @'{@dotless{i}}ndice predeterminado es 0.
@item -s
Descarta las primeras @var{cuenta} l@'{@dotless{i}}neas
le@'{@dotless{i}}das.
@item -t
Elimina un @var{delim} al final  (nueva l@'{@dotless{i}}nea predeterminada)
de cada l@'{@dotless{i}}nea le@'{@dotless{i}}da.
@item -u
La l@'{@dotless{i}}neas son le@'{@dotless{i}}das del descriptor de archivo
@var{da} en vez de la entrada est@'andar.
@item -C
Eval@'ua @var{retrollamada} cada vez que @var{cuant@'{@dotless{i}}a}
l@'{@dotless{i}}neas son le@'{@dotless{i}}das.  La opci@'on @option{-c}
especifica @var{cuant@'{@dotless{i}}a}.
@item -c
Especifica el n@'umero de l@'{@dotless{i}}neas le@'{@dotless{i}}das entre
cada llamada a @var{callback}.
@end table

Si @option{-C} se proporciona sin @option{-c}, la cuant@'{@dotless{i}}a por
defecto es 5000.  Cuando se eval@'ua @var{retrollamada}, es proporcionado el
@'{@dotless{i}}ndice del siguiente elemento vector a ser asignado y la
l@'{@dotless{i}}nea a ser asignada a ese elemento como argumentos
adicionales.  @var{retrollamada} se eval@'ua despu@'es de que la
l@'{@dotless{i}}nea sea le@'{@dotless{i}}da, pero antes de que el elemento
vector sea asignado.

Si no se proporciona con un origen expl@'{@dotless{i}}cito, @code{mapfile}
liberar@'a el @var{vector} antes de asignar a @'el.

@code{mapfile} retorna exitosamente a no ser que se proporcione una opci@'on
inv@'alida, @var{vector} sea inv@'alido o inasignable o @var{vector} no  sea
un vector indexado.

@item printf
@btindex printf
@example
printf [-v @var{var}] @var{formato} [@var{argumentos}]
@end example

Escribe los @var{argumentos} formateados en la salida est@'andar bajo el
control del @var{format}.  La opci@'on @option{-v} hace que la salida sea
asignada a la variable @var{var} en vez de ser imprimida a la salida
est@'andar.

El @var{format} es una cadena de caracteres que contiene tres tipos de
objetos: caracteres sencillos, que son simplemente copiados a la salida
est@'andar; secuencias de caracteres de escape, que son convertidos y
copiados a la salida est@'andar; y especificaciones de formato, cada una de
las cuales provoca la impresi@'on del siguiente @var{argumento} sucesivo.
Adem@'as de los formatos est@'andares de @code{printf(1)}, @code{printf}
interpreta las siguientes extensiones:

@table @code
@item %b
Hace que @code{printf} expanda las secuencias de barras invertidas de escape
en el @var{argumento} correspondiente de la misma forma que @code{echo -e}
(@pxref{Instrucciones Integradas de Bash}).
@item %q
Hace que @code{printf} muestre el @var{argumento} correspondiente en
un formato que puede ser reutilizado como entrada del int@'erprete.
@item %(@var{datefmt})T
Hace que @code{printf} muestre la cadena fecha-tiempo resultante de usar
@var{datefmt} como una cadena de formato para @code{strftime}(3).  El
@var{argumento} correspondiente es un entero que representa el n@'umero de
segundos desde la @'epoca.  Se pueden usar dos argumentos especiales: -1
representa el tiempo actual, y -2 representa el tiempo en que el
int@'erprete fue invocado.  Si no se especifican par@'ametros, la
conversi@'on se comporta como si se le hubiera pasado -1.  Esto es una
excepci@'on al comportamiento usual de @code{printf}.
@end table

@noindent
Los argumentos para especificadores de formato que no son cadenas son
tratados como constantes del lenguaje C, excepto que se permite un signo de
mayor o menor como prefijo, y si el car@'acter prefijado es una comilla
simple o doble, el valor es el valor ASCII del siguiente car@'acter.

El @var{formato} es reutilizado seg@'un sea necesario para consumir
todos los @var{argumentos}.  Si el @var{format} requiere m@'as
@var{par@'ametros} que los proporcionados, las especificaciones extra
de formato se comportan como si un valor cero u nulo, seg@'un la
conveniencia, hubiera sido proporcionado.  El valor de retorno es cero
en caso de @'exito, distinto a cero en caso de fallo.

@item read
@btindex read
@example
read [-ers] [-a @var{nombrev}] [-d @var{delim}] [-i @var{texto}] [-n @var{ncaracts}]
    [-N @var{ncaracts}] [-p @var{prompt}] [-t @var{tiempo-l@'{@dotless{i}}mite}] [-u @var{da}] [@var{nombre} @dots{}]
@end example

Se lee una l@'{@dotless{i}}nea de la entrada est@'andar, o del descriptor de
archivo @var{da} proporcionado como un argumento de la opci@'on @option{-u},
dividida en palabras como se describe anteriormente en @ref{Divisi@'on de
Palabras}, y la primera palabra se asigna al primer @var{nombre}, la segunda
palabra, al segundo @var{nombre}, etc.  Si hay m@'as palabras que nombres,
las palabras restantes y sus delimitadores interpuestos se asignan al
@'ultimo @var{nombre}.  Si hay menos palabras le@'{@dotless{i}}das del flujo
de entrada que nombres, son asignados valores vac@'{@dotless{i}}os a los
nombres sobrantes.  Se usan los caracteres en el valor de la variable
@env{IFS} para dividir la l@'{@dotless{i}}nea en palabras usando las mismas
reglas que usa el int@'erprete para la expansi@'on (descritas anteriormente
en @ref{Divisi@'on de Palabras}).  El car@'acter de barra invertida @samp{\}
puede ser usado para eliminar cualquier significado especial para el
siguiente car@'acter le@'{@dotless{i}}do y para la continuaci@'on de
l@'{@dotless{i}}nea.  Si no se proporcionan nombres, la l@'{@dotless{i}}nea
le@'{@dotless{i}}da se asigna a la variable @env{REPLY}.  El estado de
salida es cero, a no ser que se encuentre el fin-de-archivo, a @code{read}
se le acabe el l@'{@dotless{i}}mite de tiempo (en cuyo caso el estado es
mayor que 128), ocurra un error de asignaci@'on de variable (tal como
asignar a una variable de solo lectura) o se proporcione un descriptor de
archivo inv@'alido como argumento de @option{-u}.

La opciones, si se proporcionan, tienen los siguientes significados:

@table @code
@item -a @var{nombrev}
Las palabras son asignadas a los @'{@dotless{i}}ndices secuenciales de la
variable de vector @var{nombrev}, empezando por 0.  Todos los elementos son
eliminados de @var{nombrev} antes de la asignaci@'on.  Otros argumentos
@var{nombre} son ignorados.

@item -d @var{delim}
Se usa el primer car@'acter de @var{delim} para terminar la
l@'{@dotless{i}}nea de entrada, en vez de nueva l@'{@dotless{i}}nea.

@item -e
Readline (@pxref{Edici@'on en L@'{@dotless{i}}nea de @'Ordenes}) se usa para
obtener la l@'{@dotless{i}}nea.  Readline usa los ajustes de edici@'on
actuales (o predeterminados, si la edici@'on de l@'{@dotless{i}}nea no
estaba previamente activa).

@item -i @var{texto}
Si Readline est@'a siendo usado para leer la l@'{@dotless{i}}nea,
@var{texto} es colocado en el b@'ufer de edici@'on entes de que la edici@'on
comience.

@item -n @var{ncaracts}
@code{read} retorna despu@'es de leer @var{ncaracts} en vez de esperar a una
l@'{@dotless{i}}nea de entrada completa, pero atiende al delimitador si son
le@'{@dotless{i}}dos menos de @var{ncaracts} antes del delimitador.

@item -N @var{ncaracts}
@code{read} retorna despu@'es de leer exactamente @var{ncaracts} caracteres
en vez de esperar a una l@'{@dotless{i}}nea completa de entrada, a no ser
que se encuentre EOF o @code{read} se quede sin tiempo.  Los caracteres de
delimitadores encontrados en la entrada no son tratados de forma especial y
no hacen que @code{read} retorne hasta que son le@'{@dotless{i}}dos
@var{ncaracts} caracteres.  El resultado no es dividido en los caracteres en
@code{IFS}; la intenci@'on es que sean asignados a la variable exactamente
los caracteres le@'{@dotless{i}}dos (con la excepci@'on de la barra
invertida; consulta la opci@'on @option{-r} abajo).

@item -p @var{prompt}
Muestra @var{prompt}, sin una nueva l@'{@dotless{i}}nea al final, antes de
tratar de leer alguna entrada.  El prompt se muestra solo si la entrada
procede de una terminal.

@item -r
Si se pasa esta opci@'on, la barra invertida no act@'ua como un car@'acter
de escape.  Se considera que la barra invertida es parte de la
l@'{@dotless{i}}nea.  En concreto, una pareja barra invertida-nueva
l@'{@dotless{i}}nea no puede ser usada como una continuaci@'on de
l@'{@dotless{i}}nea.

@item -s
Modo silencioso.  Si la entrada procede de una terminal, no muestra los
caracteres escritos.

@item -t @var{tiempo-l@'{@dotless{i}}mite}
Hace que @code{read} tenga un l@'{@dotless{i}}mite de tiempo y devuelva
fallo si una l@'{@dotless{i}}nea de entrada completa (o un n@'umero
especificado de caracteres)  no es le@'{@dotless{i}}da en
@var{tiempo-l@'{@dotless{i}}mite} segundos.
@var{tiempo-l@'{@dotless{i}}mite} puede ser un n@'umero decimal con una
porci@'on fraccionaria siguiendo la coma decimal.  Esta opci@'on solo es
efectiva si @code{read} est@'a leyendo entrada de una terminal,
tuber@'{@dotless{i}}a u otro archivo especial; no tiene efecto cuando lee de
archivos normales.  Si a @code{read} se le acaba el tiempo, @code{read}
guarda cualquier entrada parcial le@'{@dotless{i}}da en la @var{nombre}
variable especificada.  Si @var{tiempo-l@'{@dotless{i}}mite} es 0,
@code{read} retorna inmediatamente, sin tratar de leer ning@'un dato.  El
estado de salida es 0 si la entrada est@'a disponible en el descriptor de
archivo especificado, distinto de cero en caso contrario.  El estado de
salida es mayor que 128 si se excede el tiempo l@'{@dotless{i}}mite.

@item -u @var{da}
Lee entrada del descriptor de archivo @var{da}.
@end table

@item readarray
@btindex readarray
@example
readarray [-d @var{retrollamada}] [-n @var{cuenta}] [-O @var{origen}] [-s @var{cuenta}] [-t] [-u @var{da}]
    [-C @var{callback}] [-c @var{cuant@'{@dotless{i}}a}] [@var{vector}]
@end example

Lee l@'{@dotless{i}}neas de la entrada est@'andar en la variable de vector
indexada @var{vector}, o del descriptor de archivo @var{da} si se
proporciona la opci@'on @option{-u}.

Un sin@'onimo de @code{mapfile}.

@item source
@btindex source
@example
source @var{nombre-de-archivo}
@end example

Un sin@'onimo de @code{.} (@pxref{Instrucciones Integradas del Bourne
Shell}).

@item type
@btindex type
@example
type [-afptP] [@var{nombre} @dots{}]
@end example

Por cada @var{nombre}, indica como ser@'{@dotless{i}}a interpretado si es
usado como nombre de instrucci@'on.

Si se usa la opci@'on @option{-t}, @code{type} imprime una solo palabra que
es una de @samp{alias}, @samp{function}, @samp{builtin}, @samp{file} o
@samp{keyword}, si @var{nombre} es un alias, funci@'on del int@'erprete,
instrucci@'on integrada del int@'erprete, archivo de disco o palabra
reservada del int@'erprete respectivamente.  Si no se encuentra el
@var{nombre}, no se imprime nada y @code{type} devuelve un estado de fallo.

Si se usa la opci@'on @option{-p}, @code{type} devuelve o el nombre del
archivo de disco que ser@'{@dotless{i}}a ejecutado o nada si @option{-t} no
devolviera @samp{file}.

La opci@'on @option{-P} fuerza una b@'usqueda de ruta por cada @var{nombre},
incluso si @option{-t} no devolviera @samp{file}.

Si se crea el resumen criptogr@'afico de una instrucci@'on, @option{-p} y
@option{-P} imprimen el valor del resumen criptogr@'afico creado, que no es
necesariamente el archivo que aparece primero en @code{$PATH}.

Si se usa la opci@'on @option{-a}, @code{type} devuelve todos los lugares
que contienen un ejecutable llamado @var{file}.  Esto incluye aliases y
funciones, solo si la opci@'on @option{-p} no se usa tambi@'en.

Si se usa la opci@'on @option{-f}, @code{type} no intenta buscar
instrucciones del int@'erprete, como con la instrucci@'on integrada
@code{command}.

El estado de retorno es cero si se encuentran todos los @var{nombres},
distinto a cero si alguno no es encontrado.

@item typeset
@btindex typeset
@example
typeset [-afFgrxilnrtux] [-p] [@var{nombre}[=@var{valor}] @dots{}]
@end example

La instrucci@'on @code{typeset} se proporciona por compatibilidad con el
int@'erprete Korn.  Es un sin@'onimo de la instrucci@'on integrada
@code{declare}.

@item ulimit
@btindex ulimit
@example
ulimit [-HSabcdefiklmnpqrstuvxPT] [@var{l@'{@dotless{i}}mite}]
@end example

@code{ulimit} proporciona control sobre los recursos disponibles para los
procesos iniciados por el int@'erprete, en sistemas que permiten tal
control.  Si se pasa una opci@'on, se interpreta de la siguiente forma:

@table @code
@item -S
Cambia e informa el l@'{@dotless{i}}mite suave asociado con un recurso.

@item -H
Cambia e informa sobre el l@'{@dotless{i}}mite duro asociado con un recurso.

@item -a
Se informa de todos los l@'{@dotless{i}}mites actuales.

@item -b
El tama@~no m@'aximo de b@'ufer de socket.

@item -c
El tama@~no m@'aximo de archivos de n@'ucleo creados.

@item -d
El tama@~no m@'aximo de un segmento de datos de proceso.

@item -e
La prioridad m@'axima de planificaci@'on ("nice").

@item -f
El tama@~no m@'aximo de archivos escritos por el int@'erprete y sus hijos.

@item -i
El tama@~no m@'aximo de se@~nales pendientes.

@item -k
El n@'umero m@'aximo de kqueues que pueden ser asignadas.

@item -l
El m@'aximo tama@~no que puede ser bloqueado en memoria.

@item -m
El m@'aximo tama@~no residente establecido (muchos sistemas no respetan este
l@'{@dotless{i}}mite).

@item -n
El m@'aximo n@'umero de descriptores de archivo abiertos (la
mayor@'{@dotless{i}}a de sistemas no permiten que este valor sea
establecido)

@item -p
El tama@~no del b@'ufer de la tuber@'{@dotless{i}}a.

@item -q
El m@'aximo n@'umero de bytes en colas de mensaje POSIX.

@item -r
La m@'axima prioridad de planificaci@'on en tiempo real.

@item -s
El tama@~no m@'aximo de pila.

@item -t
La cantidad m@'axima de tiempo de cpu en segundos.

@item -u
El m@'aximo n@'umero de procesos disponibles para un @'unico usuario.

@item -v
La m@'axima cantidad de memoria virtual disponible para el int@'erprete, y,
en algunos sistemas, para sus hijos.

@item -x
El m@'aximo n@'umero de bloqueos de archivo.

@item -P
El m@'aximo n@'umero de pseudoterminales.

@item -T
El m@'aximo n@'umero de procesos.
@end table

Si se proporciona @var{l@'{@dotless{i}}mite}, y la opci@'on @option{-a} no
es usada, @var{l@'{@dotless{i}}mite} es el nuevo valor del recurso
especificado.  Los valores @var{l@'{@dotless{i}}mite} especiales
@code{hard}, @code{soft} y @code{unlimited} representan el
l@'{@dotless{i}}mite duro actual, el l@'{@dotless{i}}mite blando actual y
sin l@'{@dotless{i}}mite, respectivamente.  Un l@'{@dotless{i}}mite duro no
puede ser aumentado por un usuario distinto a root una vez establecido; un
l@'{@dotless{i}}mite blando puede ser aumentado hasta el valor del
l@'{@dotless{i}}mite duro.  De lo contrario, el valor actual del
l@'{@dotless{i}}mite blando para el recurso especificado es imprimido, a no
ser que se proporcione la opci@'on @option{-H}.  Cuando se establecen nuevos
l@'{@dotless{i}}mites, si no se proporciona ni @option{-H} ni @option{-S},
tanto el l@'{@dotless{i}}mite duro como el blando son establecidos.  Si no
se pasan opciones, entonces se asume @option{-f}.  Los valores son en
incrementos de 1024 bytes, excepto para @option{-t}, que es en segundos;
@option{-p}, que es en unidades de bloques de 512 bytes; @option{-P},
@option{-T}, @option{-b}, @option{-k}, @option{-n} y @option{-u}, que son
valores no escalados; y, durante modo @sc{posix}  (@pxref{Modo POSIX de
Bash}), @option{-c} y @option{-f}, que son en incrementos de 512 bytes.

El estado de retorno es cero a no ser que se proporcione un argumento u
opci@'on inv@'alida, u ocurra un error al establecer un nuevo
l@'{@dotless{i}}mite.

@item unalias
@btindex unalias
@example
unalias [-a] [@var{nombre} @dots{} ]
@end example

Elimina cada @var{nombre} de la lista de aliases.  Si se proporciona
@option{-a}, todos lo aliases son eliminados.  Los aliases son descritos en
@ref{Aliases}.
@end table

@node Modificando el Comportamiento del Int@'erprete
@section Modificando el Comportamiento del Int@'erprete
 
@menu
* La Instrucci@'on Integrada Set::  Cambia los valores de atributos del 
                                      int@'erprete y de 
                                      par@'ametrosposicionales.
* La Instrucci@'on Integrada Shopt::  Modifica el comportamiento opcional 
                                        del int@'erprete.
@end menu

@node La Instrucci@'on Integrada Set
@subsection La Instrucci@'on Integrada Set

Esta instrucci@'on integrada es tan complicada que se merece su propia
secci@'on.  @code{set} te permite cambiar los valores de las opciones del
int@'erprete y establecer los par@'ametros posicionales, o mostrar los
nombres y valores de las variables del int@'erprete.

@table @code
@item set
@btindex set
@example
set [--abefhkmnptuvxBCEHPT] [-o @var{nombre-de-opci@'on}]
    [@var{argumento} @dots{}]
set [+abefhkmnptuvxBCEHPT] [+o @var{nombre-de-opci@'on}]
    [@var{argumento} @dots{}]
@end example

Si no se proporcionan opciones o argumentos, @code{set} muestra los nombres
y valores de todas las variables y funciones del int@'erprete, ordenadas
seg@'un la actual configuraci@'on regional, en un formato que puede ser
reutilizado como entrada para establecer o eliminar las variables
actualmente establecidas.  Las variables de solo lectura no pueden ser
eliminadas.  En modo @sc{posix}, solo son listadas las variables del
int@'erprete.

Cuando se proporcionan opciones, establecen o eliminan los atributos del
int@'erprete.  Las opciones, si se especifican, tienen los siguientes
significados:

@table @code
@item -a
A cada variable o funci@'on que es creada o modificada se le da el atributo
de exportaci@'on y es marcada para exportar al entorno de las posteriores
instrucciones.

@item -b
Hace que se informe inmediatamente del estado de las tareas en segundo plano
terminadas, en vez de imprimir antes del siguiente prompt primario.

@item -e
Sale del int@'erprete inmediatamente si una tuber@'{@dotless{i}}a
(@pxref{Tuber@'{@dotless{i}}as}), que puede consistir en una @'unica
instrucci@'on simple (@pxref{Instrucciones Simples}), una lista
(@pxref{Listas}) o una instrucci@'on compuesta (@pxref{Instrucciones
Compuestas})  devuelve un estado distinto de cero.  El int@'erprete no se
cierra si la instrucci@'on que falla es parte de la lista de instrucciones
que sigue inmediatamente una palabra clave @code{while} o @code{until},
parte de una comprobaci@'on en un oraci@'on @code{if}, parte de cualquier
instrucci@'on ejecutada en una lista @code{&&} o @code{||} excepto la
instrucci@'on que sigue al @'ultimo @code{&&} o @code{||}, cualquier
instrucci@'on en una tuber@'{@dotless{i}}a excepto la @'ultima, o si el
estado de retorno es invertido con @code{!}.  Si una instrucci@'on compuesta
distinta de un subint@'erprete retorna un estado distinto a cero porque una
instrucci@'on fall@'o mientras se ignoraba @option{-e}, no se cierra el
int@'erprete.  Se ejecuta una trap en @code{ERR}, si est@'a establecida,
antes de que el int@'erprete salga.

Esta opci@'on se aplica al entorno del int@'erprete y a cada entorno de
subint@'erprete de forma separada (@pxref{Entorno de Ejecuci@'on de
Instrucciones}), y puede provocar que los subint@'erpretes se cierren antes
de ejecutar todas las instrucciones en el subint@'erprete.

Si una instrucci@'on compuesta o una funci@'on del int@'erprete se ejecuta
en un contexto en el que @option{-e} est@'e siendo ignorado, ninguna de las
instrucciones ejecutadas dentro de la instrucci@'on compuesta o cuerpo de la
funci@'on se ver@'a afectada por el ajuste @option{-e}, incluso si
@option{-e} est@'a establecido y una instrucci@'on devuelva un estado de
fallo.  Si una instrucci@'on compuesta o funci@'on del int@'erprete
establece @option{-e} es ignorado, ese ajuste no tendr@'a ning@'un efecto
hasta que la instrucci@'on compuesta o la instrucci@'on que contiene la
llamada a la funci@'on se complete.

@item -f
Deshabilita la expansi@'on de nombre de archivo (globbing).

@item -h
Ubica y recuerda instrucciones (resumen criptogr@'afico) mientras son
consultadas para su ejecuci@'on.  Esta opci@'on est@'a habilitada por
defecto.

@item -k
Todos los argumentos en forma de sentencias de asignaci@'on son ubicados en
el entorno para una instrucci@'on, no solo aquellos que preceden al nombre
de la instrucci@'on.

@item -m
Es habilitado el control de tareas (@pxref{Control de Tareas}).  Todos los
procesos se ejecutan en un grupo de procesos separado.  Cuando se completa
una tarea en segundo plano, el int@'erprete imprime una l@'{@dotless{i}}nea
que contiene su estado de salida.

@item -n
Lee instrucciones pero no las ejecuta.  Esto puede ser utilizado para
comprobar un guion en busca de errores de sintaxis.  Esta opci@'on es
ignorada por los int@'erpretes interactivos.

@item -o @var{nombre-de-opci@'on}

Establece la opci@'on correspondiente a @var{nombre-de-opci@'on}:

@table @code
@item allexport
Equivalente a @code{-a}.

@item braceexpand
Equivalente a @code{-B}.

@item emacs
Usa una interfaz de edici@'on de l@'{@dotless{i}}nea (@pxref{Edici@'on en
L@'{@dotless{i}}nea de @'Ordenes}) estilo @code{emacs}.  Esto tambi@'en
afecta a la interfaz de edici@'on usada para @code{read -e}.

@item errexit
Equivalente a @code{-e}.

@item errexit
Equivalente a @code{-E}.

@item functrace
Equivalente a @code{-T}.

@item hashall
Equivalente a @code{-h}.

@item histexpand
Equivalente a @code{-H}.

@item history
Habilita el historial de instrucciones, como se describe en @ref{Servicios
del Historial de Bash}.  Esta opci@'on est@'a activada por defecto en
int@'erpretes interactivos.

@item ignoreeof
No se saldr@'a de un int@'erprete interactivo al leer EOF.

@item keyword
Equivalente a @code{-k}.

@item monitor
Equivalente a @code{-m}.

@item noclobber
Equivalente a @code{-C}.

@item noexec
Equivalente a @code{-n}.

@item noglob
Equivalente a @code{-f}.

@item nolog
Actualmente ignorado.

@item notify
Equivalente a @code{-b}.

@item nounset
Equivalente a @code{-u}.

@item onecmd
Equivalente a @code{-t}.

@item physical
Equivalente a @code{-P}.

@item pipefail
Si se habilita, el valor de retorno de una tuber@'{@dotless{i}}a es el valor
de la @'ultima (la m@'as a la derecha) instrucci@'on que finalice con un
estado distinto de cero, o cero si todas las instrucciones en la
tuber@'{@dotless{i}}a finalizan con @'exito.  Esta opci@'on est@'a
deshabilitada por defecto.

@item posix
Cambia el comportamiento de Bash donde la operaci@'on por defecto difiere
del est@'andar @sc{posix} para cumplir el est@'andar (@pxref{Modo POSIX de
Bash}).  Esto est@'a pensado para hacer que Bash se comporte como un
componente preciso de ese est@'andar.

@item privileged
Equivalente a @code{-p}.

@item verbose
Equivalente a @code{-v}.

@item vi
Usa la interfaz de edici@'on de l@'{@dotless{i}}nea estilo @code{vi}.  Esto
tambi@'en afecta a la interfaz de edici@'on usada por @code{read -e}.

@item xtrace
Equivalente a @code{-x}.
@end table

@item -p
Activa el modo privilegiado.  En este modo los archivos @env{$BASH_ENV} y
@env{$env} no son procesados, las funciones no son heredadas del entorno y
las variables @env{SHELLOPTS}, @env{BASHOPTS}, @env{CDPATH} y
@env{GLOBIGNORE}, si aparecen en el entorno, son ignoradas.  Si el
int@'erprete se inicia con el identificador efectivo del usuario (grupo)
diferente del identificador del usuario (grupo) real y no se proporciona la
opci@'on @option{-p}, se llevan estas acciones, y el id efectivo del usuario
se establece al id real del usuario.  Si la opci@'on @option{-p} se
proporciona durante el inicio, no se restablece el id de usuario efectivo.
Desactivar esta opci@'on hace que los identificadores del usuario y el grupo
efectivos sean establecidos a los identificadores del usuario y el grupo
reales.

@item -t
Sale despu@'es de leer y ejecutar una instrucci@'on.

@item -u
Trata las variables y par@'ametros sin establecer que sean distintos a
@samp{@@} o @samp{*} como un error cuando se realiza la expansi@'on de
par@'ametros.  Se escribir@'a un mensaje de error a la salida de error
est@'andar, y un int@'erprete no interactivo se cerrar@'a.

@item -v
Imprime las l@'{@dotless{i}}neas de entrada del int@'erprete seg@'un son
le@'{@dotless{i}}das.

@item -x
Imprime un rastro de instrucciones simples, instrucciones @code{for},
instrucciones @code{case}, instrucciones @code{select} y instrucciones
aritm@'eticas @code{for} y sus argumentos o listas de palabras asociadas
despu@'es de que sean expandidos y antes de que sean ejecutados.  El valor
de la variable @env{PS4} es expandido, y el valor resultante es imprimido
antes de la instrucci@'on y sus argumentos expandidos.

@item -B
El int@'erprete realizar@'a la expansi@'on de llaves (@pxref{Expansi@'on de
Llaves}).  Est@'a opci@'on est@'a activada por defecto.

@item -C
Evita que la redirecci@'on de salida usando @samp{>}, @samp{>&} y @samp{<>}
sobreescriba archivos existentes.

@item -E
Si est@'a establecida, cualquier trap en @code{ERR} es heredada por
funciones del int@'erprete, sustituciones de intrucciones e intrucciones
ejecutadas en un entorno de subint@'erprete.  La trap @code{ERR} no se
hereda normalmente en tales casos.

@item -H
Habilita la sustituci@'on de historial estilo @samp{!} (@pxref{Interacci@'on
con el Historial}).  Est@'a opci@'on est@'a activada por defecto en
int@'erpretes interactivos.

@item -P
Si est@'a habilitada, no resuelve enlaces simb@'olicos al realizar
instrucciones como @code{cd} que cambian el directorio actual.  Se usa el
directorio f@'{@dotless{i}}sico en su lugar.  Por defecto, Bash siga la
cadena l@'ogica de directorios cuando realiza instrucciones que cambian el
directorio actual.

Por ejemplo, si @file{/usr/sys} es un enlace simb@'olico a
@file{/usr/local/sys}, entonces:
@example
$ cd /usr/sys; echo $PWD
/usr/sys
$ cd ..; pwd
/usr
@end example

@noindent
Si @code{set -P} est@'a activada, entonces:
@example
$ cd /usr/sys; echo $PWD
/usr/local/sys
$ cd ..; pwd
/usr/local
@end example

@item -T
Si est@'a establecida, cualquier trap en @code{DEBUG} y @code{RETURN} son
heredadas por funciones del int@'erprete, sustituciones de instrucciones e
instrucciones ejecutadas en un entorno de subint@'erprete.  Las trampas
@code{DEBUG} y @code{RETURN} no son heredadas normalmente en tales casos.

@item --
Si ning@'un argumento sigue a esta opci@'on, los par@'ametros posicionales
son eliminados.  En caso contrario, los par@'ametros posicionales son
establecidos a @var{argumentos}, incluso si algunos de ellos comienzan por
@samp{-}.

@item -
Se@~nala el fin de las opciones, hace que todos los @var{argumentos}
restantes sean asignados a los par@'ametros posicionales.  Las opciones
@option{-x} y @option{-v} son desactivadas.  Si no hay argumentos, los
par@'ametros posicionales no cambian.
@end table

Usar @samp{+} en vez de @samp{-} hace que est@'as opciones se desactiven.
Las opciones tambi@'en pueden ser usadas al invocar al int@'erprete.  El
conjunto actual de opciones se puede encontrar en @code{$-}.

Los N @var{argumentos} porsicionales restantes son par@'ametros posicionales
y son asignados, en orden, a @code{$1}, @code{$2}, @dots{} @code{$N}.  El
par@'ametro especial @code{#} es establecido a N.

El estado de retorno siempre es cero a no ser que se proporcione una
opci@'on inv@'alida.
@end table

@node La Instrucci@'on Integrada Shopt
@subsection La Instrucci@'on Integrada Shopt

Esta instrucci@'on integrada te permite cambiar el comportamiento adicional
del int@'erprete.

@table @code

@item shopt
@btindex shopt
@example
shopt [-pqsu] [-o] [@var{nombre-de-opci@'on} @dots{}]
@end example

Alterna los valores de los ajustes que controlan el comportamiento opcional
del int@'erprete.  Los ajustes pueden ser los listados a continuaci@'on o,
si se usa la opci@'on @option{-o}, aquellos disponibles con la opci@'on
@option{-o} para la instrucci@'on integrada @code{set} (@pxref{La
Instrucci@'on Integrada Set}).  Sin opciones, o con la opci@'on @option{-p},
se muestra una lista de las opciones que pueden ser habilitadas, con una
indicaci@'on de si est@'a habilitada o no.  La opci@'on @option{-p} hace que
la salida se muestre de forma que pueda ser reutilizada como entrada.  Las
otras opciones tienen los siguientes significados:

@table @code
@item -s
Activa (habilita) cada @var{nombre-de-opci@'on}.

@item -u
Desactiva (deshabilita) cada @var{nombre-de-opci@'on}.

@item -q
Suprime la salida normal; el estado de retorno indica si el
@var{nombre-de-opci@'on} est@'a habilitado o deshabilitado.  Si se pasan
varios argumentos @var{nombre-de-opci@'on} con @option{-q}, el estado de
retorno es cero si todos los @var{nombres-de-opci@'on} est@'an habilitados;
distinto de cero en caso contrario.

@item -o
Limita los valores de @var{nombre-de-opci@'on} a aquellos definidos por la
opci@'on @option{-o} para la instrucci@'on integrada @code{set} (@pxref{La
Instrucci@'on Integrada Set}).
@end table

Si @option{-s} o @option{-u} se usan sin argumentos
@var{nombre-de-opci@'on}, @code{shopt} muestra solo aquellas opciones que
est@'an habilitadas o deshabilitadas, respectivamente.

A no ser que se indique lo contrario, las opciones @code{shopt} est@'an
deshabilitadas (off)  por defecto.

El estado de retorno al listar opciones es cero si todos los
@var{nombres-de-opciones} est@'an habilitados, diferente a cero en caso
contrario.  Al habilitar o deshabilitar opciones, el estado de retorno es
cero a no ser que @var{nombre-de-opci@'on} no sea una opci@'on del
int@'erprete v@'alida.

La lista de opciones @code{shopt} es:
@table @code

@item autocd
Si est@'a habilitada, un nombre de instrucci@'on que es el nombre de un
directorio es ejecutado como si fuera el argumento de la instrucci@'on
@code{cd}.  Esta opci@'on solo es usada por int@'erpretes interactivos.

@item cdable_vars
Si esto est@'a habilitado, se asume que un argumento para la instrucci@'on
integrada @code{cd} que no es un directorio es el nombre de una variable
cuyo valor es el directorio al que cambiar.

@item cdspell
Si est@'a habilita, ser@'an corregidos los errores de escritura menores de
un componente de directorio en una instrucci@'on @code{cd}.  Los errores
comprobados son caracteres transpuestos, y un car@'acter de m@'as.  Si se
encuentra una correcci@'on, se imprime la ruta corregida, y la instrucci@'on
procede.  Esta opci@'on solo es usada por int@'erpretes interactivos.

@item checkhash
Si esto est@'a habilitado, Bash comprueba que una instrucci@'on encontrada
en la tabla hash existe antes de intentar ejecutarla.  Si una instrucci@'on
con un hash ya no existe, se realiza una b@'usqueda de ruta normal.

@item checkjobs
Si est@'a habilitada, Bash lista el estado de cualquier tarea detenida o en
ejecuci@'on antes de que salga de un int@'erprete interactivo.  Si alguna
tarea est@'a en ejecuci@'on, esto hace que la salida sea pospuesta hasta que
sea intentada una segunda salida sin una instrucci@'on interviniente
(@pxref{Control de Tareas}).  El int@'erprete siempre pospone la salida si
se detiene cualquier tarea.

@item checkwinsize
Si est@'a habilitada, Bash comprueba la tama@~no de la ventana despu@'es de
cada instrucci@'on y, si es necesario, actualiza los valores de @env{LINES}
y @env{COLUMNS}.

@item cmdhist
Si est@'a habilitada, Bash intenta guardar todas las l@'{@dotless{i}}neas de
una instrucci@'on de varias l@'{@dotless{i}}neas en la misma entrada del
historial.  Esto permite una reedici@'on sencilla de instrucciones de varias
l@'{@dotless{i}}neas.

@item compat31
Si est@'a habilitada, Bash cambia su comportamiento al de la versi@'on 3.1
con respecto a los argumentos entrecomillados para el operador de la
instrucci@'on condicional @samp{=~} y respecto a la comparaci@'on de cadenas
de configuraci@'on regional espec@'{@dotless{i}}fica cuando se usan los
operadores @samp{<} y @samp{>} de la instrucci@'on condicional @code{[[}.
Las versiones de Bash anteriores a bash-4.1 usan la secuencia de
ordenaci@'on de la actual configuraci@'on regional y strcoll(3).

@item compat32
Si est@'a habilitada, Bash cambia su comportamiento al de la versi@'on 3.2
con respecto a la comparaci@'on de cadenas de regionalizaci@'on
espec@'{@dotless{i}}fica cuando se usan los operadores @samp{<} y @samp{>}
de la instrucci@'on condicional @code{[[} (consulta elemento anterior)  y el
efecto de interrumpir una lista de instrucciones.  Las versiones de Bash 3.2
y anteriores contin@'uan con la siguiente instrucci@'on en la lista
despu@'es de que una termine debido a una interrupci@'on.

@item compat40
Si est@'a habilitada, Bash cambia su comportamiento al de la versi@'on 4.0
con respecto a la comparaci@'on de cadenas de regionalizaci@'on
espec@'{@dotless{i}}fica cuando se usan los operadores @samp{<} y @samp{>}
de la instrucci@'on condicional @code{[[} (ve la descripci@'on de
@code{compat31})  y el efecto de interrumpir una lista de instrucciones.
Las versiones de Bash 4.0 y posteriores interrumpen la lista como si el
int@'erprete recibiera la interrupci@'on; las versiones previas contin@'uan
con la siguiente instrucci@'on en la lista.

@item compat41
Si est@'a habilitada, Bash, en el modo @sc{posix}, trata una comilla simple
en una expansi@'on de par@'ametros de comillas dobles como un car@'acter
especial.  Las comillas simples deben coincidir (un n@'umero par) y los
caracteres entre las comillas simples se consideran entrecomillados.  Este
es el comportamiento del modo @sc{posix} a trav@'es de la versi@'on 4.1.  El
comportamiento por defecto de Bash permanece como en versiones anteriores.

@item compat42
Si est@'a habilitada, no procesa la cadena de reemplazo en la expansi@'on de
palabra de sustituci@'on de patr@'on usando la eliminaci@'on de comillas.

@item compat43
Si est@'a habilitada, Bash no imprime un mensaje de advertencia si se
realiza un intento de usar una asignaci@'on de vector compuesto
entrecomillada como un argumento para @code{declare}, convierte los errores
de expansi@'on de palabra en errores no fatales que hacen fallar a la actual
instrucci@'on (el comportamiento por defecto es convertirlos en errores
fatales que hacen que el int@'erprete se cierre), y no restablece el estado
del bucle cuando se ejecuta una funci@'on del int@'erprete (esto permite que
@code{break} o @code{continue} en una funci@'on del int@'erprete afecten a
los bucles en el contexto del llamador).

@item complete_fullquote
Si est@'a habilitada, Bash entrecomilla todos los metacaracteres del
int@'erprete en nombres de archivo y nombre de directorio al realizar la
compleci@'on.  Si no est@'a habilitada, Bash elimina metacaracteres como el
s@'{@dotless{i}}mbolo de d@'olar del conjunto de caracteres que ser@'a
entrecomillado en los nombres de archivo completados cuando estos
metacaracteres aparezcan en referencias de variables del int@'erprete en
palabras que deben ser completadas.  Esto significa que los
s@'{@dotless{i}}mbolos de d@'olar en nombres de variable que expanden a
directorios no ser@'an entrecomillados; sin embargo, cualquier signo de
d@'olar que aparezca en nombres de archivo no ser@'a entrecomillado,
tampoco.  Esto est@'a activado solo cuando bash est@'a usando barras
invertidas para entrecomillar nombres de archivo completados.  Esta variable
est@'a habilitada por defecto, que es el comportamiento habitual de Bash en
versiones a partir de la 4.2.

@item direxpand
Si est@'a establecida, Bash reemplaza los nombres de directorio con los
resultados de la expansi@'on de palabra al realizar la compleci@'on de
nombre de archivo.  Esto cambia los contenidos del b@'ufer de edici@'on de
readline.  Si no est@'a establecida, Bash trata de preservar lo que el
usuario tecle@'o.

@item dirspell
Si est@'a establecida, Bash intenta la correcci@'on de escritura en nombres
de directorios durante la compleci@'on de palabras si el nombre del
directorio proporcionado inicialmente no existe.

@item dotglob
Si est@'a establecida, Bash incluye los nombres que empiezan por un `.' en
los resultados de la expansi@'on de nombre de archivo.

@item execfail
Si esto est@'a establecido, un int@'erprete no interactivo no se cerrar@'a
si no puede ejecutar el archivo especificado como un argumento para la
instrucci@'on integrada @code{exec}.  No se cierra un int@'erprete
interactivo si @code{exec} falla.

@item expand_aliases
Si est@'a establecida, los aliases son expandidos como se describe abajo en
Aliases, @ref{Aliases}.  Esta opci@'on est@'a habilitada por defecto para
int@'erpretes interactivos.

@item extdebug
Si se habilita durante la invocaci@'on del int@'erprete, dispone ejecutar el
perfil del depurador antes de que se inicie el int@'erprete, id@'entica a la
opci@'on @option{--debugger}.  Si se habilita tras la invocaci@'on, se
habilita el comportamiento pensando para el uso de depuradores:

@enumerate
@item
La opci@'on @option{-F} para la instrucci@'on integrada
@code{declare}(@pxref{Instrucciones Integradas de Bash})  muestra el nombre
de archivo fuente y el n@'umero de l@'{@dotless{i}}nea correspondiente a
cada nombre de funci@'on proporcionado como argumento.

@item
Si la instrucci@'on ejecutada por la trap @code{DEBUG} devuelve un valor
distinto a cero, se salta el siguiente comando y no se ejecuta.

@item
Si la instrucci@'on ejecutada por la trap @code{DEBUG} devuelve un valor de
2, y el int@'erprete se est@'a ejecutando en una subrutina (una funci@'on
del int@'erprete o un guion del int@'erprete ejecutado por las instrucciones
integradas @code{.} o @code{source}), el int@'erprete simula una llamada a
@code{return}.

@item
@code{BASH_ARGC} y @code{BASH_ARGV} son actualizados seg@'un lo descrito en
sus descripciones (@pxref{Variables de Bash}).

@item
Se habilita el rastreo de funciones: la sustituci@'on de instrucciones, las
funciones del int@'erprete y los subint@'erpretes invocados con @code{(
@var{instrucci@'on} )} heredan las trap @code{DEBUG} y @code{RETURN}.

@item
El rastreo de errores es habilitado: la sustituci@'on de instrucciones, las
funciones del int@'erprete y los subint@'erpretes invocados con @code{(
@var{instrucci@'on} )} heredan la trap @code{ERR}.
@end enumerate

@item extglob
Si est@'a habilitada, son habilitadas las funcionalidades extendidas de
coincidencia de patrones descritas m@'as arriba (@pxref{Coincidencia de
Patrones}).

@item extquote
Si est@'a habilitada, el entrecomillado @code{$'@var{cadena}'} and
@code{$"@var{cadena}"} es realizado dentro de expresiones
@code{$@{@var{par@'ametro}@}} encerradas en comillas dobles.  Esta opci@'on
est@'a habilitada por defecto. 

@item failglob
Si est@'a habilitada, los patrones que no consigan coincidir con nombres de
archivo durante la expansi@'on de nombre de archivo producen un error de
expansi@'on.

@item force_fignore
Si est@'a habilitada, los sufijos especificados por la variable del
int@'erprete @env{FIGNORE} hacen que las palabras sean ignoradas al realizar
la compleci@'on de palabras incluso si las palabras ignoradas son las
@'unicas compleciones posibles.  @xref{Variables de Bash}, para una
descripci@'on de @env{FIGNORE}.  Esta opci@'on est@'a habilitada por
defecto.

@item globasciiranges
Si est@'a habilitada, las expresiones de rango usadas en las expresiones de
llaves de coincidencia de patrones (@pxref{Coincidencia de Patrones})  se
comportan como en la configuraci@'on regional C tradicional al realizar
comparaciones.  Es decir, no se tiene en cuenta la actual secuencia de
ordenaci@'on de configuraci@'on regional, por lo que @samp{b} no se ordena
entre @samp{A} y @samp{B}, y los caracteres ASCII en min@'uscula o
may@'uscula se ordenar@'an juntos.   

@item globstar
Si est@'a habilitada, el patr@'on @samp{**} usado en un contexto de
expansi@'on de nombre de archivo corresponder@'a a todos los archivos y cero
o m@'as directorios y subdirectorios.  Si al patr@'on lo sigue un @samp{/},
solo coinciden directorios y subdirectorios.

@item gnu_errfmt
Si est@'a habilitada, los mensajes de error del int@'erprete son escritos en
el formato de error est@'andar de @sc{gnu}.

@item histappend
Si est@'a habilitada, la lista del historial es a@~nadida al nombre de
archivo nombrado por el valor de la variable @env{HISTFILE} cuando el
int@'erprete se cierra, en vez de sobreescribir el archivo.

@item histreedit
Si est@'a habilitada, y se est@'a usando Readline, se le da la oportunidad
al usuario de reeditar una sustituci@'on del historial fallida.

@item histverify
Si est@'a habilitada, y se est@'a usando Readline, los resultados de la
sustituci@'on del historial no son inmediatamente pasados al analizador del
int@'erprete.  En su lugar, la l@'{@dotless{i}}nea resultante es cargada en
el b@'ufer de edici@'on de Readline, permitiendo una modificaci@'on
posterior.

@item hostcomplete
Si est@'a habilitada, y se est@'a usando Readline, Bash tratar@'a de
realizar una compleci@'on del nombre de anfitri@'on cuando una palabra que
contiene un @samp{@@} est@'e siendo completada (@pxref{@'Ordenes para
Compleci@'on}).  Esta opci@'on est@'a habilitada por defecto.

@item huponexit
Si est@'a establecida, Bash enviar@'a @code{SIGHUP} a todas las tareas
cuando se cierre un int@'erprete de acceso interactivo (@pxref{Se@~nales}).

@item inherit_errexit
Si est@'a establecida, la sustituci@'on de instrucciones hereda el valor de
la opci@'on @code{errexit}, en vez de eliminarlo en el entorno del
subint@'erprete.  Esta opciones es habilitada cuando se habilita el modo
@sc{posix}.

@item interactive_comments
Permite que una palabra que comience por @samp{#} haga que esa palabra y
todos los caracteres restantes en esa l@'{@dotless{i}}nea sean ignorados en
un int@'erprete interactivo.  Esta opci@'on est@'a habilitada por defecto.

@item lastpipe
Si est@'a habilitada, y el control de tareas no est@'a activado, el
int@'erprete ejecuta la @'ultima instrucci@'on de una tuber@'{@dotless{i}}a
no ejecutada en segundo plano en el entorno actual del int@'erprete.

@item lithist
Si est@'a habilitada, y la opci@'on @code{cmdhist} est@'a habilitada, las
instrucciones de m@'ultiples l@'{@dotless{i}}neas son guardadas en el
historial con nuevas l@'{@dotless{i}}neas incorporadas en vez de usar
separadores de puntos y comas donde sea posible.

@item login_shell
El int@'erprete establece esta opci@'on si es iniciado como un int@'erprete
de acceso (@pxref{Llamando a Bash}).  El valor no puede ser cambiado.

@item mailwarn
Si est@'a habilitada, y un archivo que Bash est@'a comprobando en busca de
correo ha sido accedido desde la @'ultima hora en que fue comprobado, el
mensaje @code{"El correo en @var{mailfile} ha sido le@'{@dotless{i}}do"} es
mostrado.

@item no_empty_cmd_completion
Si est@'a habilitada, y se est@'a usando Readline, Bash no tratar@'a de
buscar en el @env{PATH} para posibles compleciones cuando la compleci@'on es
intentada en una l@'{@dotless{i}}nea vac@'{@dotless{i}}a.

@item nocaseglob
Si est@'a habilitada, Bash hace coincidir nombres de archivo
independientemente de may@'usculas y min@'uscula al realizar la expansi@'on
de nombre de archivo.

@item nocasematch
Si est@'a habilitada, Bash hace coincidir patrones independientemente de
may@'usculas y min@'usculas al realizar coincidencias mientras ejecuta las
instrucciones condicionales @code{case} o @code{[[}, cuando realiza
expansiones de palabra de sustituci@'on de patr@'on o cuando filtra posibles
compleciones como parte de compleci@'on programable.

@item nullglob
Si est@'a habilitada, Bash permite que patrones de nombre de archivo que no
corresponden con ning@'un archivo se expandan a una cadena
vac@'{@dotless{i}}a, en vez de a s@'{@dotless{i}} mismos.

@item progcomp
Si est@'a habilitada, las facilidades programables de compleci@'on
(@pxref{Compleci@'on Programable}) son habilitadas.  Est@'a opci@'on est@'a
habilitada por defecto.

@item promptvars
Si est@'a habilitada, las cadenas de prompt experimentan la expansi@'on de
par@'ametros, sustituci@'on de instrucciones, expansi@'on aritm@'etica y
eliminaci@'on de comillas despu@'es de ser expandidas como se describe m@'as
adelante (@pxref{Controlando el Prompt}).  Esta opci@'on est@'a habilitada
por defecto.

@item restricted_shell
El int@'erprete establece esta opci@'on si es iniciado en modo restringido
(@pxref{El Int@'erprete Restringido}).  El valor no puede ser cambiado.
Esto no es eliminado cuando los archivos de arranque son ejecutados,
permitiendo a los archivos de arranque descubrir si el int@'erprete est@'a
restringido o no.

@item shift_verbose
Si esto est@'a establecido, la instrucci@'on integrada @code{shift} imprime
un mensaje de error cuando la cuenta de shift excede el n@'umero de
par@'ametros posicionales.

@item sourcepath
Si est@'a habilitada, la instrucci@'on integrada @code{source} usa el valor
de @env{PATH} para encontrar el directorio que contiene el archivo
proporcionado como un argumento.  Est@'a opci@'on est@'a habilitada por
defecto.

@item xpg_echo
Si est@'a habilitada, la instrucci@'on integrada @code{echo} expande por
defecto las secuencias de escape de barras invertidas.

@end table

@noindent
El estado de retorno al listar opciones es cero si todos los
@var{nombres-de-opciones} est@'an habilitados, diferente a cero en caso
contrario.  Al habilitar o deshabilitar opciones, el estado de retorno es
cero a no ser que @var{nombre-de-opci@'on} no sea una opci@'on del
int@'erprete v@'alida.
@end table

@node Instrucciones Integradas Especiales
@section Instrucciones Integradas Especiales
@cindex instrucci@'on integrada especial

Por razones hist@'oricas, el est@'andar @sc{posix} ha clasificado varias
instrucciones integradas como @emph{especiales}.  Cuando Bash se ejecuta en
modo @sc{posix}, las instrucciones integradas especiales difieren de otras
instrucciones integradas en tres aspectos:

@enumerate
@item
Las instrucciones integradas especiales son encontradas antes que las
funciones del int@'erprete durante la b@'usqueda de @'ordenes.

@item
Si una instrucci@'on integrada especial devuelve un estado de error, un
int@'erprete no interactivo se cierra.

@item
Las sentencias de asignaci@'on que preceden a la instrucci@'on se mantienen
en efecto en el entorno del int@'erprete despu@'es de que la instrucci@'on
se complete.
@end enumerate

Cuando Bash no se ejecuta en modo @sc{posix}, estas instrucciones integradas
no se comportan de modo diferente al del resto de instrucciones integradas
de Bash.  El modo @sc{posix} de Bash se describe en @ref{Modo POSIX de
Bash}. 

Estas son las instrucciones integradas especiales @sc{posix}:
@example
@w{break : . continue eval exec exit export readonly return set}
@w{shift trap unset}
@end example

@node Variables del Int@'erprete
@chapter Variables del Int@'erprete

@menu
* Variables del Bourne Shell::  Variables que Bash usa de la misma forma que 
                                  el Bourne Shell.
* Variables de Bash::        Lista de variables que existen en Bash.
@end menu

Este cap@'{@dotless{i}}tulo describe las variables del int@'erprete que usa
Bash.  Bash asigna autom@'aticamente valores predeterminados a varias
variables.

@node Variables del Bourne Shell
@section Variables del Bourne Shell

Bash usa ciertas variables del int@'erprete de la misma forma que el Bourne
shell.  En algunos casos, Bash asigna un valor predeterminado a la variable.

@vtable @code

@item CDPATH
Una lista de directorios separada por dos puntos usada como una ruta de
b@'usqueda para la instrucci@'on integrada @code{cd}.

@item HOME
El directorio personal del usuario actual; el predeterminado para la
instrucci@'on integrada @code{cd}.  El valor de esta variable es usado
tambi@'en por la expansi@'on de virgulilla (@pxref{Expansi@'on de
Virgulilla}).

@item IFS
Una lista de caracteres que separa campos; usada cuando el int@'erprete
divide palabras como partes de expansi@'on.

@item MAIL
Si este par@'ametro est@'a establecido a un nombre de archivo o directorio y
la variable @env{MAILPATH} no est@'a asignada, Bash informa al usuario de la
llegada de correo en el archivo especificado o directorio con formato de
Maildir.

@item MAILPATH
Una lista separada por dos puntos de nombres de archivos que el int@'erprete
comprueba peri@'odicamente en busca de nuevo correo.  Cada entrada de la
lista puede especificar el mensaje que es imprimido cuando llega correo
nuevo en el archivo de correo separando el nombre de archivo del mensaje con
un @samp{?}.  Cuando se usa en el texto del mensaje, @code{$_} se expande al
nombre del actual archivo de correo.

@item OPTARG
El valor del @'ultimo argumento de opci@'on procesado por la instrucci@'on
integrada @code{getopts}.

@item OPTIND
El @'{@dotless{i}}ndice del @'ultimo argumento de opci@'on procesado por la
instrucci@'on integrada @code{getopts}.

@item PATH
Una lista de directorios separada por dos puntos en la que el int@'erprete
busca instrucciones.  Un nombre de directorio de longitud cero (nulo) en el
valor de @code{PATH} indica el directorio actual.  Un nombre de directorio
nulo puede aparecer como dos dos puntos adyacentes o como dos puntos al
final o al principio.

@item PS1
La cadena de prompt primaria.  El valor predeterminado es @samp{\s-\v\$ }.
@xref{Controlando el Prompt}, para la lista completa de secuencias de escape
que son expandidas  antes de que se muestre @env{PS1}.

@item PS2
La cadena de prompt secundaria.  El valor predeterminado es @samp{>}.

@end vtable

@node Variables de Bash
@section Variables de Bash

Estas palabras son establecidas o usadas por Bash, pero otros int@'erpretes
no las tratan normalmente de forma especial.

Unas pocas variables usadas por Bash son descritas en diferentes
cap@'{@dotless{i}}tulos: variables para controlar las herramientas de
control de tareas (@pxref{Variables de Control de Tareas}).

@vtable @code

@item BASH
El nombre de ruta completo usado para ejecutar la actual instancia de Bash.

@item BASHOPTS
Una lista separada por dos puntos de opciones del int@'erprete habilitadas.
Cada palabra en la lista es un argumento v@'alido para la opci@'on
@option{-s} de la instrucci@'on integrada @code{shopt} (@pxref{La
Instrucci@'on Integrada Shopt}).  Las opciones que aparecen en
@env{BASHOPTS} son aquellas que se muestran como @samp{on} por
@samp{shopt}.  Si esta variable est@'a en el entorno cuando Bash se inicia,
cada opci@'on del int@'erprete en la lista ser@'a activada antes de leer
cualquier archivo de inicio.  La variable es de solo lectura.

@item BASHPID
Se expande al ID de proceso del actual proceso de Bash.  Esto difiere de
@code{$$} bajo ciertas circunstancias, como con subint@'erpretes que no
requieren que Bash vuelva a ser inicializado.

@item BASH_ALIASES
Una variable de vector asociativo cuyos miembros corresponden a la lista
interna de aliases como es mantenida por la instrucci@'on integrada
@code{alias}.  (@pxref{Instrucciones Integradas del Bourne Shell}).  Los
elementos a@~nadidos a este vector aparecen en la lista de aliases; sin
embargo, eliminar elementos del vector actualmente no hace que los aliases
sean eliminados de la lista de aliases.  Si @code{BASH_ALIASES} no est@'a
asignada, pierde sus propiedades especiales, incluso si es restablecida
posteriormente.

@item BASH_ARGC
Una variable de vector cuyos valores son el n@'umero de par@'ametros en cada
marco de la actual pila de ejecuci@'on de bash.  El n@'umero de par@'ametros
para la actual subrutina (funci@'on del int@'erprete o guion ejecutado con
@code{.} o @code{source}) est@'a encima en la pila.  Cuando se ejecuta una
subrutina, se empuja el n@'umero de par@'ametros pasado a @code{BASH_ARGC}.
El int@'erprete asigna @code{BASH_ARGC} solo cuando est@'a en modo de
depuraci@'on extendido (vea @ref{La Instrucci@'on Integrada Shopt} para una
descripci@'on de la opci@'on @code{extdebug} para la instrucci@'on integrada
@code{shopt}).

@item BASH_ARGV
Una variable de vector que contiene todos los par@'ametros en la pila de
llamada de ejecuci@'on actual de bash.  El par@'ametro final de la @'ultima
llamada de subrutina est@'a encima en la pila; el primer par@'ametro de la
llamada inicial est@'a abajo.  Cuando se ejecuta una subrutina, se empujan
los par@'ametros proporcionados a @code{BASH_ARGV}.  El int@'erprete asigna
@code{BASH_ARGV} solo cuando est@'a en modo de depuraci@'on extendido (vea
@ref{La Instrucci@'on Integrada Shopt} para una descripci@'on de la opci@'on
@code{extdebug} de la instrucci@'on integrada @code{shopt}).

@item BASH_CMDS
Una variable de vector asociativo cuyos miembros corresponden a la tabla
hash interna de instrucciones como mantiene la instrucci@'on integrada
@code{hash} (@pxref{Instrucciones Integradas del Bourne Shell}).  Los
elementos a@~nadidos a este vector aparecen en la tabla hash; sin embargo,
eliminar elementos de vector actualmente no hace que los nombres de
instrucciones sean eliminados de la tabla hash.  Si @code{BASH_CMDS} no
est@'a asignada, pierde sus propiedades iniciales, incluso si es
posteriormente restablecida.

@item BASH_COMMAND
La instrucci@'on actualmente en ejecuci@'on o a punto de ser ejecutada, a no
ser que el int@'erprete est@'e ejecutando una instrucci@'on como resultado
de una trap, en cuyo caso es la instrucci@'on ejecut@'andose en el momento
de la trap.

@item BASH_COMPAT
Este valor se usa para establecer el nivel de compatibilidad del
int@'erprete.  @xref{La Instrucci@'on Integrada Shopt}, para una
descripci@'on de los varios niveles de compatibilidad y sus efectos.  El
valor puede ser un n@'umero decimal (p. ej., 4,2) o un entero (p. ej., 42)
correspondiente al nivel de compatibilidad deseado.  Si @code{BASH_COMPAT}
est@'a sin asignar o asignado a la cadena vac@'{@dotless{i}}a, el nivel de
compatibilidad se establece al predeterminado para la versi@'on actual.  Si
@code{BASH_COMPAT} est@'a establecida a un valor que no es uno de los
niveles de compatibilidad v@'alidos, el int@'erprete imprime un mensaje de
error y establece el nivel de compatibilidad al predeterminado para la
versi@'on actual.  Los niveles de compatibilidad v@'alidos corresponden a
las opciones de compatibilidad aceptadas por la instrucci@'on integrada
@code{shopt} descritas anteriormente (por ejemplo, @var{compat42} significa
que 4.2 y 42 son valores v@'alidos).  La versi@'on actual es tambi@'en un
valor v@'alido.

@item BASH_ENV
Si esta variable est@'a asignada cuando Bash es llamado para ejecutar un
guion del int@'erprete, su valor se expande y se usa como el nombre de un
archivo de inicio que leer antes de ejecutar el guion.  @xref{Archivos de
Inicio de Bash}.

@item BASH_EXECUTION_STRING
El argumento de instrucci@'on para la opci@'on de llamada @option{-c}.

@item BASH_LINENO
Una variable de vector cuyos miembros son los n@'umeros de
l@'{@dotless{i}}nea en archivos fuentes donde se invoc@'o cada miembro
correspondiente de @var{FUNCNAME}.  @code{$@{BASH_LINENO[$i]@}} es el
n@'umero de l@'{@dotless{i}}nea en el archivo fuente
(@code{$@{BASH_SOURCE[$i+1]@}}) donde @code{$@{FUNCNAME[$i]@}} fue llamado
(o @code{$@{BASH_LINENO[$i-1]@}} si se referencia dentro de otra funci@'on
del int@'erprete).  Use @code{LINENO} para obtener el n@'umero de
l@'{@dotless{i}}nea actual.

@item BASH_LOADABLES_PATH
Una lista de directorios separada por dos puntos en la que el int@'erprete
busca instrucciones integradas din@'amicamente cargables especificadas por
la instrucci@'on @code{enable}.

@item BASH_REMATCH
Una variable de vector cuyos miembros son asignados por el operador binario
@samp{=~} de la instrucci@'on condicional @code{[[} (@pxref{Construcciones
Condicionales}).  El elemento con @'{@dotless{i}}ndice 0 es la porci@'on de
la cadena que coincide la expresi@'on regular entera.  El elemento con
@'{@dotless{i}}ndice @var{n} es la porci@'on de la cadena que coincide con
la subexpresi@'on entre par@'entesis n@'umero @var{n}.  Esta variable es de
solo lectura.

@item BASH_SOURCE
Una variable de vector cuyos miembros son los nombres de archivo fuentes
donde est@'an definidos los correspondientes nombres de funciones del
int@'erprete en la variable de vector @code{FUNCNAME}.  La funci@'on del
int@'erprete @code{$@{FUNCNAME[$i]@}} est@'a definida en el archivo
@code{$@{BASH_SOURCE[$i]@}} y es llamada desde @code{$@{BASH_SOURCE[$i+1]@}}

@item BASH_SUBSHELL
Incrementada en uno con cada subint@'erprete o entorno de subint@'erprete
cuando se empieza a ejecutar el int@'erprete en ese entorno.  El valor
inicial es 0.

@item BASH_VERSINFO
Una variable de vector de solo lectura (@pxref{Vectores})  cuyos miembros
guardan informaci@'on de versi@'on para esta instancia de Bash.  Los valores
asignados a los miembros del vector son los siguientes:

@table @code

@item BASH_VERSINFO[0]
El n@'umero de versi@'on mayor (la @var{publicaci@'on}).

@item BASH_VERSINFO[1]
El n@'umero de versi@'on menor (la @var{versi@'on}).

@item BASH_VERSINFO[2]
El nivel de parche.

@item BASH_VERSINFO[3]
La versi@'on de construcci@'on.

@item BASH_VERSINFO[4]
El estado de publicaci@'on (p. ej., @var{beta1}).

@item BASH_VERSINFO[5]
El valor de @env{MACHTYPE}.
@end table

@item BASH_VERSION
El n@'umero de versi@'on de la actual instancia de Bash.

@item BASH_XTRACEFD
Si est@'a asignado a un entero correspondiente a un descriptor de archivo
v@'alido, Bash escribir@'a el rastreo de salida generado cuando la @samp{set
-x} est@'a habilitado para ese descriptor de archivo.  Esto permite que el
rastreo de salida est@'e separado de mensajes de diagn@'ostico y error.  El
descriptor de archivo se cierra cuando se elimina o se asigna un nuevo valor
a @code{BASH_XTRACEFD}.  Eliminar @code{BASH_XTRACEFD} o asignarlo a la
cadena vac@'{@dotless{i}}a hace que el rastreo de salida sea asignado al
error est@'andar.  Observe que asignar @code{BASH_XTRACEFD} a 2 (el
descriptor de archivo del error est@'andar) y despu@'es eliminarlo har@'a
que sea cerrado el error est@'andar.

@item CHILD_MAX
Establece el n@'umero de valores de estados de salida finalizados que el
int@'erprete puede recordar.  Bash no permitir@'a que este valor sea
reducido por debajo de un m@'{@dotless{i}}nimo mandado por @sc{posix}, y hay
un valor m@'aximo (actualmente 8192) que no puede ser excedido.  El valor
m@'{@dotless{i}}nimo es dependiente del sistema.

@item COLUMNS
Usada por la instrucci@'on @code{select} para determinar la anchura de la
terminal al imprimir listas de selecci@'on.  Autom@'aticamente asignada si
la opci@'on @code{checkwinsize} est@'a activada (@pxref{La Instrucci@'on
Integrada Shopt}), o en un int@'erprete interactivo al recibir una
@code{SIGWINCH}.

@item COMP_CWORD
Un indice a @env{$@{COMP_WORDS@}} de la palabra que contiene la posici@'on
actual del cursor.  Esta variable est@'a disponible solo en funciones del
int@'erprete llamadas por las herramientas de compleci@'on programables
(@pxref{Compleci@'on Programable}).

@item COMP_LINE
La l@'{@dotless{i}}nea de orden actual.  Esta variable est@'a disponible
solo en funciones del int@'erprete e instrucciones externas llamadas por las
herramientas de compleci@'on programables (@pxref{Compleci@'on
Programable}).

@item COMP_POINT
El @'{@dotless{i}}ndice de la posici@'on actual del cursor relativa al
comienzo de la instrucci@'on actual.  Si la posici@'on actual del cursor
est@'a al final de la instrucci@'on actual, el valor de esta variable es
igual a @code{$@{#COMP_LINE@}}.  Esta variable est@'a disponible solo en
funciones del int@'erprete y instrucciones externas llamadas por las
herramientas de compleci@'on programables (@pxref{Compleci@'on
Programable}).

@item COMP_TYPE
Asignada a un valor entero correspondiente al tipo de compleci@'on intentado
que hizo que una funci@'on de compleci@'on fuera llamada: @var{TAB}, para
compleci@'on normal; @samp{?}, para listar compleciones despu@'es de
sucesivas tabulaciones, @samp{!}, para listar alternativas a compleci@'on
parcial de palabra, @samp{@@}, para listar compleciones si la palabra no se
modifica; o @samp{%}, para compleci@'on de men@'u.  Esta variable est@'a
disponible solo en funciones del int@'erprete e instrucciones externas
llamadas por las herramientas de compleci@'on programables
(@pxref{Compleci@'on Programable}).

@item COMP_KEY
La tecla (o tecla final de una secuencia de teclas) usada para llamar a la
actual funci@'on de compleci@'on.

@item COMP_WORDBREAKS
El conjunto de caracteres que la biblioteca Readline trata como separadores
de palabra al realizar la compleci@'on de palabra.  Si
@code{COMP_WORDBREAKS} est@'a sin asignar, pierde sus propiedades
especiales, incluso si es restablecida posteriormente.

@item COMP_WORDS
Una variable de vector que consta de las palabras individuales en la actual
l@'{@dotless{i}}nea de @'ordenes.  La l@'{@dotless{i}}nea se divide en
palabras como Readline la dividir@'{@dotless{i}}a, usando
@code{COMP_WORDBREAKS} como se describe anteriormente.  Esta variable est@'a
disponible solo en funciones del int@'erprete llamadas por las herramientas
de compleci@'on programables (@pxref{Compleci@'on Programable}).

@item COMPREPLY
Una variable de vector de la que Bash lee las posibles compleciones
generadas por una funci@'on del int@'erprete llamada por la herramienta de
compleci@'on programable (@pxref{Compleci@'on Programable}).  Cada elemento
del vector contiene una posible compleci@'on.

@item COPROC
Una variable de vector creada para alojar los descriptores de archivo para
salida de y entrada para un coproceso sin nombre (@pxref{Coprocesos}).

@item DIRSTACK
Una variable de vector que contiene los contenidos actuales de la pila de
directorios.  Los directorios aparecen en la pila en el orden en que son
mostrados por la instrucci@'on integrada @code{dirs}.  Asignar a miembros de
esta variable de vector puede usarse para modificar directorios ya en la
pila, pero las instrucciones integradas @code{pushd} y @code{popd} deben ser
usadas para a@~nadir y eliminar directorios.  La asignaci@'on a esta
variable no cambiar@'a el directorio actual.  Si @env{DIRSTACK} est@'a sin
asignar, pierde sus propiedades especiales, incluso si es restablecida
posteriormente.

@item EMACS
Si Bash encuentra esta variable en el entorno cuando el int@'erprete se
inicia con el valor @samp{t}, asume que el int@'erprete est@'a corriendo en
un b@'ufer de int@'erprete de Emacs y deshabilita la edici@'on de
l@'{@dotless{i}}nea.

@item ENV
Similar a @code{BASH_ENV}; usada cuando el int@'erprete es llamado en Modo
@sc{posix} (@pxref{Modo POSIX de Bash}).

@item EUID
El id num@'erico efectivo de usuario del actual usuario.  Esta variable es
de solo lectura.

@item EXECIGNORE
Una lista de patrones separada por dos puntos (@pxref{Coincidencia de
Patrones})  que define la lista de nombres de archivo que ser@'an ignorados
por la b@'usqueda de instrucciones usando @code{PATH}.  Los archivos cuyos
nombres de ruta completos coinciden con uno de estos patrones no se
consideran archivos ejecutables para los prop@'ositos de compleci@'on y
ejecuci@'on mediante b@'usqueda de @var{PATH}.  Esto no afecta el
comportamiento de las instrucciones @code{[}, @code{test} y @code{[[}.  Los
nombres de ruta completos en la tabla hash de instrucciones no est@'an
sujetos a @code{EXECIGNORE}.  Use esta variable para ignorar los archivos de
librer@'{@dotless{i}}a compartidos que tiene asignado el bit de ejecuci@'on,
pero no son archivos ejecutables.  La coincidencia de patrones hace honor al
ajuste de la opci@'on del int@'erprete @code{extglob}.

@item FCEDIT
El editor usado como predeterminado por la opci@'on @option{-e} de la
instrucci@'on integrada @code{fc}.

@item FIGNORE
Una lista separada de sufijos que ignorar al realizar la compleci@'on de
nombre de archivo.  Un nombre de archivo cuyo sufijo coincide con una de las
entradas en @env{FIGIGNORE} es excluido de la lista de nombres de archivo
completados.  Un valor de muestra es @samp{.o:~}.

@item FUNCNAME
Una variable de vector que contiene los nombres de todas las funciones del
int@'erprete actualmente en la pila de ejecuci@'on de llamadas.  El elemento
con @'{@dotless{i}}ndice 0 es el nombre de cualquier funci@'on del
int@'erprete en ejecuci@'on actualmente.  El elemento m@'as al fondo (aquel
con el @'{@dotless{i}}ndice m@'as alto)  es @code{"main"}.  Esta variable
solo existe cuando una funci@'on del int@'erprete se est@'a ejecutando.  Las
asignaciones a @env{FUNCNAME} no tienen efecto.  Si @env{FUNCNAME} est@'a
sin asignar, pierde sus propiedades especiales, incluso si es restablecida
posteriormente.

Esta variable puede ser usada con @code{BASH_LINENO} y @code{BASH_SOURCE}.
Cada elemento de @code{FUNCNAME} tiene elementos correspondientes en
@code{BASH_LINENO} y @code{BASH_SOURCE} para describir la pila de llamadas.
Por ejemplo, @code{$@{FUNCNAME[$i]@}} fue llamada del archivo
@code{$@{BASH_SOURCE[$i+1]@}} en el n@'umero de l@'{@dotless{i}}nea
@code{$@{BASH_LINENO[$i]@}}.  La instrucci@'on integrada @code{caller}
muestra la actual pila de llamadas usando esta informaci@'on.

@item FUNCNEST
Si est@'a asignada a un valor num@'erico mayor que 0, define un nivel de
anidamiento de funci@'on m@'aximo.  Las llamadas de funci@'on que excedan
este l@'{@dotless{i}}mite har@'an que se aborte la instrucci@'on actual.

@item GLOBIGNORE
Una lista de patrones separada por dos puntos que define el n@'umero de
nombres de archivo que deben ser ignorados por la expansi@'on de nombre de
archivo.  Si un nombre de archivo coincidido por un patr@'on de expansi@'on
de nombre de archivo tambi@'en coincide con uno de los patrones en
@env{GLOBIGNORE}, es eliminado de la lista de coincidencias.  Los patrones
coincidentes hacen honor al ajuste de la opci@'on del int@'erprete
@code{extglob}.

@item GROUPS
Una variable de vector que contiene la lista de grupos de los cuales el
usuario actual es miembro.  Las asignaciones a @env{GROUPS} no tienen
efecto.  Si @env{GROUPS} es eliminada, pierde sus propiedades especiales,
incluso si es restablecida posteriormente.

@item histchars
Hasta tres caracteres que controlan la expansi@'on de historial,
sustituci@'on r@'apida y simbolizaci@'on (@pxref{Interacci@'on con el
Historial}).  El primer car@'acter es el car@'acter de @var{expansi@'on de
historial}, es decir, el car@'acter que representa el inicio de una
expansi@'on de historial, normalmente @samp{!}.  El segundo car@'acter es el
car@'acter que representa `sustituci@'on r@'apida cuando es visto como el
primer car@'acter en la l@'{@dotless{i}}nea, normalmente @samp{^}.  El
tercer car@'acter opcional es el car@'acter que indica que el resto de la
l@'{@dotless{i}}nea es un comentario cuando se encuentra como el primer
car@'acter de una palabra, normalmente @samp{#}.  El car@'acter de
comentario de historial hace que sea saltada la sustituci@'on de historial
para el resto de palabras en la l@'{@dotless{i}}nea.  No necesariamente hace
que el analizador del int@'erprete trate el resto de la l@'{@dotless{i}}nea
como un comentario.

@item HISTCMD
El n@'umero de historial, o @'{@dotless{i}}ndice en la lista de historial,
de la instrucci@'on actual.  Si @env{HISTCMD} est@'a sin asignar, pierde sus
propiedades especiales, incluso si se restablece posteriormente.

@item HISTCONTROL
Una lista de valores separada por dos puntos que controla c@'omo se guardan
las instrucciones en la lista de historial.  Si la lista de valores incluye
@samp{ignorespace}, las l@'{@dotless{i}}neas que empiezan por un car@'acter
de espacio no se guardan en la lista del historial.  Un valor de
@samp{ignoredups} hace que las l@'{@dotless{i}}neas que coinciden con la
entrada de historial anterior no sean guardadas.  Un valor de
@samp{ignoreboth} es una abreviatura de @samp{ignorespace} e
@samp{ignoredups}.  Un valor de @samp{erasedups} hace que todas las
l@'{@dotless{i}}neas anteriores que coinciden con la l@'{@dotless{i}}nea
actual sean eliminadas de la lista del historial antes de que la
l@'{@dotless{i}}nea sea guardada.  Cualquier valor fuera de la lista
anterior se ignora.  Si @env{HISTCONTROL} est@'a sin asignar o no incluye un
valor v@'alido, todas las l@'{@dotless{i}}neas le@'{@dotless{i}}das por el
analizador del int@'erprete son guardadas en la lista del historial, sujetas
al valor de @env{HISTIGNORE}.  La segunda y posteriores l@'{@dotless{i}}neas
de una instrucci@'on multil@'{@dotless{i}}nea compuesta no son probadas y se
a@~naden al historial sin importar el valor de @env{HISTCONTROL}.

@item HISTFILE
El nombre del archivo al cual se guarda el historial de instrucciones.  El
valor predeterminado es @file{~/.bash_history}.

@item HISTFILESIZE
El m@'aximo n@'umero de l@'{@dotless{i}}neas contenidas en el archivo de
historial.  Cuando se asigna a esta variable un valor, el archivo de
historial es recortado, si es necesario, para contener no m@'as del n@'umero
de l@'{@dotless{i}}neas eliminando las entradas m@'as antiguas.  El archivo
de historial tambi@'en es recortado a este tama@~no despu@'es de escribirlo
cuando finaliza un int@'erprete.  Si el valor es 0, el archivo de historial
se recorta a tama@~no cero.  Las valores no num@'ericos y valores
num@'ericos menores de cero inhiben el recorte.  El int@'erprete asigna el
valor predeterminado al valor de @env{HISTSIZE} despu@'es de leer los
archivos de inicializaci@'on.

@item HISTIGNORE
Una lista de patrones separada por dos puntos usada para decidir qu@'e
l@'{@dotless{i}}neas de instrucci@'on deber@'{@dotless{i}}an guardarse en la
lista del historial.  Cada patr@'on es anclado al principio de la
l@'{@dotless{i}}nea y debe coincidir con la l@'{@dotless{i}}nea completa (no
se a@~nade un @samp{*} impl@'{@dotless{i}}cito).  Cada patr@'on se comprueba
contra la l@'{@dotless{i}}nea despu@'es de que las comprobaciones
especificadas por @env{HISTCONTROL} sean aplicadas.  Adem@'as de los
caracteres normales de coincidencia de patrones del int@'erprete, @samp{&}
coincide con la anterior l@'{@dotless{i}}nea de historial.  @samp{&} puede
ser escapada usando una barra invertida; la barra invertida se elimina antes
de intentar una coincidencia.  La segunda y las posteriores
l@'{@dotless{i}}neas de una instrucci@'on compuesta multil@'{@dotless{i}}nea
no son comprobadas, y se a@~naden al historial sin importar el valor de
@env{HISTIGNORE}.  El patr@'on que coincide hace honor al ajuste de la
opci@'on del int@'erprete @code{extglob}.

@env{HISTIGNORE} subsume la funci@'on de @env{HISTCONTROL}.  Un patr@'on de
@samp{&} es id@'entico a @code{ignoredups}, y un patr@'on de @samp{[ ]*} es
id@'entico a @code{ignorespace}.  Combinar estos dos patrones,
separ@'andolos con dos puntos, proporciona la funcionalidad de
@code{ignoreboth}. 

@item HISTSIZE
El m@'aximo n@'umero de instrucciones que recordar en la lista del
historial.  Si el valor es 0, las instrucciones no se guardan en la lista
del historial.  Los valores num@'ericos menores que cero resultan en cada
instrucci@'on guard@'andose en la lista del historial (no hay
l@'{@dotless{i}}mite).  El int@'erprete establece el valor predeterminado a
500 despu@'es de leer los archivos de inicio.

@item HISTTIMEFORMAT
Si esta variable est@'a asignada y no es nula, su valor se usa como una
cadena de formato para @var{strftime} para imprimir la marca temporal
asociada con cada entrada de historial mostrada por la instrucci@'on
integrada @code{history}.  Si est@'a asignada esta variable, las marcas de
tiempo se escriben al archivo de historial de forma que puedan ser
preservadas entre sesiones del int@'erprete.  Esto usa el car@'acter de
comentario de historial para distinguir marcas de tiempo de otras
l@'{@dotless{i}}neas de historial.

@item HOSTFILE
Contiene el nombre de un archivo en el mismo formato que @file{/etc/hosts}
que deber@'{@dotless{i}}a ser le@'{@dotless{i}}do cuando el int@'erprete
necesita completar un nombre de anfitri@'on.  La lista de posibles
compleciones de nombre de anfitri@'on puede ser cambiada mientra el
int@'erprete se ejecuta; la siguiente vez que se intente la compleci@'on de
nombre de anfitri@'on despu@'es de que se cambie el valor, Bash a@~nade los
contenidos del nuevo archivo a la lista existente.  Si @env{HOSTFILE} est@'a
asignada pero no tiene valor o no nombra un archivo legible, Bash trata de
leer @file{/etc/hosts} para obtener la lista de posibles compleciones de
nombre de anfitri@'on.  Cuando @env{HOSTFILE} est@'a sin asignar, se limpia
la lista de nombre de anfitri@'on.

@item HOSTNAME
El nombre del anfitri@'on actual.

@item HOSTTYPE
Una cadena que describe la m@'aquina en que se est@'a ejecutando Bash.

@item IGNOREEOF
Controla la acci@'on del int@'erprete al recibir un car@'acter @code{EOF}
como la @'unica entrada.  Si est@'a asignado, el valor denota el n@'umero de
caracteres @code{EOF} consecutivos que pueden ser le@'{@dotless{i}}dos como
el primer car@'acter de una l@'{@dotless{i}}nea de entrada antes de que
finalice el int@'erprete.  Si la variable existe pero no tiene un valor
num@'erico (o no tiene valor), entonces el predeterminado es 10.  Si la
variable no existe, el @code{EOF} significa el final de la entrada para el
int@'erprete.  Esto solo est@'a en efecto para int@'erpretes interactivos.

@item INPUTRC
El nombre del archivo de inicializaci@'on Readline, que sobrescribe el valor
predeterminado de @file{~/.inputrc}.

@item LANG
Usada para determinar la categor@'{@dotless{i}}a de configuraci@'on regional
para cualquier categor@'{@dotless{i}}a no especif@'{@dotless{i}}camente
seleccionada con una variable que empieza por @code{LC_}.

@item LC_ALL
Esta variable sobrescribe el valor de @env{LANG} y cualquier otra variable
@code{LC_} que especifica una categor@'{@dotless{i}}a de configuraci@'on
regional.

@item LC_COLLATE
Esta variable determina la ordenaci@'on usada para ordenar los resultados de
la expansi@'on de nombre de archivo, y determina el comportamiento de las
expresiones de rango, clases de equivalencia y secuencias de ordenaci@'on
dentro de la expansi@'on de nombre de archivo y coincidencia de patrones
(@pxref{Expansi@'on de Nombre de Archivo}).

@item LC_CTYPE
Esta variable determina la interpretaci@'on de caracteres y el
comportamiento de las clases de caracteres dentro de una expansi@'on de
nombre de archivo y coincidencia de patrones (@pxref{Expansi@'on de Nombre
de Archivo}).

@item LC_MESSAGES
Esta variable determina la configuraci@'on regional usada para traducir
cadenas entre comillas dobles precedidas por un @samp{$}
(@pxref{Traducci@'on de Localizaci@'on}).

@item LC_NUMERIC
Esta variable determina la categor@'{@dotless{i}}a de configuraci@'on
regional para el formato de n@'umeros.

@item LC_TIME
Esta variable determina la categor@'{@dotless{i}}a de configuraci@'on
regional usada para el formato de fecha y tiempo.

@item LINENO
El n@'umero de l@'{@dotless{i}}nea en el guion o funci@'on del int@'erprete
actualmente en ejecuci@'on.

@item LINES
Usada por la instrucci@'on @code{select} para determinar la longitud de
columna para imprimir listas de selecci@'on.  Autom@'aticamente asignada si
la opci@'on @code{checkwinsize} est@'a activada (@pxref{La Instrucci@'on
Integrada Shopt}), o en un int@'erprete interactivo al recibir una
@code{SIGWINCH}.

@item MACHTYPE
Una cadena que describe completamente el tipo de sistema en que Bash est@'a
ejecut@'andose, en el formato est@'andar @sc{gnu} @var{ucp-empresa-sistema}.

@item MAILCHECK
La frecuencia (en segundos) con la que el int@'erprete debe comprobar el
correo en los archivos especificados en las variables @env{MAILPATH} o
@env{MAIL}.  La predeterminada es 60 segundos.  Cuando es hora de comprobar
el correo, el int@'erprete lo hace antes de mostrar el prompt primario.  Si
esta variable est@'a sin asignar o asignada a un valor que no es un n@'umero
mayor o igual a cero, el int@'erprete deshabilita la comprobaci@'on de
correo.

@item MAPFILE
Una variable de vector creada para contener el texto le@'{@dotless{i}}do por
la instrucci@'on integrada @code{mapfile} cuando no se proporciona nombre de
variable.

@item OLDPWD
El directorio de trabajo anterior seg@'un se establece por la instrucci@'on
integrada @code{cd}.

@item OPTERR
Si asignada al valor 1, Bash muestra mensajes de error generados por la
instrucci@'on integrada @code{getopts}.

@item OSTYPE
Una cadena que describe el sistema operativo en que Bash se est@'a
ejecutando.

@item PIPESTATUS
Una variable de vector (@pxref{Vectores})  que contiene una lista de los
valores de estado de salida de los procesos en la tuber@'{@dotless{i}}a en
primer plano m@'as recientemente ejecutada (que podr@'{@dotless{i}}a
contener una sola instrucci@'on).

@item POSIXLY_CORRECT
Si esta variable est@'a en el entorno cuando Bash se inicia, el int@'erprete
entra al modo @sc{posix} (@pxref{Modo POSIX de Bash}) antes de leer los
archivos de inicio, como si se hubiera proporcionado la opci@'on de llamada
@option{--posix}.  Si se asigna cuando el int@'erprete est@'a en
ejecuci@'on, Bash activa el modo @sc{posix}, como si la instrucci@'on
@example
@code{set -o posix}
@end example
@noindent
hubiera sido ejecutada.  

@item PPID
El @sc{id} de proceso del proceso padre del int@'erprete.  Esta variable es
de solo lectura.

@item PROMPT_COMMAND
Si est@'a asignada, el valor se interpreta como una instrucci@'on que
ejecutar antes de imprimir cada prompt primario (@env{$PS1}).

@item PROMPT_DIRTRIM
Si est@'a asignada a un n@'umero mayor que cero, el valor se usa como el
n@'umero de componentes finales de directorio que retener al expandir las
cadenas de escape de prompt @code{\w} y @code{\W} (@pxref{Controlando el
Prompt}).  Los caracteres eliminados son reemplazados por puntos
suspensivos.

@item PS0
El valor de este par@'ametro es expandido como @var{PS1} y mostrado por
int@'erpretes interactivos despu@'es de leer una instrucci@'on y antes de
que la instrucci@'on sea ejecutada.

@item PS3
El valor de esta variable se usa como el prompt para la instrucci@'on
@code{select}.  Si no est@'a asignada esta variable, la instrucci@'on
@code{select} usa el prompt @samp{#? }.

@item PS4
El valor es el prompt imprimido antes de que la l@'{@dotless{i}}nea de
instrucci@'on sea repetida cuando la opci@'on @option{-x} est@'e habilitada
(@pxref{La Instrucci@'on Integrada Set}).  El primer car@'acter de @env{PS4}
es remplazado m@'ultiples veces, seg@'un sea necesario, para indicar
m@'ultiples niveles de indirecci@'on.  El predeterminado es @samp{+}.

@item PWD
El directorio de trabajo actual seg@'un se establece por la instrucci@'on
integrada @code{cd}.

@item RANDOM
Cada vez que se referencia a este par@'ametro, es generado un entero
aleatorio entre 0 y 32767.  Asignar un valor a esta variable crea la semilla
del generador de n@'umeros aleatorio.

@item READLINE_LINE
Los contenidos del b@'ufer de l@'{@dotless{i}}nea de Readline, para uso con
@samp{bind -x} (@pxref{Instrucciones Integradas de Bash}).

@item READLINE_POINT
La posici@'on del punto de inserci@'on en el b@'ufer de l@'{@dotless{i}}nea
de Readline, para uso con @samp{bind -x} (@pxref{Instrucciones Integradas de
Bash}).

@item REPLY
La variable predeterminada para la instrucci@'on integrada @code{read}.

@item SECONDS
Esta variable se expande al n@'umero de segundos desde que se inici@'o el
int@'erprete.  Asignar a esta variable restablece la cuenta al valor
asignado, y el valor expandido se convierte en el valor asignado m@'as el
n@'umero de segundos desde la asignaci@'on.

@item SHELL
El nombre de ruta completo para el int@'erprete se mantiene en esta variable
de entorno.  Si no est@'a asignada cuando el int@'erprete se inicia, Bash la
asignar@'a al nombre de ruta completo del actual int@'erprete de acceso del
usuario.

@item SHELLOPTS
Una lista de opciones del int@'erprete habilitadas separada por dos puntos.
Cada palabra en la lista es un argumento v@'alido para la opci@'on
@option{-o} de la instrucci@'on integrada @code{set} (@pxref{La
Instrucci@'on Integrada Set}).  Las opciones que aparecen en @env{SHELLOPTS}
son aquellas descritas con @samp{on} por @samp{set -o}.  Si esta variable
est@'a en el entorno cuando Bash se inicia, cada opci@'on del int@'erprete
en la lista ser@'a activada antes de leer los archivos de inicio.  Esta
variable es de solo lectura.

@item SHLVL
Incrementada en uno cada vez que se inicia una nueva instancia de Bash.
Esto est@'a pensado para ser un contador de la profundidad en que sus
int@'erpretes de Bash est@'an anidados.

@item TIMEFORMAT
El valor de este par@'ametro se usa como una cadena de formato que
especifica c@'omo deber@'{@dotless{i}}a mostrarse la informaci@'on temporal
para tuber@'{@dotless{i}}as prefijadas con la palabra reservada
@code{time}.  El car@'acter @samp{%} introduce una secuencia de escape que
se expande a un valor temporal u otra informaci@'on.  Las secuencias de
escape y sus significados son los siguientes; las llaves denotan partes
opcionales. 

@table @code

@item %%
Un @samp{%} literal.

@item %[@var{p}][l]R
El tiempo transcurrido en segundos. 

@item %[@var{p}][l]U
El n@'umero de segundos de UCP pasados en modo usuario. 

@item %[@var{p}][l]S
El n@'umero de segundos de UCP pasados en modo sistema. 

@item %P
El porcentaje de UCP, computado como (%U + %S) / %R. 
@end table

La @var{p} opcional es un d@'{@dotless{i}}gito que especifica la
precisi@'on, el n@'umero de d@'{@dotless{i}}gitos fraccionales despu@'es de
la coma decimal.  Un valor de 0 hace que no se muestre ninguna coma decimal
o fracci@'on.  Como mucho pueden especificarse tres lugares tras la coma
decimal; valores de @var{p} mayores que 3 son cambiados a 3.  Si no se
especifica @var{p}, se usa el valor 3. 

El @code{l} opcional especifica un formato m@'as largo, incluyendo minutos,
de la forma @var{MM}m@var{SS}.@var{FF}s.  El valor de @var{p} determina si
la fracci@'on es incluida o no. 

Si esta variable no est@'a asignada, Bash act@'ua como si tuviera el valor
@example
@code{$'\nreal\t%3lR\nuser\t%3lU\nsys\t%3lS'}
@end example
Si el valor es nulo, no se muestra informaci@'on de tiempo.  Se a@~nade una
nueva l@'{@dotless{i}}nea final cuando se muestra la cadena de formato.

@item TMOUT
Si est@'a asignada a un valor mayor que cero, @code{TMOUT} se trata como el
tiempo l@'{@dotless{i}}mite predeterminado para la instrucci@'on integrada
@code{read} (@pxref{Instrucciones Integradas de Bash}).  La instrucci@'on
@code{select} (@pxref{Construcciones Condicionales}) termina si la entrada
no llega despu@'es de @code{TMOUT} segundos cuando la entrada viene de una
terminal.

En un int@'erprete interactivo, el valor se interpreta como el n@'umero de
segundos que esperar a una l@'{@dotless{i}}nea de entrada despu@'es de
generar el prompt primario.  Bash termina despu@'es de esperar ese n@'umero
de segundos si no llega una l@'{@dotless{i}}nea de entrada completa.

@item TMPDIR
Si est@'a asignada, Bash usa su valor como el nombre de un directorio en el
que Bash crea archivos temporales para que use el int@'erprete.

@item UID
El id num@'erico real de usuario del usuario actual.  Esta variable es de
solo lectura.

@end vtable

@node Funcionalidades de Bash
@chapter Funcionalidades de Bash

Este cap@'{@dotless{i}}tulo describe funcionalidades @'unicas de Bash.

@menu
* Llamando a Bash::          Opciones de l@'{@dotless{i}}nea de @'ordenes 
                               que puede darle a Bash.
* Archivos de Inicio de Bash::  Cu@'ando y d@'onde Bash ejecuta guiones.
* Int@'erpretes Interactivos::  Qu@'e es un int@'erprete interactivo.
* Expresiones Condicionales de Bash::  Primitivos usados para componer 
                                         expresiones para la instrucci@'on 
                                         integrada@code{test}.
* Aritm@'etica del Int@'erprete::  Aritm@'etica en variables del 
                                     int@'erprete.
* Aliases::                  Sustituyendo una instrucci@'on con otra.
* Vectores::                 Variables de Vectores.
* La Pila de Directorios::   Historia de directorios visitados.
* Controlando el Prompt::    Personalizando las distintas cadenas de prompt.
* El Int@'erprete Restringido::  Un modo m@'as controlado de ejecuci@'on del 
                                   int@'erprete.
* Modo POSIX de Bash::       Hacer que Bash se comporte m@'as cerca de 
                               c@'omo especifica el est@'andarPOSIX.
@end menu

@node Llamando a Bash
@section Llamando a Bash

@example
bash [opci@'on-larga] [-ir] [-abefhkmnptuvxdBCDHP] [-o @var{opci@'on}]
     [-O @var{opci@'on_shopt}] [@var{argumento} @dots{}]
bash [opci@'on-larga] [-abefhkmnptuvxdBCDHP] [-o @var{opci@'on}]
     [-O @var{opci@'on_shopt}] -c @var{string} [@var{argumento} @dots{}]
bash [opci@'on-larga] -s [-abefhkmnptuvxdBCDHP] [-o @var{opci@'on}]
     [-O @var{opci@'on_shopt}] [@var{argumento} @dots{}]
@end example

Todas las opciones de un car@'acter usadas por la instrucci@'on integrada
@code{set} (@pxref{La Instrucci@'on Integrada Set}) pueden ser usadas como
opciones cuando se llama al int@'erprete.  Adem@'as, hay varias opciones de
m@'ultiples caracteres que puede usar.  Estas opciones tienen que aparecer
en la l@'{@dotless{i}}nea de @'ordenes antes de las opciones de un
car@'acter para ser reconocidas. 

@table @code
@item --debugger
Se encarga de que el perfil del depurador se ejecute antes de que se inicie
el int@'erprete.  Activa el modo de depuraci@'on extendido (vea @ref{La
Instrucci@'on Integrada Shopt} para una descripci@'on de la opci@'on
@code{extdebug} para la instrucci@'on integrada @code{shopt}).

@item --dump-po-strings
Se imprime una lista de todas las cadenas entre comillas dobles en la salida
est@'andar en el formato de archivo PO («portable object» en ingl@'es,
objeto portable) de @sc{gnu} @code{gettext}.  Equivalente a @option{-D}
excepto por el formato de salida.

@item --dump-strings
Equivalente a @option{-D}.

@item --help
Muestra un mensaje de uso en la salida est@'andar y finaliza exitosamente.

@item --init-file @var{nombre-de-archivo}
@itemx --rcfile @var{nombre-de-archivo}
Ejecuta instrucciones de @var{nombre-de-archivo} (en vez de
@file{~/.bashrc})  en un int@'erprete interactivo.

@item --login
Equivalente a @option{-l}.

@item --noediting
No usa la biblioteca @sc{gnu} Readline (@pxref{Edici@'on en
L@'{@dotless{i}}nea de @'Ordenes})  para leer l@'{@dotless{i}}neas de
@'ordenes cuando el int@'erprete est@'a inactivo.

@item --noprofile
No carga el archivo de inicio de alcance global @file{/etc/profile} o
cualquiera de los archivos de inicializaci@'on personales
@file{~/.bash_profile}, @file{~/.bash_login} o @file{~/.profile} cuando Bash
es llamado como un int@'erprete de acceso.

@item --norc
No lee el archivo de inicializaci@'on @file{~/.bashrc} en un int@'erprete
interactivo.  Esto est@'a activado por defecto si se llama al int@'erprete
como @code{sh}.

@item --posix
Cambia el comportamiento de Bash donde la operaci@'on por defecto difiera
del est@'andar @sc{posix} para cumplir el est@'andar.  Esto est@'a pensado
para hacer que Bash se comporte como un componente preciso de ese
est@'andar.  @xref{Modo POSIX de Bash}, para una descripci@'on del modo
@sc{posix} de Bash.

@item --restricted
Vuelve el int@'erprete un int@'erprete restringido (@pxref{El Int@'erprete
Restringido}).

@item --verbose
Equivalente a @option{-v}.  Imprime las l@'{@dotless{i}}neas de entrada del
int@'erprete seg@'un son le@'{@dotless{i}}das.

@item --version
Muestra la informaci@'on de la versi@'on para esta instancia de Bash en la
salida est@'andar y finaliza exitosamente.
@end table

Hay varias opciones de un solo car@'acter que pueden ser proporcionadas
durante la llamada que no est@'an disponibles con la instrucci@'on integrada
@code{set}.

@table @code
@item -c
Lee y ejecuta instrucciones del primer argumento no opci@'on
@var{cadena_de_instrucci@'on}, y finaliza.  Si hay argumentos despu@'es de
@var{cadena_de_instrucci@'on}, se asigna el primer argumento a @code{$0} y
se asignan los argumentos restantes a los par@'ametros posicionales.  La
asignaci@'on a @code{$0} establece el nombre del int@'erprete, que se usa en
advertencias y mensajes de error.

@item -i
Obliga al int@'erprete a ejecutarse interactivamente.  Los int@'erpretes
interactivos se describen en @ref{Int@'erpretes Interactivos}.

@item -l
Hace que este int@'erprete act@'ue como si se hubiera llamado directamente
mediante acceso.  Cuando el int@'erprete es interactivo, esto es equivalente
a iniciar un int@'erprete de acceso con @samp{exec -l bash}.  Cuando el
int@'erprete no es interativo, ser@'an ejecutados los archivos de inicio del
int@'erprete de acceso.  @samp{exec bash -l} o @samp{exec bash --login}
reemplazar@'an el int@'erprete actual con un int@'erprete de acceso de
Bash.  @xref{Archivos de Inicio de Bash}, para una descripci@'on del
comportamiento especial de un int@'erprete de acceso.

@item -r
Vuelve el int@'erprete un int@'erprete restringido (@pxref{El Int@'erprete
Restringido}).

@item -s
Si est@'a presente esta opci@'on, o si no quedan argumentos tras el
procesado de opciones, las instrucciones son le@'{@dotless{i}}das de la
entrada est@'andar.  Esta opci@'on permite que sean establecidos los
par@'ametros posicionales al llamar a un int@'erprete interactivo.

@item -D
Se imprime una lista de todas las cadenas entre comillas dobles a la entrada
est@'andar.  Estas son las cadenas que est@'an sujetas a la traducci@'on de
idioma cuando la configuraci@'on regional actual no es @code{C} o
@code{POSIX} (@pxref{Traducci@'on de Localizaci@'on}).  Esto implica la
opci@'on @option{-n}; no se ejecutar@'an instrucciones.

@item [-+]O [@var{opci@'on_shopt}]
@var{opci@'on_shopt} es una de las opciones del int@'erprete aceptadas
por la instrucci@'on integrada @code{shopt} (@pxref{La Instrucci@'on
Integrada Shopt}).  Si est@'a presente @var{opci@'on_shopt},
@option{-O} habilita el valor de esa opci@'on; @option{+O} lo
deshabilita.  Si no se proporciona @var{opci@'on_shopt}, se imprimen
los nombres y valores de las opciones del int@'erprete aceptadas por
@code{shopt} en la salida est@'andar.  Si la opci@'on de llamada es
@option{+O}, la salida se muestra en un formato que puede ser
reutilizado como entrada.

@item --
Un @code{--} se@~nala el fin de opciones y deshabilita el posterior
procesado de opciones.  Los argumentos despu@'es del @code{--} son tratados
como nombres de archivos y argumentos.
@end table

@cindex int@'erprete de acceso
Un int@'erprete de @emph{acceso} es uno cuyo primer car@'acter del argumento
cero es @samp{-}, o uno llamado con la opci@'on @option{--login}.

@cindex int@'erprete interactivo
Un int@'erprete @emph{interactivo} es uno iniciado sin argumentos que no son
opciones, a no ser que se especifique @option{-s}, sin especificar la
opci@'on @option{-c} y cuyas entrada y salida est@'an ambas conectadas a
terminales (como determina @code{isatty(3)}), o uno iniciado con la opci@'on
@option{-i}.  @xref{Int@'erpretes Interactivos}, para m@'as informaci@'on.

Si quedan argumentos despu@'es del procesamiento de opciones y ni la
opci@'on @option{-c} ni la @option{-s} han sido proporcionadas, se asume que
el primer argumento es el nombre de un archivo que contiene instrucciones
del int@'erprete (@pxref{Guiones del Int@'erprete}).  Cuando Bash es llamado
de esta forma, @code{$0} es asignado al nombre del archivo, y los
par@'ametros posicionales son establecidos a los argumentos restantes.  Bash
lee y ejecuta instrucciones de este archivo, despu@'es se cierra.  El estado
de salida de Bash es el estado de salida de la @'ultima instrucci@'on
ejecutada en el guion.  Si no se ejecutan instrucciones, el estado de salida
es 0.

@node Archivos de Inicio de Bash
@section Archivos de Inicio de Bash
@cindex archivos de inicio

Esta secci@'on describe c@'omo ejecuta Bash sus archivos de inicio.  Si
cualquiera de los archivos existe pero no puede ser le@'{@dotless{i}}do,
Bash notifica un error.  Las virgulillas se expanden en nombres de archivos
como se describi@'o anteriormente en Expansi@'on de Virgulilla
(@pxref{Expansi@'on de Virgulilla}).

Los int@'erpretes interactivos se describen en @ref{Int@'erpretes
Interactivos}.

@subsubheading Llamado como un int@'erprete de acceso interactivo, o con @option{--login}

Cuando Bash es llamado como un int@'erprete de acceso interactivo o como un
int@'erprete no interactivo con la opci@'on @option{--login}, primero lee y
ejecuta instrucciones del archivo @file{/etc/profile}, si ese archivo
existe.  Despu@'es de leer ese archivo, busca @file{~/.bash_profile},
@file{~/.bash_login} y @file{~/.profile}, en ese orden, y lee y ejecuta
instrucciones del primero que existe y es legible.  La opci@'on
@option{--noprofile} puede ser usada cuando se inicia el int@'erprete para
inhibir este comportamiento.

Cuando finaliza un int@'erprete interactivo de acceso o un int@'erprete no
interactivo de acceso ejecuta la instrucci@'on integrada @code{exit}, Bash
lee y ejecuta instrucciones del archivo @file{~/.bash_logout}, si existe.

@subsubheading Llamado como un int@'erprete no de acceso

Cuando se inicia un int@'erprete interactivo que no es un int@'erprete de
acceso, Bash lee y ejecuta instrucciones de @file{~/.bashrc}, si ese archivo
existe.  Esto puede ser inhibido usando la opci@'on @option{--norc}.  La
opci@'on @option{--rcfile @var{archivo}} forzar@'a a Bash a leer y ejecutar
instrucciones de @var{archivo} en lugar de @file{~/.bashrc}.

As@'{@dotless{i}}, t@'{@dotless{i}}picamente, su @file{~/.bash_profile}
contiene la l@'{@dotless{i}}nea
@example
@code{if [ -f ~/.bashrc ]; then . ~/.bashrc; fi}
@end example
@noindent
despu@'es (o antes) de las inicializaciones espec@'{@dotless{i}}ficas de
acceso.

@subsubheading Llamado de forma no interactiva

Cuando Bash se inicia de forma no interactiva, para ejecutar un guion del
int@'erprete, por ejemplo, busca la variable @env{BASH_ENV} en el entorno,
expande su valor si aparece ah@'{@dotless{i}} y usa el valor expandido como
el nombre de un archivo que leer y ejecutar.  Bash se comporta como si la
siguiente instrucci@'on fuera ejecutada:
@example
@code{if [ -n "$BASH_ENV" ]; then . "$BASH_ENV"; fi}
@end example
@noindent
pero el valor de la variable @env{PATH} no se usa para buscar el nombre de
archivo.

Como se indic@'o anteriormente, si se llama a un int@'erprete interactivo
con la opci@'on @option{--login}, Bash trata de leer y ejecutar
instrucciones de los archivos de inicio del int@'erprete de acceso. 

@subsubheading Llamado con el nombre @code{sh}

Si se llama a Bash con el nombre @code{sh}, trata de imitar el
comportamiento de inicio de versiones hist@'oricas de @code{sh} de la manera
m@'as fiel posible, ajust@'andose al mismo tiempo al est@'andar @sc{posix}
tambi@'en.

Cuando se llama como un int@'erprete de acceso interactivo o como un
int@'erprete no interactivo con la opci@'on @option{--login}, trata primero
de leer y ejecutar instrucciones de @file{/etc/profile} y @file{~/.profile},
en ese orden.  La opci@'on @option{--noprofile} puede ser usada para inhibir
este comportamiento.  Al llamarse como un int@'erprete interactivo con el
nombre @code{sh}, Bash busca la variable @env{ENV}, expande su valor si
est@'a definido y usa el valor expandido como el nombre de un archivo que
leer y ejecutar.  Puesto que un int@'erprete llamado con @code{sh} no trata
de leer y ejecutar instrucciones de otros archivos de inicio, la opci@'on
@option{--rcfile} no tiene efecto.  Un int@'erprete no interactivo llamado
con el nombre @code{sh} no trata de leer otros archivos de inicio.

Al llamarse con @code{sh}, Bash entra al modo @sc{posix} despu@'es de que
hayan sido le@'{@dotless{i}}dos los archivos de inicio.

@subsubheading Llamado en modo @sc{posix}

Cuando se inicia Bash en modo @sc{posix}, como con la opci@'on de
l@'{@dotless{i}}nea de @'ordenes @option{--posix}, sigue el est@'andar
@sc{posix} para archivos de inicio.  En este modo, los int@'erpretes
interactivos expanden la variable @env{ENV} y las instrucciones son
le@'{@dotless{i}}das y ejecutadas del archivo cuyo nombre es el valor
expandido.  No se leen ningunos otros archivos de inicio.

@subsubheading Llamado por un demonio del int@'erprete remoto

Bash trata de determinar cu@'ando est@'a siendo ejecutado con su entrada
est@'andar conectada a una conexi@'on de red, as@'{@dotless{i}} como
cu@'ando es ejecutado por el demonio remoto del int@'erprete, normalmente
@code{rshd}, o el demonio del int@'erprete seguro @code{sshd}.  Si Bash
determina que est@'a siendo ejecutado de esta forma, lee y ejecuta
instrucciones de @file{~/.bashrc}, si ese archivo existe y es legible.  No
har@'a esto al ser llamado con @code{sh}.  La opci@'on @option{--norc} puede
ser usada para inhibir este comportamiento, y la opci@'on @option{--rcfile}
puede ser usada para forzar que sea le@'{@dotless{i}}do otro archivo, pero
ni @code{rshd} ni @code{sshd} llaman generalmente al int@'erprete con estas
opciones o permiten que sean especificadas.

@subsubheading Llamado con diferentes @sc{uid/gid}s reales y efectivos

Si Bash es llamado con el id de usuario efectivo (grupo) diferente al id de
usuario real (grupo) y no se proporciona la opci@'on @option{-p}, no se lee
ning@'un archivo de inicio, las funciones del int@'erprete no se heredan del
entorno, las variables @env{SHELLOPTS}, @env{BASHOPTS}, @env{CDPATH} y
@env{GLOBIGNORE}, si aparecen en el entorno, son ignoradas y el id de
usuario efectivo se establece al id de usuario real.  Si proporciona la
opci@'on @option{-p} en la invocaci@'on, el comportamiento de inicio es el
mismo, pero el id de usuario efectivo no se restablece.

@node Int@'erpretes Interactivos
@section Int@'erpretes Interactivos
@cindex int@'erprete interactivo
@cindex int@'erprete, interactivo

@menu
* ¿Qu@'e es un Int@'erprete interactivo?::  Qu@'e determina si un 
                                               int@'erprete es Interactivo.
* ¿Es este Int@'erprete Interactivo?::  C@'omo saber si un int@'erprete es 
                                           interactivo.
* Comportamiento del Int@'erprete Interactivo::  ¿Qu@'e cambia en un 
                                                   int@'erprete interactivo?
@end menu

@node ¿Qu@'e es un Int@'erprete interactivo?
@subsection ¿Qu@'e es un Int@'erprete interactivo?

Un int@'erprete interactivo es uno iniciado sin argumentos de opci@'on, a no
ser que se especifique @option{-s}, sin especificar la opci@'on @option{-c},
y cuyas entrada y salida de error est@'an conectadas a terminales (seg@'un
se determina por @code{isatty(3)}), o el iniciado con la opci@'on
@option{-i}.

Un int@'erprete interactivo generalmente lee de y escribe a la terminal de
un usuario.

La opci@'on de llamada @option{-s} puede usarse para establecer los
par@'ametros posicionales cuando se inicia un int@'erprete interactivo.

@node ¿Es este Int@'erprete Interactivo?
@subsection ¿Es este Int@'erprete Interactivo?

Para determinar dentro de un guion de inicio si Bash est@'a corriendo
interactivamente, compruebe el valor del par@'ametro especial @samp{-}.
Contiene @code{i} cuando el int@'erprete es interactivo.  Por ejemplo:

@example
case "$-" in
*i*)	echo Este int@'erprete es interactivo ;;
*)	echo Este int@'erprete no es interactivo ;;
esac
@end example

Alternativamente, los guiones de inicio pueden examinar la variable
@env{PS1}; est@'a sin asignar en int@'erpretes no int@'eractivos y asignada
en int@'erpretes interactivos.  As@'{@dotless{i}}:

@example
if [ -z "$PS1" ]; then
        echo Este int@'erprete es no interactivo
else
        echo Este int@'erprete es interactivo
fi
@end example

@node Comportamiento del Int@'erprete Interactivo
@subsection Comportamiento del Int@'erprete Interactivo

Cuando el int@'erprete est@'a corriendo interactivamente, cambia su
comportamiento de varias formas.

@enumerate
@item
Los archivos de inicio son le@'{@dotless{i}}dos y ejecutados como se
describe en @ref{Archivos de Inicio de Bash}.

@item
El Control de Tareas (@pxref{Control de Tareas}) est@'a activado por
defecto.  Cuando el control de tareas est@'a en efecto, Bash ignora las
se@~nales de control de tareas generadas por el teclado @code{SIGTTIN},
@code{SIGTTOU} y @code{SIGTSTP}.

@item
Bash expande y muestra @env{PS1} antes de leer la primera
l@'{@dotless{i}}nea de una instrucci@'on, y expande y muestra @env{PS2}
antes de leer la segunda y posteriores l@'{@dotless{i}}neas de una
instrucci@'on multil@'{@dotless{i}}nea.  Bash muestra @env{PS0} tras leer
una instrucci@'on pero antes de ejecutarla.

@item
Bash ejecuta el valor de la variable @env{PROMPT_COMMAND} como una
instrucci@'on antes de imprimir el prompt primario, @env{$PS1}
(@pxref{Variables de Bash}).

@item
Readline (@pxref{Edici@'on en L@'{@dotless{i}}nea de @'Ordenes}) se usa para
leer instrucciones desde la terminal del usuario.

@item
Bash inspecciona el valor de la opci@'on @code{ignoreeof} para @code{set -o}
en vez de finalizar inmediatamente cuando recibe un @code{EOF} en su salida
est@'andar al leer una instrucci@'on (@pxref{La Instrucci@'on Integrada
Set}).

@item
El historial de instrucciones (@pxref{Servicios del Historial de Bash})  y
la expansi@'on de historial (@pxref{Interacci@'on con el Historial}) est@'an
habilitados por defecto.  Bash guardar@'a el historial de instrucciones en
el archivo nombrado por @env{$HISTFILE} cuando finaliza un int@'erprete con
el historial habilitado.

@item
La expansi@'on de alias (@pxref{Aliases}) se realiza por defecto.

@item
En ausencia de traps, Bash ignora @code{SIGTERM} (@pxref{Se@~nales}).

@item
En ausencia de traps, @code{SIGINT} es atrapada y manejada
((@pxref{Se@~nales}.  @code{SIGINT} interrumpir@'a algunas instrucciones
integradas del int@'erprete.

@item
Un int@'erprete de acceso interactivo env@'{@dotless{i}}a una @code{SIGHUP}
a todas las tareas en la salida si la opci@'on del int@'erprete
@option{huponexit} ha sido habilitada (@pxref{Se@~nales}).

@item
La opci@'on de llamada @option{-n} es ignorada, y @samp{set -n} no tiene
efecto (@pxref{La Instrucci@'on Integrada Set}).

@item
Bash comprobar@'a el correo peri@'odicamente, dependiendo de los valores de
las variables del int@'erprete @env{MAIL}, @env{MAILPATH} y @env{MAILCHECK}
(@pxref{Variables de Bash}).

@item
Los errores de expansi@'on debidos a referencias a variables sin asociar del
int@'erprete despu@'es de que @samp{set -u} haya sido habilitada no har@'an
que el int@'erprete finalice (@pxref{La Instrucci@'on Integrada Set}).

@item
El int@'erprete no finalizar@'a durante errores de expansi@'on causados por
@var{var} estando sin asignar o nula en expansiones
@code{$@{@var{var}:?@var{palabra}@}} (@pxref{Expansi@'on de Par@'ametros del
Int@'erprete}).

@item
Los errores de redirecci@'on encontrados por instrucciones integradas del
int@'erprete no har@'an que el int@'erprete finalice.

@item
Cuando se ejecuta en modo @sc{posix}, una instrucci@'on integrada especial
que retorne un estado de error no har@'a que el int@'erprete se cierre
(@pxref{Modo POSIX de Bash}).

@item
Un @code{exec} fallido no causar@'a que el int@'erprete se cierre
(@pxref{Instrucciones Integradas del Bourne Shell}).

@item
Errores de sintaxis del analizador no har@'an que el int@'erprete finalice.

@item
Est@'a activada por defecto la correcci@'on simple para argumentos de
directorio para la instrucci@'on integrada @code{cd} (consulte la
descripci@'on de la opci@'on @code{cdspell} para la instrucci@'on integrada
@code{shopt} en @ref{La Instrucci@'on Integrada Shopt}).

@item
El int@'erprete comprobar@'a el valor de la variable @env{TMOUT} y
finalizar@'a si una instrucci@'on no es le@'{@dotless{i}}da dentro del
n@'umero de segundos especificado antes de imprimir @env{$PS1}
(@pxref{Variables de Bash}).

@end enumerate

@node Expresiones Condicionales de Bash
@section Expresiones Condicionales de Bash
@cindex expresiones, condicionales

Las expresiones condicionales se usan por la instrucci@'on compuesta
@code{[[} y las instrucciones integradas @code{test} y @code{[}.

Las expresiones pueden ser unarias o binarias.  Las expresiones unarias se
usan frecuentemente para examinar el estado de un archivo.  Hay operadores
de cadenas y operadores num@'ericos de comparaci@'on tambi@'en.  Bash maneja
varias nombres de archivo de forma especial cuando son usados en
expresiones.  Si el sistema operativo en que Bash est@'a corriendo
proporciona estos archivos especiales, Bash los usar@'a; de lo contrario,
los emular@'a internamente con este comportamiento: si el argumento
@var{archivo} para uno de los primarios es de la forma
@file{/dev/fd/@var{N}}, entonces se comprueba el descriptor de archivo
@var{N}.  Si el argumento @var{archivo} para uno de los primarios es
@file{/dev/stdin}, @file{/dev/stdout}, o @file{/dev/stderr} se comprueba el
descriptor de archivo 0, 1 o 2, respectivamente.

Al usarse con @code{[[}, los operadores @samp{<} y @samp{>} ordenan
lexicogr@'aficamente usando la configuraci@'on regional actual.  La
instrucci@'on @code{test} usa la ordenaci@'on ASCII.

A no ser que se especifique lo contrario, los primarios que operan en
archivo siguen enlaces simb@'olicos y operan en el destino del enlace, en
vez de en el propio enlace.

@table @code
@item -a @var{archivo}
Verdadero si @var{archivo} existe.

@item -b @var{archivo}
Verdadero si @var{archivo} existe y es un archivo especial de bloque.

@item -c @var{archivo}
Verdadero si @var{archivo} existe y es un archivo especial de car@'acter.

@item -d @var{archivo}
Verdadero si @var{archivo} existe y es un directorio.

@item -e @var{archivo}
Verdadero si @var{archivo} existe.

@item -f @var{archivo}
Verdadero si @var{archivo} existe y es un fichero normal.

@item -g @var{archivo}
Verdadero si @var{archivo} existe y su bit set-group-id est@'a establecido.

@item -h @var{archivo}
Verdadero si @var{archivo} existe y es un enlace simb@'olico.

@item -k @var{archivo}
Verdadero si @var{archivo} existe y su bit «pegajoso» est@'a establecido.

@item -p @var{archivo}
Verdadero si @var{archivo} existe y es una tuber@'{@dotless{i}}a con nombre
(FIFO).

@item -r @var{archivo}
Verdadero si @var{archivo} existe y es legible.

@item -s @var{archivo}
Verdadero si @var{archivo} existe y tiene un tama@~no mayor que cero.

@item -t @var{da}
Verdadero si el descriptor de archivo @var{da} est@'a abierto si se refiere
a una terminal.

@item -u @var{archivo}
Verdadero si @var{archivo} existe y su bit set-user-id est@'a establecido.

@item -w @var{archivo}
Verdadero si @var{archivo} existe y es escribible.

@item -x @var{archivo}
Verdadero si @var{archivo} existe y es ejecutable.

@item -G @var{archivo}
Verdadero si @var{archivo} existe y est@'a pose@'{@dotless{i}}do por el id
de grupo efectivo.

@item -L @var{archivo}
Verdadero si @var{archivo} existe y es un enlace simb@'olico.

@item -N @var{archivo}
Verdadero si @var{archivo} existe y ha sido modificado desde que fue
le@'{@dotless{i}}do por @'ultima vez.

@item -O @var{archivo}
Verdadero si @var{archivo} existe y est@'a pose@'{@dotless{i}}do por el id
de usuario efectivo.

@item -S @var{archivo}
Verdadero si @var{archivo} existe y es un socket.

@item @var{archivo1} -ef @var{archivo2}
Verdadero si @var{archivo1} y @var{archivo2} se refieren a los mismos
n@'umeros de dispositivo y de inodo.

@item @var{archivo1} -nt @var{archivo2}
Verdadero si @var{archivo1} es m@'as nuevo (seg@'un la fecha de
modificaci@'on) que @var{archivo2}, o si @var{archivo1} existe y
@var{archivo2} no.

@item @var{archivo1} -ot @var{archivo2}
Verdadero si @var{archivo1} es m@'as viejo que @var{archivo2}, o si
@var{archivo2} existe y @var{archivo1} no.

@item -o @var{nombre-de-opc}
Verdadero si la opci@'on del int@'erprete @var{nombre-de-opc} est@'a
habilitada.  La lista de opciones aparece en la descripci@'on de la opci@'on
@option{-o} de la instrucci@'on integrada @code{set} (@pxref{La
Instrucci@'on Integrada Set}).

@item -v @var{nombre-de-var}
Verdadero si la variable del int@'erprete @var{nombre-de-var} est@'a
establecida (se le ha asignado un valor).

@item -R @var{nombre-de-var}
Verdadero si la variable del int@'erprete @var{nombre-de-var} est@'a
establecida y es una referencia de nombre.

@item -z @var{cadena}
Verdadero si la longitud de @var{cadena} es cero.

@item -n @var{cadena}
@itemx @var{cadena}
Verdadero si la longitud de @var{cadena} es distinta de cero.

@item @var{cadena1} == @var{cadena2}
@itemx @var{cadena1} = @var{cadena2}
Verdadero si las cadenas son iguales.  Cuando se usa con la instrucci@'on
@code{[[}, esto realiza la coincidencia de patrones como se describi@'o
anteriormente (@pxref{Construcciones Condicionales}).

@samp{=} deber@'{@dotless{i}}a usarse con la instrucci@'on @code{test} para
la conformidad con @sc{posix}.

@item @var{cadena1} != @var{cadena2}
Verdadero si las cadenas no son iguales.

@item @var{cadena1} < @var{cadena2}
Verdadero si @var{cadena1} se ordena lexicogr@'aficamente antes que
@var{cadena2}.

@item @var{cadena1} > @var{cadena2}
Verdadero si @var{cadena1} se ordena lexicogr@'aficamente despu@'es que
@var{cadena2}.

@item @var{arg1} OP @var{arg2}
@code{OP} es uno de @samp{-eq}, @samp{-ne}, @samp{-lt}, @samp{-le},
@samp{-gt} o @samp{-ge}.  Estos operadores aritm@'eticos binarios devuelven
verdadero si @var{arg1} es igual a, no igual a, menor que, menor que o igual
a, mayor que, mayor que o igual a @var{arg2}, respectivamente.  @var{Arg1} y
@var{arg2} pueden ser enteros positivos o negativos.
@end table

@node Aritm@'etica del Int@'erprete
@section Aritm@'etica del Int@'erprete
@cindex aritm@'etica, int@'erprete
@cindex aritm@'etica del int@'erprete
@cindex expresiones, aritm@'eticas
@cindex evaluaci@'on, aritm@'etica
@cindex evaluaci@'on aritm@'etica

El int@'erprete permite evaluar expresiones aritm@'eticas, como una de las
expansiones del int@'erprete o usando la instrucci@'on compuesta @code{((},
la instrucci@'on integrada @code{let} o la opci@'on @option{-i} de la
instrucci@'on integrada @code{declare}.

La evaluaci@'on se hace en enteros de anchura fija sin comprobar por
desbordamiento, aunque se atrapa la divisi@'on entre 0 y se marca como
error.  Los operadores y su precedencia, asociatividad y valores son los
mismos que en lenguaje C.  La siguiente lista de operadores est@'a agrupada
en niveles de operadores de igual precedencia.  Los niveles son listados en
orden de precedencia decreciente. 

@table @code

@item @var{id}++ @var{id}--
postincremento y postdecremento de variable 

@item ++@var{id} --@var{id}
preincremento y predecremento de variable

@item - +
menos y m@'as unarios

@item ! ~
negaci@'on l@'ogica y a nivel de bit

@item **
exponenciaci@'on

@item * / %
multiplicaci@'on, divisi@'on, resto

@item + -
adici@'on, sustracci@'on

@item << >>
desplazamientos de bit a izquierda y derecha

@item <= >= < >
comparaci@'on

@item == !=
igualdad y desigualdad

@item &
AND a nivel de bit

@item ^
OR exclusivo a nivel de bit

@item |
OR a nivel de bit

@item &&
AND l@'ogico

@item ||
OR l@'ogico

@item expr ? expr : expr
operador condicional

@item = *= /= %= += -= <<= >>= &= ^= |=
asignaci@'on

@item expr1 , expr2
coma
@end table

Las variables del int@'erprete se permiten como operandos; la expansi@'on de
par@'ametro se realiza antes de que se eval@'ue la expresi@'on.  Dentro de
una expresi@'on, las variables del int@'erprete tambi@'en pueden ser
referenciadas por nombre sin usar la sintaxis de expansi@'on de
par@'ametros.  Una variable del int@'erprete que es nula o no asignada
eval@'ua a 0 cuando se referencia por nombre sin usar la sintaxis de
expansi@'on de par@'ametro.  El valor de una variable se eval@'ua como una
expresi@'on aritm@'etica cuando es referenciado o cuando a una variable a la
que se le ha dado el atributo @var{integer} usando @samp{declare -i} se le
asigna un valor.  Un valor nulo eval@'ua a 0.  Una variable del int@'erprete
no tiene que tener su atributo @var{integer} activado para usarse en una
expresi@'on.

Las constantes con un 0 inicial se interpretan como n@'umeros octales.  Un
@samp{0x} o @samp{0X} denota hexadecimal.  De lo contrario, los n@'umeros
toman la forma [@var{base}@code{#}]@var{n}, dona la @var{base} opcional es
un n@'umero hexadecimal entre 2 y 64 que representa la base aritm@'etica y
@var{n} es un n@'umero en esa base.  Si se omite @var{base}@code{#},
entonces se usa la base 10.  Al especificar @var{n}, los
d@'{@dotless{i}}gitos mayores que 9 se representan por letras min@'usculas,
las letras may@'usculas, @samp{@@} y @samp{_}, en ese orden.  Si @var{base}
es menor o igual a 36, las letras may@'usculas y min@'usculas pueden usarse
de forma intercambiable para representar n@'umeros entre 10 y 35.

Los operadores se eval@'uan en orden de precedencia.  Las subexpresiones en
par@'entesis se eval@'uan primero y pueden sobrescribir las reglas de
precedencia anteriores.

@node Aliases
@section Aliases
@cindex expansi@'on de alias

Los @var{aliases} permiten que una cadena sea sustituida por una palabra
cuando se usa como la primera palabra de una instrucci@'on simple.  El
int@'erprete mantiene una lista de aliases que puede ser establecida y
eliminada con las instrucciones integradas @code{alias} y @code{unalias}.

La primera palabra de cada instrucci@'on simple, si no está entrecomillada,
se comprueba para ver si tiene un alias.  En ese caso, ese palabra es
reemplazada por el texto del alias.  Los caracteres @samp{/}, @samp{$},
@samp{`}, @samp{=} y cualquiera de los metacaracteres o caracteres de
entrecomillado del int@'erprete listados anteriormente no pueden aparecer en
un nombre de alias.  El texto de reemplazo puede contener cualquier entrada
de int@'erprete v@'alida, incluyendo metacaracteres del int@'erprete.  La
primera palabra de texto de reemplazo se comprueba por aliases, pero una
palabra que es id@'entica a un alias que est@'a siendo expandido no se
expande una segunda vez.  Esto significa que uno puede crear el alias
@code{ls} para @code{"ls -F"}, por ejemplo, y Bash no trata de expandir
recursivamente el texto de reemplazo.  Si el @'ultimo car@'acter del valor
del alias es un @var{blanco}, entonces la siguiente palabra de instrucci@'on
que sigue al alias tambi@'en se comprueba para la expansi@'on de alias.

Los alias son creados y listados con la instrucci@'on @code{alias}, y
eliminados con la instrucci@'on @code{unalias}.

No hay mecanismo para usar argumentos en el texto de reemplazo, como en
@code{csh}.  Si se necesitan argumentos, se deber@'{@dotless{i}}a usar una
funci@'on del int@'erprete (@pxref{Funciones del Int@'erprete}).

Los aliases no se expanden cuando el int@'erprete no es interactivo, a no
ser que est@'e habilitada la opci@'on del int@'erprete @code{expand_aliases}
usando @code{shopt} (@pxref{La Instrucci@'on Integrada Shopt}).

Las reglas concernientes a la definici@'on y uso de aliases son en cierto
modo confusas.  Bash siempre lee al menos una l@'{@dotless{i}}nea completa
de entrada antes de ejecutar cualquiera de las instrucciones en esa
l@'{@dotless{i}}nea.  Los aliases se expanden cuando se lee una
instrucci@'on, no cuando se ejecuta.  Por lo tanto, una definici@'on de
alias que aparece en la misma l@'{@dotless{i}}nea que otra instrucci@'on no
tiene efecto hasta que la siguiente l@'{@dotless{i}}nea de entrada es
le@'{@dotless{i}}da.  Las instrucciones que siguen la definici@'on del alias
en esa l@'{@dotless{i}}nea no se ven afectadas por el nuevo alias.  Este
comportamiento es tambi@'en un problema cuando se ejecutan funciones.  Los
aliases se expanden cuando se lee una definici@'on de funci@'on, no cuando
se ejecuta la funci@'on, porque una definici@'on de funci@'on es en
s@'{@dotless{i}} una instrucci@'on.  Como consecuencia, los aliases
definidos en una funci@'on no est@'an disponibles hasta despu@'es de que la
funci@'on sea ejecutada.  Para estar seguro, ponga siempre las definiciones
de alias en una l@'{@dotless{i}}nea separada, y no use @code{alias} en
instrucciones compuestas.

Para casi cualquier prop@'osito, se prefieren las funciones del int@'erprete
a los aliases.

@node Vectores
@section Vectores
@cindex vectores

Bash proporciona variables de vectores indexadas y asociadas de una
dimensi@'on.  Cualquier variable puede ser usada como un vector asociativo;
la instrucci@'on integrada @code{declare} declarar@'a
expl@'{@dotless{i}}citamente un vector.  No hay l@'{@dotless{i}}mite
m@'aximo sobre el tama@~no de un vector, ni ning@'un requerimiento de que
los miembros est@'en indexados o asignados contiguamente.  Los vectores
indexados son referenciados usando enteros (incluyendo expresiones
aritm@'eticas [@pxref{Aritm@'etica del Int@'erprete}]) y est@'an basados en
cero; los vectores asociativos usan cadenas arbitrarias.  A no ser que se
indique lo contrario, los indices de vectores indexados deben ser enteros no
negativos.

Un vector indexado se crea autom@'aticamente si se asigna alguna variable
usando la sintaxis
@example
@var{nombre}[@var{sub@'{@dotless{i}}ndice}]=@var{valor}
@end example

@noindent
El @var{sub@'{@dotless{i}}ndice} se trata como una expresi@'on aritm@'etica
que debe evaluar a un n@'umero.  Para declarar un vector
expl@'{@dotless{i}}citamente, use
@example
declare -a @var{nombre}
@end example
@noindent
La sintaxis
@example
declare -a @var{nombre}[@var{sub@'{@dotless{i}}ndice}]
@end example
@noindent
tambi@'en se acepta; el @var{sub@'{@dotless{i}}ndice} es ignorado.

@noindent
Los vectores asociativos son creados usando
@example
declare -A @var{nombre}.
@end example

Los atributos pueden ser especificados para una variable de vector usando
las instrucciones integradas @code{declare} y @code{readonly}.  Cada
atributo se aplica a todos los miembros del vector.

Los vectores son asignados usando asignaciones compuestas de la forma
@example
@var{nombre}=(@var{value1} @var{value2} @dots{} )
@end example
@noindent
donde cada @var{valor} es de la forma
@code{[@var{sub@'{@dotless{i}}ndice}]=}@var{cadena}.  Las asignaciones de
vector indexadas no requieren nada excepto @var{cadena}.  Al asignar a
vectores indexados, si se proporciona el sub@'{@dotless{i}}ndice opcional,
se asigna a ese @'{@dotless{i}}ndice; de lo contrario, el
@'{@dotless{i}}ndice del elemento asignado es el @'ultimo
@'{@dotless{i}}ndice al que se ha asignado por la sentencia m@'as uno.  La
indexaci@'on empieza en cero.

Al asignar a un vector asociativo, se requiere el sub@'{@dotless{i}}ndice.

Esta sintaxis tambi@'en es aceptada por la instrucci@'on integrada
@code{declare}.  A los elementos individuales de vector tambi@'en se puede
asignar usando la sintaxis
@code{@var{nombre}[@var{sub@'{@dotless{i}}ndice}]=@var{valor}} introducida
anteriormente.

Al asignar a un vector indexado, si @var{nombre} est@'a subindexado por un
n@'umero negativo, ese n@'umero se interpreta como relativo a uno mayor que
el @'{@dotless{i}}ndice m@'aximo de @var{nombre}, de forma que los
@'{@dotless{i}}ndices negativos cuentan hacia tras desde el final del
vector, y un @'{@dotless{i}}ndice de -1 hace referencia al @'ultimo
elemento.

Se puede referenciar cualquier elemento de un vector usando
@code{$@{@var{nombre}[@var{sub@'{@dotless{i}}ndice}]@}}.  Las llaves se
requieren para evitar conflictos con los operadores de expansi@'on de nombre
de archivo del int@'erprete.  Si @var{sub@'{@dotless{i}}ndice} es @samp{@@}
o @samp{*}, la palabra se expande a todos los miembros del vector
@var{nombre}.  Estos sub@'{@dotless{i}}ndices difieren solo cuando la
palabra aparece dentro de comillas dobles.  Si la palabra est@'a entre
comillas dobles, @code{$@{@var{nombre}[*]@}} se expande a una @'unica
palabra con el valor de cada miembro del vector separado por el primer
car@'acter de la variable @env{IFS}, y @code{$@{@var{nombre}[@@]@}} expande
cada elemento de @var{nombre} a una palabra separada.  Cuando no hay
miembros del vector, @code{$@{@var{nombre}[@@]@}} se expande a nada.  Si la
expansi@'on entre comillas dobles ocurre dentro de una palabra, la
expansi@'on del primer par@'ametro se une con la parte inicial de la palabra
original, y la expansi@'on del @'ultimo par@'ametro se une con la @'ultima
parte de la palabra original.  Esto es an@'alogo a la expansi@'on de los
par@'ametros especiales @samp{@@} y @samp{*}.
@code{$@{#@var{nombre}[@var{sub@'{@dotless{i}}ndice}]@}} se expande a la
longitud de @code{$@{@var{nombre}[@var{sub@'{@dotless{i}}ndice}]@}}.  Si
@var{sub@'{@dotless{i}}ndice} es @samp{@@} o @samp{*}, la expansi@'on es el
n@'umero de elementos del vector.  Si el @var{sub@'{@dotless{i}}ndice} usado
para referenciar un elemento de un vector indexado eval@'ua a un n@'umero
menor que cero, se interpreta como relativo a uno mayor que el
@'{@dotless{i}}ndice m@'aximo del vector, de forma que los
@'{@dotless{i}}ndices negativos cuentan hacia tras desde el final del vector
y un @'{@dotless{i}}ndice de -1 hace referencia al @'ultimo elemento.

Referenciar una variable de vector sin un sub@'{@dotless{i}}ndice es
equivalente a referenciar con un sub@'{@dotless{i}}ndice de 0.  Cualquier
referencia a una variable usando un sub@'{@dotless{i}}ndice v@'alido es
legal, y @code{bash} crear@'a un vector si es necesario.

Una variable de vector se considera establecida si se ha asignado un valor a
un sub@'{@dotless{i}}ndice.  La cadena nula es un valor v@'alido.

Es posible obtener las claves (@'{@dotless{i}}ndices) de un vector
as@'{@dotless{i}} como los valores.  $@{!@var{nombre}[@@]@} y
$@{!@var{nombre}[*]@} se expanden a los @'{@dotless{i}}ndices asignados en
una variable de vector @var{nombre}.  El tratamiento en comillas dobles es
similar a la expansi@'on de los par@'ametros especiales @samp{@@} y @samp{*}
dentro de comillas dobles.

La instrucci@'on integrada @code{unset} se usa para destruir vectores.
@code{unset @var{nombre}[@var{sub@'{@dotless{i}}ndice}]} destruye el
elemento de vector en el @'{@dotless{i}}ndice
@var{sub@'{@dotless{i}}ndice}.  Los sub@'{@dotless{i}}ndices negativos para
vectores indexados se interpretan como se describe arriba.  Se debe tomar
precauci@'on para evitar efectos secundarios no deseados causados por la
expansi@'on de nombre de archivo.  @code{unset @var{nombre}}, donde
@var{nombre} es un vector, elimina el vector completo.  Un
sub@'{@dotless{i}}ndice de @samp{*} o @samp{@@} tambi@'en elimina el vector
completo.

Cada una de las instrucciones integradas @code{declare}, @code{local} y
@code{readonly} aceptan una opci@'on @option{-a} para especificar un vector
indexado y una opci@'on @option{-A} para especificar un vector asociativo.
Si se proporcionan ambas opciones, @option{-A} toma precedencia.  La
instrucci@'on integrada @code{read} acepta una opci@'on @option{-a} para
asignar una lista de palabras le@'{@dotless{i}}das de la entrada est@'andar
a un vector, y puede leer valores de la entrada est@'andar en elementos de
vector individuales.  Las instrucciones integradas @code{set} y
@code{declare} muestran valores de vector de una forma que permiten que sean
reutilizados como entrada.

@node La Pila de Directorios
@section La Pila de Directorios
@cindex pila de directorio

@menu
* Instrucciones Integradas de la Pila de Directorios::  Las instrucciones 
                                                          integradas de Bash 
                                                          para manipular la 
                                                          pila de directorio.
@end menu

La pila de directorios es una lista de directorios visitados recientemente.
La instrucci@'on integrada @code{pushd} a@~nade directorios a la pila
mientras cambia el directorio actual, y la instrucci@'on integrada
@code{popd} elimina los directorios especificados de la pila y cambia el
directorio actual al directorio eliminado.  La instrucci@'on integrada
@code{dirs} muestra los contenidos de la pila de directorios.  El directorio
actual es siempre el «superior» de la pila de directorios.

Los contenidos de la pila de directorios tambi@'en son visibles como el
valor de la variable del int@'erprete @env{DIRSTACK}.

@node Instrucciones Integradas de la Pila de Directorios
@subsection Instrucciones Integradas de la Pila de Directorios

@table @code

@item dirs
@btindex dirs
@example
dirs [-clpv] [+@var{N} | -@var{N}]
@end example

Muestra la lista de los directorios actualmente recordados.  Los directorios
son a@~nadidos a la lista con la instrucci@'on @code{pushd}; la
instrucci@'on @code{popd} elimina directorios de la lista.  El directorio
actual es siempre el primer directorio en la pila.

@table @code
@item -c
Limpia la pila de directorios eliminando todos los elementos.
@item -l
Produce un listado usando nombres de ruta completos; el formato de listado
predeterminado usa una virgulilla para denotar el directorio principal.
@item -p
Hace que @code{dirs} imprima la pila de directorios con una entrada por
l@'{@dotless{i}}nea.
@item -v
Hace que @code{dirs} imprima la pila de directorios con una entrada por
l@'{@dotless{i}}nea, prefijando cada entrada con su @'{@dotless{i}}ndice en
la pila.
@item +@var{N}
Muestra el directorio n@'umero @var{N} (contando desde la izquierda de la
lista imprimida por @code{dirs} cuando es llamado sin opciones), empezando
por cero.
@item -@var{N}
Muestra el directorio n@'umero @var{N} (contando desde la derecha de la
lista imprimida por @code{dirs} cuando es llamado sin opciones), empezando
por cero.
@end table

@item popd
@btindex popd
@example
popd [-n] [+@var{N} | -@var{N}]
@end example

Cuando no se pasan argumentos, @code{popd} elimina el directorio superior de
la pila y realiza un @code{cd} al nuevo directorio superior.  Los elementos
est@'an numerados desde 0 empezando por el primer directorio listado con
@code{dirs}; esto es, @code{popd} es equivalente a @code{popd +0}.

@table @code
@item -n
Suprime el cambio de directorio normal al eliminar directorios de la pila,
de forma que solo se manipula la pila.
@item +@var{N}
Elimina el directorio n@'umero @var{N} (contando desde la izquierda de la
lista imprimida por @code{dirs}), empezando por cero.
@item -@var{N}
Elimina el directorio n@'umero @var{N} (contando desde la derecha de la
lista imprimida por @code{dirs}), empezando por cero.
@end table

@btindex pushd
@item pushd
@example
pushd [-n] [@var{+N} | @var{-N} | @var{dir}]
@end example

Guarda el directorio actual en la parte superior de la pila de directorios y
despu@'es hace un @code{cd} a @var{dir}.  Sin argumentos, @code{pushd}
intercambia los dos directorios superiores y convierte el nuevo superior en
el directorio actual.

@table @code
@item -n
Suprime el cambio normal de directorio al rotar o a@~nadir directorios a la
pila, de forma que solo se manipula la pila.
@item +@var{N}
Trae el directorio n@'umero @var{N} (contando desde la izquierda de la lista
imprimida por @code{dirs}, empezando por cero) a la parte superior de la
lista rotando la pila.
@item -@var{N}
Trae el directorio n@'umero @var{N} (contando desde la derecha de la lista
imprimida por @code{dirs}, empezando por cero) a la parte superior de la
lista rotando la pila.
@item @var{dir}
Hace que @var{dir} sea el superior de la pila, volvi@'endolo el nuevo
directorio actual como si hubiera sido proporcionado como un argumento para
la instrucci@'on integrada @code{cd}.
@end table
@end table

@node Controlando el Prompt
@section Controlando el Prompt
@cindex prompt

El valor de la variable @env{PROMPT_COMMAND} es examinado justo antes de que
Bash imprima cada prompt primario.  Si @env{PROMPT_COMMAND} est@'a asignada
y tiene un valor no nulo, entonces se ejecuta el valor justo como si hubiera
sido tecleado en la l@'{@dotless{i}}nea de @'ordenes.

Adem@'as, la siguiente tabla describe los caracteres especiales que pueden
aparecer en las variables de prompt desde @env{PS1} a @env{PS4}:

@table @code
@item \a
Un car@'acter de timbre.
@item \d
La fecha, en formato "D@'{@dotless{i}}aSemana Mes D@'{@dotless{i}}a"
(p. ej. "Mar May 26").
@item \D@{@var{formato}@}
El @var{formato} es pasado a @code{strftime}(3) y el resultado es insertado
en la cadena del prompt; un @var{formato} vac@'{@dotless{i}}o resulta en una
representaci@'on del tiempo espec@'{@dotless{i}}fica de regi@'on.  Se
requieren las llaves.
@item \e
Un car@'acter de escape.
@item \h
El nombre del anfitri@'on, hasta el primer `.'.
@item \H
El nombre del anfitri@'on.
@item \j
El n@'umero de tareas actualmente gestionadas por el int@'erprete.
@item \l
El nombre base del nombre de dispositivo de la terminal del int@'erprete.
@item \n
Una nueva l@'{@dotless{i}}nea.
@item \r
Un retorno de carro.
@item \s
El nombre del int@'erprete, el nombre base de @code{$0} (la porci@'on que
sigue a la @'ultima barra).
@item \t
La hora, en formato HH:MM:SS de 24 horas.
@item \T
La hora, en formato HH:MM:SS de 12 horas.
@item \@@
La hora, en formato am/pm de 12 horas.
@item \A
La hora, en formato HH:MM de 24 horas.
@item \u
El nombre de usuario del usuario actual.
@item \v
La versi@'on de Bash (p. ej., 2.00)          
@item \V
La publicaci@'on de Bash, versi@'on + nivel de parche (p. ej., 2.00.0)
@item \w
El directorio de trabajo actual, con @env{$HOME} abreviado con una
virgulilla (usa la variable @env{$PROMPT_DIRTRIM}).
@item \W
El nombre base de @env{$PWD}, con @env{$HOME} abreviado con una virgulilla.
@item \!
El n@'umero de historial de esta instrucci@'on.
@item \#
El n@'umero de instrucci@'on de esta instrucci@'on.
@item \$
@code{#} si el uid efectivo es 0, sino @code{$}.
@item \@var{nnn}
El car@'acter cuyo c@'odigo ASCII es el valor octal @var{nnn}.
@item \\
Una barra invertida.
@item \[
Empieza una secuencia de caracteres no imprimibles.  Esto
podr@'{@dotless{i}}a usarse para incrustar una secuencia de control de
terminal en el prompt.
@item \]
Termina una secuencia de caracteres no imprimibles.
@end table

El n@'umero de instrucci@'on y el n@'umero de historial son normalmente
diferentes: el n@'umero de historial de una instrucci@'on es su posici@'on
en la lista del historial, que puede incluir instrucciones recuperadas del
archivo del historial (@pxref{Servicios del Historial de Bash}), mientras
que el n@'umero de instrucci@'on es la posici@'on en la secuencia de
instrucciones ejecutada durante la sesi@'on actual del int@'erprete.

Despu@'es de que la cadena es decodificada, se expande a trav@'es de la
expansi@'on de par@'ametro, sustituci@'on de instrucci@'on, expansi@'on
aritm@'etica y eliminaci@'on de comillas, sujeta al valor de la opci@'on del
int@'erprete @code{promptvars} (@pxref{La Instrucci@'on Integrada Set}).

@node El Int@'erprete Restringido
@section El Int@'erprete Restringido
@cindex int@'erprete restringido

Si Bash se inicia con el nombre @code{rbash}, o la opci@'on
@option{--restricted} o @option{-r} se proporciona en la llamada, el
int@'erprete se vuelve restringido.  Un int@'erprete restringido se usa para
establecer un entorno m@'as controlado que el int@'erprete est@'andar.  Un
int@'erprete restringido se comporta id@'enticamente a @code{bash} con la
excepci@'on de que lo siguiente es rechazado o no es realizado:

@itemize @bullet
@item
Cambiar directorios con la instrucci@'on integrada @code{cd}.
@item
Establecer o eliminar los valores de las variables @env{SHELL}, @env{PATH},
@env{ENV} o @env{BASH_ENV}.
@item
Especificar nombres de instrucciones que contienen barras.
@item
Especificar un nombre de archivo que contiene una barra como un argumento
para la instrucci@'on integrada @code{.}.
@item
Especificar un nombre de archivo que contiene una barra como un argumento
para la opci@'on @option{-p} de la opci@'on integrada @code{hash}.
@item
Importar definiciones de funci@'on del entorno del int@'erprete durante el
inicio.
@item
Analizar el valor de @env{SHELLOPTS} desde el entorno del int@'erprete al
inicio.
@item
Redirigir salida usando los operadores de redirecci@'on @samp{>}, @samp{>|},
@samp{<>}, @samp{>&}, @samp{&>} y @samp{>>}.
@item
Usar la instrucci@'on integrada @code{exec} para reemplazar el int@'erprete
con otra instrucci@'on.
@item
A@~nadir o eliminar instrucciones integradas con las opciones @option{-f} y
@option{-d} de la instrucci@'on integrada @code{enable}.
@item
Usar la instrucci@'on integrada @code{enable} para habilitar instrucciones
integradas deshabilitadas.
@item
Especificar la opci@'on @option{-p} para la instrucci@'on integrada
@code{command}.
@item
Desactivar el modo restringido con @samp{set +r} o @samp{set +o restricted}.
@end itemize

Estas restricciones son impuestas tras leerse los archivos de inicio.

Cuando se ejecuta una instrucci@'on que resulta ser un guion del
int@'erprete (@pxref{Guiones del Int@'erprete}), @code{rbash} desactiva
cualquier restricci@'on en el int@'erprete creado para ejecutar el guion.

@node Modo POSIX de Bash
@section Modo POSIX de Bash
@cindex Modo POSIX

Empezar Bash con la opci@'on de l@'{@dotless{i}}nea de @'ordenes
@option{--posix} o ejecutar @samp{set -o posix} mientras Bash est@'a
corriendo har@'a que Bash se adhiera m@'as fielmente al est@'andar
@sc{posix} cambiando el comportamiento para cumplir el especificado por
@sc{posix} en @'areas donde lo predeterminado de Bash difiera.

Cuando se llama como @code{sh}, Bash entra al modo @sc{posix} despu@'es de
leer los archivos de inicio.

La siguiente lista es lo que se cambia cuando el `modo @sc{posix}' tiene
efecto:

@enumerate
@item
Cuando una instrucci@'on en la tabla hash ya no existe, Bash volver@'a a
inspeccionar @env{$PATH} para encontrar la nueva ubicaci@'on.  Esto
tambi@'en est@'a disponible con @samp{shopt -s checkhash}.

@item
El mensaje imprimido por el c@'odigo de control de tareas y las
instrucciones integradas cuando una tarea finaliza con un estado distinto a
cero es `Hecho(estado)'.

@item
El mensaje imprimido por el c@'odigo de control de tareas y las
instrucciones integradas cuando una tarea es detenida es
`Detenido(@var{nombre-se@~nal})', donde @var{nombre-se@~nal} es, por
ejemplo, @code{SIGTSTP}.

@item
La expansi@'on de alias est@'a siempre activada, incluso en int@'erpretes no
interactivos.

@item
Las palabras reservadas que aparecen en un contexto donde se reconocen las
palabras reservadas no experimentan la expansi@'on de alias.

@item
Las expansiones @sc{posix} @env{PS1} and @env{PS2} de @samp{!} para el
n@'umero de historial y @samp{!!} a @samp{!} son habilitadas, y la
expansi@'on de par@'ametro se realiza en los valores de @env{PS1} y
@env{PS2} sin importar la configuraci@'on de la opci@'on @code{promptvars}.

@item
Los archivo de inicio @sc{posix} son ejecutados (@env{$ENV}) en lugar de los
archivos normales de Bash.

@item
La expansi@'on de virgulilla solo se realiza en asignaciones que preceden un
nombre de instrucci@'on, en vez de en todas las sentencias de asignaci@'on
en la l@'{@dotless{i}}nea.

@item
El archivo predeterminado del historial es @file{~/.sh_history} (este es el
valor predeterminado de @env{$HISTFILE}).

@item
Los operadores de redirecci@'on no realizan la expansi@'on de nombre de
archivo en la palabra en la redirecci@'on a no ser que el int@'erprete sea
interactivo.

@item
Los operadores de redirecci@'on no realizan divisi@'on de palabras en la
palabra en la redirecci@'on.

@item
Los nombres de funciones deben ser @code{nombre}s v@'alidos del
int@'erprete.  Es decir, no pueden contener caracteres distintos de letras,
d@'{@dotless{i}}gitos, barras bajas y no pueden empezar con un
d@'{@dotless{i}}gito.  Declarar una funci@'on con un nombre inv@'alido causa
un error de sintaxis fatal en int@'erpretes no interactivos.

@item
Los nombres de funciones no pueden ser los mismos que una de las
instrucciones integradas especiales @sc{posix}.

@item
Las instrucciones integradas especiales @sc{posix} son encontradas antes que
las funciones del int@'erprete durante la b@'usqueda de instrucci@'on.

@item
Al imprimir definiciones de funci@'on del int@'erprete (p. ej., por
@code{type}), Bash no imprime la palabra clave @code{funci@'on}.

@item
Las virgulillas literales que aparecen como el primer car@'acter en
elementos de la variable @env{PATH} no son expandidas como se describe
anteriormente bajo @ref{Expansi@'on de Virgulilla}.

@item
La palabra reservada @code{time} puede ser usada por s@'{@dotless{i}} misma
como una instrucci@'on.  Cuando se usa de esta forma, muestra las
estad@'{@dotless{i}}sticas de tiempo para el int@'erprete y sus hijos
completados.  La variable @env{TIMEFORMAT} controla el formato de la
informaci@'on de tiempo.

@item
Al analizar y expandir una expansi@'on $@{@dots{}@} que aparece dentro de
comillas dobles, las comillas simples ya no son especiales y no pueden
usarse para entrecomillar una llave de cierre u otro car@'acter especial, a
no ser que el operador sea uno de aquellos definidos para realizar la
eliminaci@'on de patr@'on.  En este caso, no tienen que aparecer como
parejas emparejadas.

@item
El analizador no reconoce @code{time} como una palabra reservada si el
siguiente s@'{@dotless{i}}mbolo empieza por un @samp{-}.

@item
El car@'acter @samp{!} no introduce la expansi@'on del historial dentro de
una cadena de comillas dobles, incluso si la opci@'on @code{histexpand}
est@'a habilitada.

@item
Si una instrucci@'on integrada especial @sc{posix} devuelve un estado de
error, finaliza un int@'erprete no interactivo.  Los errores fatales son
aquellos listados en el est@'andar @sc{posix}, e incluyen cosas como pasar
opciones incorrectas, errores de redirecci@'on, errores de asignaci@'on de
variables para asignaciones que preceden al nombre de la instrucci@'on y
dem@'as.

@item
Un int@'erprete no interactivo finaliza con un estado de error si un error
de asignaci@'on de variable ocurre cuando ning@'un nombre de instrucci@'on
sigue a las sentencias de asignaci@'on.  Un error de asignaci@'on de
variable ocurre, por ejemplo, al intentar asignar un valor a una variable de
solo lectura.

@item
Un int@'erprete no interactivo finaliza con un estado de error si un error
de asignaci@'on de variable ocurre en una sentencia de asignaci@'on que
precede a una instrucci@'on integrada especial, pero no con cualquier otra
instrucci@'on simple.

@item
Un int@'erprete no interactivo finaliza con un estado de error si la
variable de iteraci@'on en una sentencia @code{for} o la variable de
selecci@'on en una sentencia @code{select} es una variable de solo lectura.

@item
Los int@'erpretes no interactivos finalizan si @var{nombre-de-archivo} en
@code{.} @var{nombre-de-archivo} no se encuentra.

@item
Los int@'erpretes no interactivos finalizan si un error de sintaxis en una
expansi@'on aritm@'etica resulta en una expresi@'on inv@'alida.

@item
Los int@'erpretes no interactivos finalizan si ocurre un error de
expansi@'on de par@'ametro.

@item
Los int@'erpretes no interactivos finalizan si hay un error de sintaxis en
un guion le@'{@dotless{i}}do con las instrucciones integradas @code{.} o
@code{source}, o en una cadena procesada por la instrucci@'on integrada
@code{eval}.

@item
La sustituci@'on de procesos no est@'a disponible.

@item
Aunque la indirecci@'on de variable est@'a disponible, no puede ser aplicada
a los par@'ametros especiales @samp{#} y @samp{?}.

@item
Al expandir el par@'ametro especial @samp{*} en un contexto de patr@'on
donde la expansi@'on est@'a entre comillas dobles no trata el @code{$*} como
si estuviera entre comillas dobles.

@item
Las sentencias de asignaci@'on que preceden a las instrucciones integradas
especiales @sc{posix} persisten en el entorno del int@'erprete despu@'es de
que la instrucci@'on integrada se completa.

@item
Las sentencias de asignaci@'on que preceden llamadas a la funci@'on del
int@'erprete persisten en el entorno del int@'erprete despu@'es de que la
funci@'on retorne, como si hubiera sido ejecutada una instrucci@'on
integrada especial @sc{posix}.

@item
La instrucci@'on integrada especial @code{command} no evita que las
instrucciones integradas tomen sentencias de asignaci@'on como argumentos de
expandirlos como sentencias de asignaci@'on; cuando no est@'a en modo
@sc{posix}, las instrucciones integradas de asignaci@'on pierden sus
propiedades de expansi@'on de sentencias de asignaci@'on al ser precedidas
por @code{command}.

@item
La instrucci@'on integrada @code{bg} usa el formato requerido para describir
cada tarea ubicada en segundo plano, que no incluye una indicaci@'on de si
la tarea es la tarea actual o previa.

@item
La salida de @samp{kill -l} imprime todos los nombres de se@~nal en una sola
l@'{@dotless{i}}nea, separados por espacios, sin el prefijo @samp{SIG}.

@item
La instrucci@'on integrada @code{kill} no acepta nombres de se@~nal con un
prefijo @samp{SIG}.

@item
Las instrucciones integradas @code{export} y @code{readonly} muestran su
salida en el formato requerido por @sc{posix}.

@item
La instrucci@'on integrada @code{trap} muestra nombres de se@~nales sin el
@code{SIG} inicial.

@item
La instrucci@'on integrada @code{trap} no comprueba el primer argumento en
busca de una posible especificaci@'on de se@~nal y revierte el manejo de
tareas a la disposici@'on original si est@'a, a no ser que el argumento
consista exclusivamente de d@'{@dotless{i}}gitos y sea un n@'umero de
se@~nal v@'alido.  Si los usuarios quieren restablecer el manejador para una
se@~nal dada a la disposici@'on original, deben usar @samp{-} como el primer
argumento.

@item
Las instrucciones integradas @code{.} y @code{source} no buscan el
directorio actual en busca del argumento de nombre de archivo si no es
encontrado explorando @env{PATH}.

@item
Activar el modo @sc{posix} tiene el efecto de ajustar la opci@'on
@code{inherit_errexit}, de forma que los subint@'erpretes creados para
ejecutar sustituciones de instrucciones heredan el valor de la opci@'on
@option{-e} del int@'erprete padre.  Cuando no est@'a activada la opci@'on
@option{inherit_errexit}, Bash limpia la opci@'on @option{-e} en tales
subint@'erpretes.

@item
Cuando la instrucci@'on integrada @code{alias} muestra definiciones de
aliases, no las muestra con un @samp{alias } inicial a no ser que se
proporcione la opci@'on @option{-p}.

@item
Cuando instrucci@'on integrada @code{set} es llamada sin opciones, no
muestra los nombres y las definiciones de las funciones del int@'erprete.

@item
Cuando la instrucci@'on integrada @code{set} es llamada sin opciones,
muestra valores de variables sin comillas, a no ser que contengan
metacaracteres del int@'erprete, incluso si el resultado contiene caracteres
no imprimibles.

@item
Cuando la instrucci@'on integrada @code{cd} es llamada en modo
@var{logical}, y el nombre de ruta construido de @code{$PWD} y el nombre de
directorio proporcionado como un argumento no se refiere a un directorio
existente, @code{cd} fallar@'a en vez de recurrir al modo @var{physical}.

@item
La instrucci@'on integrada @code{pwd} verifica que el valor que imprime es
el mismo que el directorio actual, incluso si no se le pide que compruebe el
sistema de ficheros con la opci@'on @option{-P}.

@item
Al listar el historial, la instrucci@'on integrada @code{fc} no incluye una
indicaci@'on de si ha sido modificada o no una entrada del historial.

@item
El editor predeterminado usado por @code{fc} es @code{ed}.

@item
Las instrucciones integradas @code{type} y @code{command} no presentan un
archivo no ejecutable como encontrado, aunque el int@'erprete tratar@'a de
ejecutar tal archivo si es el @'unico archivo as@'{@dotless{i}} llamado
encontrado en @code{$PATH}.

@item
El modo de edici@'on @code{vi} llamar@'a al editor @code{vi} directamente
cuando se ejecute la instrucci@'on @samp{v}, en vez de comprobar
@code{$VISUAL} y @code{$EDITOR}.

@item
Cuando est@'a habilitada la opci@'on @option{xpg_echo}, Bash no trata de
interpretar los argumentos de @code{echo} como opciones.  Cada argumento se
muestra, despu@'es de que los caracteres de escape son convertidos.

@item
La instrucci@'on integrada @code{ulimit} usa un tama@~no de bloque de 512
bytes para las opciones @option{-c} y @option{-f}.

@item
La llegada de @code{SIGCHLD} cuando una trap est@'a establecida en
@code{SIGCHLD} no interrumpe la instrucci@'on integrada @code{wait} y hace
que retorne inmediatamente.  La instrucci@'on trap es ejecutada una vez por
cada cada hijo que finalice.

@item
La instrucci@'on integrada @code{read} puede ser interrumpida por una
se@~nal para la cual ha sido establecida un trap.  Si Bash recibe una
se@~nal atrapada mientra ejecuta @code{read}, el manejador de trap se
ejecuta y @code{read} devuelve un estado de error mayor que 128.

@item
Bash elimina el estado de un proceso en segundo plano finalizado de la lista
de tales estados despu@'es de que la instrucci@'on integrada @code{wait} sea
usada para obtenerlo.

@end enumerate

Hay otro comportamiento @sc{posix} que Bash no implementa por defecto
incluso en modo @sc{posix}.  Espec@'{@dotless{i}}ficamente:

@enumerate

@item
La instrucci@'on integrada @code{fc} comprueba @code{$EDITOR} como un
programa para editar entrada de historial si @code{FCEDIT} est@'a sin
establecer, en vez de recurrir directamente a @code{ed}.  @code{fc} usa
@code{ed} si @code{EDITOR} est@'a sin establecer.

@item
Como se indica anteriormente, Bash requiere que la opci@'on @code{xpg_echo}
est@'e activada para la instrucci@'on integrada @code{echo} para ser
completamente conforme.

@end enumerate

Bash puede configurarse para que sea conforme con @sc{posix} por defecto,
especificando la @option{--enable-strict-posix-default} para
@code{configure} al construir (@pxref{Funcionalidades Opcionales}).

@node Control de Tareas
@chapter Control de Tareas

Este cap@'{@dotless{i}}tulo discute qu@'e es el control de tareas, c@'omo
funciona y c@'omo Bash le permite acceder a sus herramientas.

@menu
* Fundamentos del Control de Tareas::  C@'omo funciona el control de tareas.
* Instrucciones Integradas de Control de Tareas::  Instrucciones integradas 
                                                     de Bash usadas para 
                                                     interactuar con el 
                                                     control detareas.
* Variables de Control de Tareas::  Variables que Bash usa para personalizar 
                                      el control de tareas.
@end menu

@node Fundamentos del Control de Tareas
@section Fundamentos del Control de Tareas
@cindex control de tareas
@cindex frente
@cindex fondo
@cindex suspender tareas

El control de tareas se refiere a la habilidad de parar selectivamente
(suspender) la ejecuci@'on de procesos y continuar (reanudar)  su
ejecuci@'on en un momento posterior.  Un usuario emplea
t@'{@dotless{i}}picamente esta herramienta mediante una interfaz interactiva
proporcionada conjuntamente por el controlador de terminal del n@'ucleo del
sistema operativo y Bash.

El int@'erprete asocia una @var{tarea} con cada tuber@'{@dotless{i}}a.
Mantiene una tabla de tareas ejecut@'andose actualmente, que puede ser
listada con la instrucci@'on @code{jobs}.  Cuando Bash inicia una tarea
as@'{@dotless{i}}ncronamente, imprime una l@'{@dotless{i}}nea con este
aspecto:
@example
[1] 25647
@end example
@noindent
indicando que esta tarea es el n@'umero de tarea 1 y que el @sc{id} de
proceso del @'ultimo proceso en la tuber@'{@dotless{i}}a asociado con esta
tarea es el 25647.  Cada uno de los procesos en una @'unica
tuber@'{@dotless{i}}a son miembros de la misma tarea.  Bash usa la
abstracci@'on @var{tarea} como la base para el control de tareas. 

Para facilitar la implementaci@'on de la interfaz de usuario para el control
de tareas, el sistema operativo mantiene la noci@'on de un @sc{id} de grupo
de proceso actual de terminal.  Los miembros de este grupo de proceso
(procesos cuyo @sc{id} de grupo de proceso es igual al @sc{id} de grupo de
proceso actual de terminal) reciben se@~nales generadas por el teclado como
@code{SIGINT}.  Se dice que estos procesos est@'an en primer plano.  Los
procesos en segundo plano son aquellos cuyo @sc{id} de grupo de proceso
difiere del de la terminal; estos procesos son inmunes a se@~nales generadas
con el teclado.  Solo se permite a los procesos en primer plano leer de o,
si el usuario especifica as@'{@dotless{i}} con @code{stty tostop}, escribir
a la terminal.  A los procesos en segundo plano que tratan de leer de
(escribir a cuando est@'a en efecto @code{stty tostop}) la terminal se les
env@'{@dotless{i}}a una se@~nal @code{SIGTTIN} (@code{SIGTTOU})  por el
controlador de la terminal del n@'ucleo, que, a no ser que se atrape,
suspende el proceso. 

Si el sistema operativo en que Bash se est@'a ejecutando soporta el control
de tareas, Bash contiene herramientas para usarlo.  Teclear el car@'acter
@var{suspend} (t@'{@dotless{i}}picamente @samp{^Z}, Control-Z) mientras
est@'a corriendo un proceso hace que el proceso se pare cuando trata de leer
entrada de la terminal y devuelva el control a Bash.  El usuario entonces
manipula el estado de esta tarea, usando la instrucci@'on @code{bg} para
continuarla en segundo plano, la instrucci@'on @code{fg} para continuarla en
primer plano o la instrucci@'on @code{kill} para matarla.  Un @samp{^Z}
tiene efecto inmediatamente, y tiene el efecto secundario adicional de hacer
que la salida pendiente y las pulsaciones adicionales sean descartadas. 

Hay varias formas de hacer referencia a una tarea en el int@'erprete.  El
car@'acter @samp{%} introduce una especificaci@'on de tarea (@var{jobspec}).

Se puede hacer referencia al n@'umero de tarea @code{n} con @samp{%n}.  Los
s@'{@dotless{i}}mbolos @samp{%%} y @samp{%+} hacen referencia a la noci@'on
del int@'erprete de la tarea actual, que es la @'ultima tarea detenida
mientras estaba en primer plano o comenzada en segundo plano.  Un @'unico
@samp{%} (sin una especificaci@'on de tarea que lo acompa@~ne) tambi@'en se
refiere a la tarea actual.  Se puede hacer referencia a la tarea previa
usando @samp{%-}.  Si hay solo una @'unica tarea, ambos @samp{%+} y
@samp{%-} pueden ser usados para hacer referencia a esa tarea.  En salida
referente a tareas (p. ej., la salida de la instrucci@'on @code{jobs}), la
tarea actual siempre se marca con un @samp{+}, y la tarea previa con un
@samp{-}. 

Tambi@'en se puede hacer referencia a una tarea usando un prefijo del nombre
usado para comenzarla o usando una subcadena que aparece en su
l@'{@dotless{i}}nea de instrucci@'on.  Por ejemplo, @samp{%ce} se refiere a
la tarea detenida @code{ce}.  Usando @samp{%?ce}, por otro lado, se refiere
a cualquier tarea que contenga la cadena @samp{ce} en su l@'{@dotless{i}}nea
de instrucci@'on.  Si el prefijo o la subcadena coincide con m@'as de una
tarea, Bash informa de un error.

Simplemente nombrar una tarea puede hacerse para traerla a primer plano:
@samp{%1} es un sin@'onimo de @samp{fg %1}, llevando la tarea 1 desde el
segundo plano a primer plano.  Similarmente, @samp{%1 &} reanuda la tarea 1
en segundo plano, equivalente a @samp{bg %1}

El int@'erprete se entera inmediatamente de cu@'ando un tarea cambia de
estado.  Normalmente, Bash espera hasta que est@'a a punto de imprimir un
prompt antes de informar de cambios en un estado de tarea para no
interrumpir cualquier otra salida.  Si est@'a habilitada la opci@'on
@option{-b} de la instrucci@'on integrada @code{set}, Bash importa tales
cambios inmediatamente (@pxref{La Instrucci@'on Integrada Set}).  Cualquier
trap en @code{SIGCHLD} se ejecuta para cada proceso hijo que finaliza.

Si se realiza un intento de salir de Bash mientras las tareas est@'an
detenidas (o corriendo, si la opci@'on @code{checkjobs} est@'a habilitada
---vea @ref{La Instrucci@'on Integrada Shopt}---), el int@'erprete imprime
un mensaje de advertencia, y si la opci@'on @code{checkjobs} est@'a
habilitada, lista las tareas y sus estados.  La instrucci@'on @code{jobs}
puede ser usada entonces para inspeccionar sus estados.  Si se realiza un
segundo intento de salir sin una instrucci@'on que intervenga, Bash no
imprime otra advertencia, y se finalizan todas las tareas detenidas.

@node Instrucciones Integradas de Control de Tareas
@section Instrucciones Integradas de Control de Tareas

@table @code

@item bg
@btindex bg
@example
bg [@var{espec-tarea} @dots{}]
@end example

Reanuda cada tarea @var{espec-tarea} suspendida en segundo plano, como si
hubiera sido iniciada con @samp{&}.  Si no se proporciona @var{espec-tarea},
se usa la tarea actual.  El estado de retorno es cero a no ser que se
ejecute cuando el control de tareas no est@'e activado, o, cuando se ejecute
con el control de tareas activado, la @var{espec-tarea} no fue encontrada o
especifica una tarea que fue iniciada sin control de tareas.

@item fg
@btindex fg
@example
fg [@var{espec-tarea}]
@end example

Reanuda la tarea @var{espec-tarea} en primer plano y la hace la tarea
actual.  Si no se proporciona @var{espec-tarea}, se usa la tarea actual.  El
estado de retorno es el de la instrucci@'on ubicada en primer plano, o
distinto de cero si se ejecuta cuando el control de tareas est@'a
desactivado, o, cuando el control de tareas est@'a activado, la
@var{espec-tarea} no especifica una tarea v@'alida o @var{espec-tarea}
especifica una tarea que fue iniciada sin control de tareas.

@item jobs
@btindex jobs
@example
jobs [-lnprs] [@var{espec-tarea}]
jobs -x @var{instrucciones} [@var{argumentos}]
@end example

La primera forma lista las tareas activas.  Las opciones tienen los
siguientes significados:

@table @code
@item -l
Lista @sc{id}s de proceso adem@'as de la informaci@'on normal.

@item -n
Muestra informaci@'on solo sobre tareas que han cambiado el estado desde que
usuario fue notificado por @'ultima vez de su estado.

@item -p
Lista solo el @sc{id} de proceso del l@'{@dotless{i}}der de grupo de proceso
de la tarea.

@item -r
Muestra solo las tareas corriendo.

@item -s
Muestra solo las tareas detenidas.
@end table

Si se pasa @var{espec-tarea}, la salida es restringida a informaci@'on sobre
esa tarea.  Si no se proporciona @var{espec-tarea}, se lista el estado de
todas las tareas.

Si se proporciona la opci@'on @option{-x}, @code{jobs} reemplaza cualquier
@var{espec-tarea} encontrada en @var{instrucci@'on} o @var{argumentos} con
el @sc{id} de proceso de grupo correspondiente, y ejecuta
@var{instrucci@'on}, pas@'andole @var{argumento}s, devolviendo su estado de
salida. 

@item kill
@btindex kill
@example
kill [-s @var{especse@~n}] [-n @var{numse@~n}] [-@var{especse@~n}] @var{espectarea} or @var{pid}
kill -l|-L [@var{estado_salida}]
@end example

Env@'{@dotless{i}}a una se@~nal especificada por @var{especse@~n} o
@var{numse@~n} al proceso llamado por la especificaci@'on de tarea
@var{jobspec} o @sc{id} de proceso @var{pid}.  @var{especse@~n} es o un
nombre de se@~nal independiente de may@'usculas y min@'usculas como
@code{SIGINT} (con o sin el prefijo @code{SIG})  o un n@'umero de se@~nal;
@var{numse@~n} es un n@'umero de se@~nal.  Si no est@'an presentes ni
@var{especse@~n} ni @var{numse@~n}, se usa @code{SIGTERM}.  La opci@'on
@option{-l} lista los nombres de se@~nal.  Si se proporcionan argumentos
cuando se pasa @option{-l}, se listan los nombres de las se@~nales
correspondientes a los argumentos, y el estado de retorno es cero.
@var{estado_salida} es el n@'umero que especifica un n@'umero de se@~nal o
el estado de salida de un proceso terminado por una se@~nal.  La opci@'on
@option{-L} es equivalente a @option{-l}.  El estado de retorno es cero si
al menos una se@~nal fue enviada exitosamente, o distinto de cero si ocurre
un error o se encuentra una opci@'on inv@'alida.

@item wait
@btindex wait
@example
wait [-n] [@var{espectarea} or @var{pid} @dots{}]
@end example

Espera hasta que el proceso hijo especificado por cada @sc{id} de proceso
@var{pid} o especificaci@'on de tarea @var{espectarea} finalice y devuelve
el estado de salida de la @'ultima instrucci@'on a la que se espera.  Si se
pasa una especificaci@'on de tarea, se esperan todos los procesos en la
tarea.  Si no se pasan argumentos, se esperan todos los procesos hijos
actualmente activos, y el estado de retorno es cero.  Si se proporciona la
opci@'on @option{-n}, @code{wait} espera a que la tarea termine y devuelve
su estado de salida.  Si ni @var{espectarea} ni @var{pid} especifican un
proceso hijo activo del int@'erprete, el estado de retorno es 127.

@item disown
@btindex disown
@example
disown [-ar] [-h] [@var{espectarea} @dots{} | @var{pid} @dots{} ]
@end example

Sin opciones, elimina cada @var{espectarea} de la tabla de tareas activas.
Si se pasa la opci@'on @option{-h}, no se elimina la tarea de la tabla, pero
se marca de forma que no se env@'{@dotless{i}}e @code{SIGHUB} a la tarea si
el int@'erprete recibe una @code{SIGHUP}.  Si no est@'a presente
@var{espectarea} y no se proporcionan ni la opci@'on @option{-a} ni la
@option{-r}, se usa la tarea actual.  Si no se proporciona ninguna
@var{espectarea}, la opci@'on @option{-a} significa eliminar o marcar todas
las tareas; la opci@'on @option{-r} sin un argumento @var{espectarea}
restringe la operaci@'on a tareas en ejecuci@'on.

@item suspend
@btindex suspend
@example
suspend [-f]
@end example

Suspende la ejecuci@'on de este int@'erprete hasta que recibe una se@~nal
@code{SIGCONT}.  No se puede suspender un int@'erprete de acceso; la
opci@'on @option{-f} puede usarse para sobrescribir esto y forzar la
suspensi@'on.
@end table

Cuando no est@'a activo el control de tareas, las instrucciones integradas
@code{kill} y @code{wait} no aceptan argumentos @var{espectarea}.  Deben ser
@sc{id}s de procesos proporcionados.

@node Variables de Control de Tareas
@section Variables de Control de Tareas

@vtable @code

@item auto_resume
Esta variable controla c@'omo el int@'erprete interact@'ua con el usuario y
el control de tareas.  Si esta variable existe, las instrucciones simples de
una palabra sin redirecci@'on son tratadas como candidatos para la
reanudaci@'on de una tarea existente.  No se permite ambigüedad; si hay
m@'as de una tarea que comienza por la cadena tecleada, se seleccionar@'a la
tarea m@'as recientemente accedida.  El nombre de una tarea detenida, en
este contexto, es la l@'{@dotless{i}}nea de orden usada para ejecutarla.  Si
esta variable est@'a establecida al valor @samp{exact}, la cadena
proporcionada debe coincidir con el nombre de una tarea detenida
recientemente; si establecida a @samp{substring}, la cadena proporcionada
necesita coincidir con una subcadena del nombre de una tarea detenida.  El
valor @samp{substring} proporciona funcionalidad an@'aloga al @sc{id} de
tarea @samp{%?} (@pxref{Fundamentos del Control de Tareas}).  Si est@'a
asignada con otro valor, la cadena proporcionada debe ser un prefijo de un
nombre de tarea detenida; esto proporciona funcionalidad an@'aloga al
@sc{id} de tarea @samp{%}.

@end vtable

@set readline-appendix
@set history-appendix
@cindex Readline, c@'omo usar
@include rluser.es.texi
@cindex Historial, c@'omo usar
@include hsuser.es.texi
@clear readline-appendix
@clear history-appendix

@node Instalaci@'on de Bash
@chapter Instalaci@'on de Bash

Este cap@'{@dotless{i}}tulo proporciona instrucciones b@'asicas para
instalar Bash en las distintas plataformas soportadas.  La distribuci@'on
soporta los sistemas operativos de @sc{gnu}, casi todas las versiones de
Unix y varios sistemas no Unix como BeOS e Interix.  Existen otras versiones
portadas independientes para @sc{ms-dos}, @sc{os/2} y plataformas Windows.

@menu
* Instalaci@'on B@'asica::   Instrucciones de instalaci@'on.
* Compiladores y opciones::  C@'omo habilitar opciones especiales para 
                               distintos sistemas.
* Compilando para M@'ultiples Arquitecturas::  C@'omo compilar Bash para 
                                                 m@'as de un tipo de sistema 
                                                 desde el mismo @'arbolde 
                                                 fuentes.
* Nombres de Instalaci@'on::  C@'omo establecer las distintas rutas usadas 
                                por la instalaci@'on.
* Especificando el Tipo de Sistema::  C@'omo configurar Bash para un sistema 
                                        concreto.
* Compartiendo Predeterminados::  C@'omo compartir los valores de 
                                    configuraci@'on predeterminados 
                                    entreprogramas GNU.
* Controles de Operaci@'on::  Opciones reconocidas por el programa de 
                                configuraci@'on.
* Funcionalidades Opcionales::  C@'omo habilitar y deshabilitar 
                                  funcionalidades opcionales al construirBash.
@end menu

@node Instalaci@'on B@'asica
@section Instalaci@'on B@'asica
@cindex instalaci@'on
@cindex configuraci@'on
@cindex instalaci@'on de Bash
@cindex configuraci@'on de Bash

Estas son las instrucciones de instalaci@'on para Bash.

La forma m@'as simple de compilar Bash es:

@enumerate
@item
Vaya con @code{cd} al directorio que contiene el c@'odigo fuente y escriba
@samp{./configure} para configurar Bash para su sistema.  Si est@'a usando
@code{csh} en una vieja versi@'on de System V, puede que necesite escribir
@samp{sh ./configure} en su lugar para evitar que @code{csh} intente
ejecutar el propio @code{configure}.

Ejecutar @code{configure} toma algo de tiempo.  Durante su ejecuci@'on,
imprime mensajes que dicen qu@'e caracter@'{@dotless{i}}sticas est@'a
comprobando.

@item
Escriba @samp{make} para compilar Bash y construir el guion de informe de
errores @code{bashbug}.

@item
Opcionalmente, escriba @samp{make tests} para ejecutar el conjunto de
pruebas de Bash.

@item
Escriba @samp{make install} para instalar @code{bash} y @code{bashbug}.
Esto tambi@'en instalar@'a las p@'aginas de manual y el archivo Info.

@end enumerate

El guion del int@'erprete @code{configure} trata de adivinar los valores
correctos para varias variables dependientes del sistema durante la
compilaci@'on.  Usa esos valores para crear un @file{Makefile} en cada
directorio del paquete (el directorio superior; los directorios
@file{builtins}, @file{doc} y @file{support}; cada directorio bajo
@file{lib}; y varios otros).  Tambi@'en crea un archivo @file{config.h} que
contiene definiciones dependientes del sistema.  Finalmente crea un guion
del int@'erprete llamado @code{config.status} que puede ejecutar en el
futuro para recrear la configuraci@'on actual, un archivo
@file{config.cache} que guarda los resultados de sus pruebas para acelerar
la reconfiguraci@'on y un archivo @file{config.log} que contiene salida de
compilador (@'util principalmente para depurar @code{configure}).  Si en
alg@'un momento @file{config.cache} contiene resultados que no quiere
conservar, puede eliminarlo o editarlo. 

Para averiguar m@'as sobre las opciones y argumentos que el guion
@code{configure} entiende, escriba 

@example
bash-2.04$ ./configure --help
@end example

@noindent
en el prompt de Bash en su directorio de fuentes de Bash.

Si necesita hacer cosas inusuales para compilar Bash, intente averiguar
c@'omo @code{configure} podr@'{@dotless{i}}a comprobar si hacerlas o no, y
envi@'e diffs o instrucciones a @email{bash-maintainers@@gnu.org} para que
puedan ser consideradas para la pr@'oxima publicación.

El archivo @file{configure.ac} se usa para crear @code{configure} por un
programa llamado Autoconf.  Solo necesita @file{configure.ac} si quiere
cambiarlo o regenerar @code{configure} usando una versi@'on m@'as reciente
de Autoconf.  Si hace esto, aseg@'urese de que est@'a usando la versi@'on de
Autoconf 2.50 o posterior.

Puede eliminar los binarios y archivos objeto del programa del directorio
del c@'odigo fuente escribiendo @samp{make clean}.  Para eliminar tambi@'en
los archivos que cre@'o @code{configure} (de forma que pueda compilar Bash
para un tipo de ordenador diferente), escriba @samp{make distclean}.

@node Compiladores y opciones
@section Compiladores y opciones

Algunos sistemas requieren opciones poco usuales para la compilaci@'on o el
enlazado sobre las que el guion @code{configure} no sabe.  Puede darle a
@code{configure} valores iniciales para variables estableci@'endolas en el
entorno.  Usando un int@'erprete compatible con Bourne, puede hacer esto en
la l@'{@dotless{i}}nea de @'ordenes as@'{@dotless{i}}:

@example
CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure
@end example

En sistemas que tienen el programa @code{env}, puede hacerlo
as@'{@dotless{i}}:

@example
env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure
@end example

El proceso de configuraci@'on usa GCC para construir Bash si est@'a
disponible.

@node Compilando para M@'ultiples Arquitecturas
@section Compilando para M@'ultiples Arquitecturas

Puede compilar Bash para m@'as de un tipo de ordenador al mismo tiempo,
ubicando los archivos objeto para cada arquitectura en su propio
directorio.  Para hacer esto, debe usar una versi@'on de @code{make} que
soporte la variable @code{VPATH}, como GNU @code{make}.  Vaya con @code{cd}
al directorio donde quiere que vayan los archivos objeto y ejecutables y
ejecute el guion @code{configure} desde el directorio fuente.  Puede que
necesite proporcionar el argumento @option{--srcdir=PATH} para decirle a
@code{configure} d@'onde est@'an los archivos fuente.  @code{configure}
comprueba autom@'aticamente el c@'odigo fuente en el directorio en que
est@'a @code{cofigure} y en `..'.

Si tiene que usar un @code{make} que no soporta la variable @code{VPATH},
puede compilar Bash para una arquitectura a la vez en el directorio del
c@'odigo fuente.  Despu@'es de que haya instalado Bash para una
arquitectura, use @samp{make distclean} antes de reconfigurar para otra
arquitectura.

Alternativamente, si su sistema soporta enlaces simb@'olicos, puede usar el
guion @file{support/mkclone} para crear un @'arbol de construcci@'on que
tiene enlaces simb@'olicos atr@'as a cada archivo en el directorio de
fuentes.  He aqu@'{@dotless{i}} un ejemplo que crea un directorio de
construcci@'on en el directorio actual desde un directorio fuente
@file{/usr/gnu/src/bash-2.0}:

@example
bash /usr/gnu/src/bash-2.0/support/mkclone -s /usr/gnu/src/bash-2.0 .
@end example

@noindent
El guion @code{mkclone} requiere Bash, as@'{@dotless{i}} que tiene que tener
ya Bash construido para al menos una arquitectura antes de que pueda crear
directorios de construcci@'on para otras arquitecturas.

@node Nombres de Instalaci@'on
@section Nombres de Instalaci@'on

Por defecto, @samp{make install} instalar@'a en @file{/usr/local/bin},
@file{/usr/local/man}, etc.  Puede especificar un prefijo de instalaci@'on
distinto de @file{/usr/local} pasando a @code{configure} la opci@'on
@option{--prefix=@var{RUTA}}, o especificando un valor para la variable de
@samp{make} @code{DESTDIR} al ejecutar @samp{make install}.

Puede especificar prefijos de instalaci@'on separados para archivos
espec@'{@dotless{i}}ficos de arquitectura y archivos independientes de la
arquitectura.  Si le pasa a @code{configure} la opci@'on
@option{--exec-prefix=@var{RUTA}},  @samp{make install} usar@'a @var{PATH}
como el prefijo para instalar programas y librer@'{@dotless{i}}as.  La
documentaci@'on y otros archivos de datos todav@'{@dotless{i}}a usar@'an el
prefijo normal. 

@node Especificando el Tipo de Sistema
@section Especificando el Tipo de Sistema

Puede haber algunas funcionalidades que @code{configure} no puede averiguar
autom@'aticamente, pero necesita determinar por el tipo de anfitri@'on en
que se ejecutar@'a Bash.  Normalmente @code{configure} puede averiguarlo,
pero si imprime un mensaje diciendo que no puede averiguar el tipo de
anfitri@'on, p@'asele la opci@'on @option{--host=TIPO}.  @samp{TIPO} puede
ser un nombre corto para el tipo de sistema, como @samp{sun4}, o un nombre
can@'onico con tres campos: @samp{CPU-EMPRESA-SISTEMA} (p. ej.,
@samp{i386-unknown-freebsd4.2}).

Vea el archivo @file{support/config.sub} para los posibles valores de cada
campo. 

@node Compartiendo Predeterminados
@section Compartiendo Predeterminados

Si quiere asignar valores predeterminados para que los compartan guiones
@code{configure}, puede crear un guion del int@'erprete del sitio llamado
@code{config.site} que le da valores predeterminados a variables como
@code{CC}, @code{cache_file} y @code{prefix}.  @code{configure} mira en
@file{PREFIX/share/config.site} si existe, despu@'es en
@file{PREFIX/etc/config.site} si existe.  O puede establecer la variable de
entorno @code{CONFIG_SITE} a la ubicaci@'on del guion del sitio.  Una
advertencia: el @code{configure} de Bash busca un guion de sitio, pero no
todos los guiones @code{configure} lo hacen.

@node Controles de Operaci@'on
@section Controles de Operaci@'on

@code{configure} reconoce las siguientes opciones para controlar c@'omo
opera.

@table @code

@item --cache-file=@var{archivo}
Usa y guarda los resultados de las pruebas en @var{archivo} en vez de
@file{./config.cache}.  Asigna @file{/dev/null} a @var{archivo}  para
deshabilitar el cach@'e, para depurar @code{configure}. 

@item --help
Imprime un resumen de las opciones para @code{configure}, y finaliza.

@item --quiet
@itemx --silent
@itemx -q
No imprime mensajes diciendo qu@'e comprobaciones se est@'an realizando.

@item --srcdir=@var{dir}
Busca el c@'odigo fuente de Bash en el directorio @var{dir}.  Normalmente
@code{configure} puede averiguar ese directorio autom@'aticamente.

@item --version
Imprime la versi@'on de Autoconf usada para generar el guion
@code{configure}, y finaliza.
@end table

@code{configure} tambi@'en acepta alguna otra opci@'on de plantilla, no
usadas ampliamente.  @code{configure --help} imprime la lista completa.

@node Funcionalidades Opcionales
@section Funcionalidades Opcionales

El @code{configure} de Bash tiene varias opciones
@option{--enable-@var{funcionalidad}}, donde @var{funcionalidad} indica una
parte opcional de Bash.  Tambi@'en hay varias opciones
@option{--with-@var{paquete}}, donde @var{paquete} es algo como
@samp{bash-malloc} o @samp{purify}.  Para desactivar el uso predeterminado
de un paquete, use @option{--without-@var{paquete}}.  Para configurar Bash
sin una funcionalidad que est@'e activada por defecto, use
@option{--disable-@var{funcionalidad}}.

He aqu@'{@dotless{i}} una lista completa de las opciones @option{--enable-}
y @option{--with-} que el @code{configure} de Bash reconoce. 

@table @code
@item --with-afs
Define si usar el Andrew File System de Transarc.

@item --with-bash-malloc
Usa la versi@'on de Bash de @code{malloc} en el directorio
@file{lib/malloc}.  Esto no es el mismo @code{malloc} que aparece en
@sc{gnu} libc, sino una versi@'on m@'as vieja derivada originalmente del
@code{malloc} de @sc{bsd} 4.2.  Este @code{malloc} es muy r@'apido, pero
desperdicia algo de espacio en cada asignaci@'on.  Esta opci@'on est@'a
activada por defecto.  El archivo @file{NOTES} contiene una lista de
sistemas para los cuales esto deber@'{@dotless{i}}a ser desactivado, y
@code{configure} deshabilita esta opci@'on autom@'aticamente para varios
sistemas.

@item --with-curses
Usa la biblioteca curses en vez de la biblioteca termcap.  Esto debe ser
proporcionado si su sistema tiene una base de datos inadecuada o incompleta
de termcap.

@item --with-gnu-malloc
Un sin@'onimo para @code{--with-bash-malloc}.

@item --with-installed-readline[=@var{PREFIJO}]
Define esto para enlazar Bash con una versi@'on instalada localmente de
Readline en vez de la versi@'on en @file{lib/readline}.  Esto solo funciona
con las versiones de Readline 5.0 y posteriores.  Si @var{PREFIJO} es
@code{yes} o no proporcionado, @code{configure} usa los valores de las
variables make @code{includedir} y @code{libdir}, que son subdirectorios de
@code{prefijo} por defecto, para encontrar la versi@'on instalada de
Readline si no est@'a en los directorios est@'andares del sistema de
inclusi@'on y bibliotecas.  Si @var{PREFIJO} es @code{no}, Bash se enlaza
con la versi@'on en @file{lib/readline}.  Si @var{PREFIJO} est@'a
establecido a cualquier otro valor, @code{configure} lo trata como un nombre
de ruta de directorio y busca la versi@'on instalada de Readline en
subdirectorios de ese directorio (archivos de inclusi@'on en
@var{PREFIJO}/@code{include} y la biblioteca en @var{PREFIJO}/@code{lib}).

@item --with-purify
Define esto para usar el comprobador de ubicaci@'on de memoria Purify de
Rational Software.

@item --enable-minimal-config
Esto produce un int@'erprete con funcionalidades m@'{@dotless{i}}nimas,
cercano al Bourne shell hist@'orico.
@end table

Hay varias opciones @option{--enable-} que alteran c@'omo se compila y se
enlaza Bash, en vez de cambiar funcionalidades de tiempo de ejecuci@'on.

@table @code
@item --enable-largefile
Habilita soporte para
@uref{https://en.wikipedia.org/wiki/Large_file_support, archivos grandes} si
el sistema operativo requiere opciones especiales de compilador para
construir programas que puede acceder a archivos grandes.  Esto est@'a
habilitado por defecto, si el sistema operativo ofrece soporte para archivos
grandes.

@item --enable-profiling
Esto construye un binario de Bash que produce informaci@'on de análisis de
rendimiento para ser procesada por @code{gprof} cada vez que se ejecuta.

@item --enable-static-link
Esto hace que Bash sea enlazado est@'aticamente, si se usa @code{gcc}.  Esto
podr@'{@dotless{i}}a ser usado para construir una versi@'on para usar como
int@'erprete de root.
@end table

La opci@'on @samp{minimal-config} se puede usar para deshabilitar todas las
siguientes opciones, pero se procesa primero, para que se puedan habilitar
opciones individuales usando @samp{enable-@var{funcionalidad}}. 

Todas las siguientes opciones excepto @samp{disabled-builtins},
@samp{direxpand-default} y @samp{xpg-echo-default} est@'an habilitadas por
defecto, a no ser que el sistema operativo no proporcione el soporte
necesario.

@table @code
@item --enable-alias
Permite la expansi@'on de alias e incluye las instrucciones integradas
@code{alias} y @code{unalias} (@pxref{Aliases}).

@item --enable-arith-for-command
Incluye soporte para la forma alternativa de la instrucci@'on @code{for} que
se comporta como la sentencia @code{for} del lenguaje C
(@pxref{Construcciones de Bucle}).

@item --enable-array-variables
Incluye soporte para variables del int@'erprete de vectores unidimensionales
(@pxref{Vectores}).

@item --enable-bang-history
Incluye soporte para la sustituci@'on de historial estilo @code{csh}
(@pxref{Interacci@'on con el Historial}).

@item --enable-brace-expansion
Incluye expansi@'on de llaves estilo @code{csh} ( @code{b@{a,b@}c}
@expansion{} @code{bac bbc} ).  Consulte @ref{Expansi@'on de Llaves}, para
una descripci@'on completa.

@item --enable-casemod-attributes
Incluye soporte para los atributos que cambian entre may@'usculas y
min@'usculas en la instrucci@'on integrada @code{declare} y sentencias de
asignaci@'on.  A las variables con el atributo @var{uppercase}, por ejemplo,
se les convertir@'an sus valores a may@'uscula en la asignaci@'on.

@item --enable-casemod-expansion
Incluye soporte para expansiones de palabras que modifican entre
may@'usculas y min@'usculas.

@item --enable-command-timing
Incluye soporte para reconocer @code{time} como una palabra reservada y para
mostrar estad@'{@dotless{i}}sticas de tiempo para la tuber@'{@dotless{i}}a
que sigue a @code{time} (@pxref{Tuber@'{@dotless{i}}as}).  Esto permite que
tanto tuber@'{@dotless{i}}as como instrucciones integradas del int@'erprete
y funciones sean cronometradas.

@item --enable-cond-command
Incluye soporte para la instrucci@'on condicional @code{[[}.
(@pxref{Construcciones Condicionales}).

@item --enable-cond-regexp
Incluye soporte para coincidir expresiones regulares @sc{posix} usando el
operador binario @samp{=~} en la instrucci@'on condicional @code{[[}.
(@pxref{Construcciones Condicionales}).

@item --enable-coprocesses
Incluye soporte para coprocesos y la palabra reservada @code{coproc}
(@pxref{Tuber@'{@dotless{i}}as}).

@item --enable-debugger
Incluye soporte para el depurador de Bash (distribuido por separado).

@item --enable-direxpand-default
Hace que la opci@'on del int@'erprete @code{direxpand} (@pxref{La
Instrucci@'on Integrada Shopt})  sea habilitada por defecto cuando se inicia
el int@'erprete.  Normalmente est@'a deshabilitada por defecto.

@item --enable-directory-stack
Incluye soporte para una pila de directorios del estilo @code{csh} y las
instrucciones integradas @code{pushd}, @code{popd} y @code{dirs} (@pxref{La
Pila de Directorios}).

@item --enable-disabled-builtins
Permite que las instrucciones integradas sean invocadas mediante
@samp{builtin xxx} incluso despu@'es de que @code{xxx} haya sido
deshabilitado usando @samp{enable -n xxx}.  Consulte @ref{Instrucciones
Integradas de Bash}, para detalles de las instrucciones integradas
@code{builtin} y @code{enable}.

@item --enable-dparen-arithmetic
Incluye soporte para la instrucci@'on @code{((@dots{}))}
(@pxref{Construcciones Condicionales}).

@item --enable-extended-glob
Incluye soporte para las funcionalidades extendidas de coincidencia de
patrones descritas antes en @ref{Coincidencia de Patrones}.

@item --enable-extended-glob-default
Habilita la opci@'on predeterminada de la opci@'on del int@'erprete
@var{extglob} descrita anteriormente en @ref{La Instrucci@'on Integrada
Shopt}.

@item --enable-function-import
Incluye soporte para importar definiciones de funci@'on exportadas por otra
instancia del int@'erprete desde el entorno.  Esta opci@'on est@'a
habilitada por defecto.

@item --enable-glob-asciirange-default
Habilita el valor predeterminado de la opci@'on del int@'erprete
@var{globasciiranges} descrita antes en @ref{La Instrucci@'on Integrada
Shopt}.  Esto controla el comportamiento de rangos de caracteres cuando se
usa en expresiones de llaves de coincidencia de patrones.

@item --enable-help-builtin
Incluye la instrucci@'on integrada @code{help}, que muestra ayuda sobre las
instrucciones integradas y variables del int@'erprete (@pxref{Instrucciones
Integradas de Bash}).

@item --enable-history
Incluye el historial de instrucciones y las instrucciones integradas
@code{fc} y @code{history} (@pxref{Servicios del Historial de Bash}).

@item --enable-job-control
Esto habilita las funcionalidades de control de tareas (@pxref{Control de
Tareas}), si el sistema operativo las soporta.

@item --enable-multibyte
Esto habilita el soporte para caracteres multibyte si el sistema operativo
proporciona el soporte necesario.

@item --enable-net-redirections
Esto habilita el manejo especial de nombres de archivo de la forma
@code{/dev/tcp/@var{anfitri@'on}/@var{puerto}} y
@code{/dev/udp/@var{host}/@var{port}} cuando se usan en redirecciones
(@pxref{Redirecciones}).

@item --enable-process-substitution
Esto permite la sustituci@'on de procesos (@pxref{Sustituci@'on de
Procesos}) si el sistema operativo proporciona el soporte necesario.

@item --enable-progcomp
Habilita las facilidades de compleci@'on programable (@pxref{Compleci@'on
Programable}).  Si Readline no est@'a habilitado, esta opci@'on no tiene
efecto.

@item --enable-prompt-string-decoding
Activa la interpretaci@'on de varios caracteres escapados con barras
invertidas en las cadenas del prompt @env{$PS1}, @env{$PS2}, @env{$PS3} y
@env{$PS4}.  Consulte @ref{Controlando el Prompt}, para una lista completa
de secuencias de escape de prompt.

@item --enable-readline
Incluye soporte para edici@'on en l@'{@dotless{i}}nea de @'ordenes e
historial con la versi@'on de Bash de la biblioteca Readline
(@pxref{Edici@'on en L@'{@dotless{i}}nea de @'Ordenes}).

@item --enable-restricted
Incluye soporte para un @dfn{int@'erprete restringido}.  Si esto est@'a
habilitado, Bash, cuando se ejecuta como @code{rbash}, entra en un modo
restringido.  Consulte @ref{El Int@'erprete Restringido}, para una
descripci@'on del modo restringido.

@item --enable-select
Incluye la instrucci@'on compuesta @code{select}, que permite la
generaci@'on de men@'us simples (@pxref{Construcciones Condicionales}).

@item --enable-separate-helpfiles
Usa archivos externos para la documentaci@'on mostrada por la instrucci@'on
integrada @code{help} en vez de almacenar el texto internamente.

@item --enable-single-help-strings
Guarda el texto mostrado por la instrucci@'on integrada @code{help} como una
cadena simple para cada tema de ayuda.  Esto ayuda a traducir el texto a
diferentes idiomas.  Puede que necesite deshabilitar esto si su compilador
no puede manejar literales de cadenas muy largos.

@item --enable-strict-posix-default
Hace a Bash conforme con el est@'andar @sc{posix} por defecto (@pxref{Modo
POSIX de Bash}).

@item --enable-usg-echo-default
Un sin@'onimo para @code{--enable-xpg-echo-default}.

@item --enable-xpg-echo-default
Hace que la instrucci@'on integrada @code{echo} expanda los caracteres
escapados por barras invertidas por defecto, sin requerir la opci@'on
@option{-e}.  Esto establece el valor predeterminado de la opci@'on del
int@'erprete @code{xpg_echo} a @code{on}, que hace que el @code{echo} de
Bash se comporte m@'as como la versi@'on especificada en la Especificaci@'on
@'Unica de Unix, versi@'on 3.  @xref{Instrucciones Integradas de Bash}, para
una descripci@'on de las secuencias de escape que @code{echo} reconoce.
@end table

El archivo @file{config-top.h} contiene sentencias de Preprocesador C
@samp{#define} para opciones que no se pueden establecer desde
@code{configure}.  Algunas de estas no est@'an pensadas para cambiarse;
at@'engase a las consecuencias si lo hace.  Lea los comentarios asociados
con cada definici@'on para m@'as informaci@'on sobre su efecto.

@node Notificar Errores
@appendix Notificar Errores

Por favor, reporte todos los errores que encuentre en Bash.  Pero primero,
deber@'{@dotless{i}}a asegurarse de que es realmente un error, y de que
aparece en la @'ultima versi@'on de Bash.  La @'ultima versi@'on de Bash
siempre est@'a disponible para FTP desde
@uref{ftp://ftp.gnu.org/pub/gnu/bash/}.

Una vez que haya determinado que existe realmente un error, use la
instrucci@'on @code{bashbug} para enviar un informe de fallo.  ¡Si tiene un
arreglo, le animamos a que nos env@'{@dotless{i}}e eso tambi@'en!
Sugerencias e informes de errores `filos@'oficos' pueden ser enviados a
@email{bug-bash@@gnu.org} o publicados en el grupo de noticias Usenet
@code{gnu.bash.org}.

Todos los informes de fallo deber@'{@dotless{i}}an incluir:
@itemize @bullet
@item
El n@'umero de versi@'on de Bash.
@item
El hardware y el sistema operativo.
@item
El compilador usado para compilar Bash.
@item
Una descripci@'on del comportamiento del error.
@item
Un guion corto o `receta' que produzca el fallo y pueda ser usado para
reproducirlo.
@end itemize

@noindent
@code{bashbug} inserta los primeros tres elementos autom@'aticamente en la
plantilla que proporciona para enviar un informe de fallo.

Por favor, env@'{@dotless{i}}e todos los informes relativos a este manual a
@email{bug-bash@@gnu.org}.

@node Diferencias Principales Respecto a The Bourne Shell
@appendix Diferencias Principales Respecto a The Bourne Shell

Bash implementa esencialmente la misma gram@'atica, expansi@'on de
par@'ametros y variables, redirecci@'on y entrecomillado que el Bourne
Shell.  Bash usa el est@'andar @sc{posix} como la especificaci@'on de c@'omo
deber@'{@dotless{i}}an ser implementadas estas
caracter@'{@dotless{i}}sticas.  Hay algunas diferencias entre el
int@'erprete Bourne tradicional y Bash; esta secci@'on detalla r@'apidamente
las diferencias significantes.  Varias de estas diferencias se explican
detalladamente en secciones previas.  Esta secci@'on usa la versi@'on de
@code{sh} incluida en SVR4.2 (la @'ultima versi@'on del hist@'orico
int@'erprete Bourne) como la referencia base.

@itemize @bullet

@item
Bash est@'a conforme con @sc{posix} incluso cuando la especificaci@'on
@sc{posix} difiere del comportamiento tradicional de @code{sh} (@pxref{Modo
POSIX de Bash}).

@item
Bash tiene opciones de llamada de varios caracteres (@pxref{Llamando a
Bash}).

@item
Bash tiene edici@'on en l@'{@dotless{i}}nea de @'ordenes (@pxref{Edici@'on
en L@'{@dotless{i}}nea de @'Ordenes}) y la instrucci@'on integrada
@code{bind}.

@item
Bash proporciona un mecanismo de compleci@'on programable de palabra
(@pxref{Compleci@'on Programable}), y las instrucciones integradas
@code{complete}, @code{compgen} y @code{compopt} para manipularlo.

@item
Bash tiene historial de instrucciones (@pxref{Servicios del Historial de
Bash}) y las instrucciones integradas @code{history} y @code{fc} para
manipularlo.  La lista del historial de Bash mantiene informaci@'on de
marcas de tiempo y usa el valor de la variable @code{HISTTIMEFORMAT} para
mostrarla.

@item
Bash implementa expansi@'on del historial estilo @code{csh}
(@pxref{Interacci@'on con el Historial}).

@item
Bash tiene variables de vectores unidimensionales (@pxref{Vectores}), y las
apropiadas expansiones de variable y sintaxis de asignaci@'on para usarlos.
Varias de las instrucciones integradas de Bash toman opciones para actuar
sobre vectores.  Bash ofrece una serie de variables de vectores integradas.

@item
La sintaxis de entrecomillado @code{$'@dots{}'}, que expande caracteres de
barra invertida ANSI-C en el texto entre las comillas simples, est@'a
soportada (@pxref{Entrecomillado ANSI-C}).

@item
Bash soporta la sintaxis de entrecomillado @code{$"@dots{}"} para hacer
tranducciones de regi@'on espec@'{@dotless{i}}fica de los caracteres entre
las comillas dobles.  Las opciones de llamada @option{-D},
@option{--dump-strings} y @option{--dump-po-strings} listan las cadenas
convertibles encontradas en un guion (@pxref{Traducci@'on de
Localizaci@'on}).

@item
Bash implementa la palabra clave @code{!} para negar el valor de retorno de
una tuber@'{@dotless{i}}a (@pxref{Tuber@'{@dotless{i}}as}).  Muy @'util
cuando una sentencia @code{if} solo tiene que actuar si una comprobaci@'on
falla.  La opci@'on de Bash @samp{-o pipefail} para @code{set} har@'a que
una tuber@'{@dotless{i}}a devuelva un estado de fallo si falla cualquier
instrucci@'on.

@item
Bash tiene la palabra reservada @code{time} y el cronometrado de
instrucciones (@pxref{Tuber@'{@dotless{i}}as}).  La muestra de las
est@'adisticas de tiempo puede ser controlada por la variable
@env{TIMEFORMAT}.

@item
Bash implementa la aritm@'etica @code{for (( @var{expr1} ; @var{expr2} ;
@var{expr3} ))} para instrucci@'on, similar al lenguaje C
(@pxref{Construcciones de Bucle}).

@item
Bash incluye la instrucci@'on compuesta @code{select}, que permite la
generaci@'on de men@'us simples (@pxref{Construcciones Condicionales}).

@item
Bash incluye la instrucci@'on compuesta @code{[[}, que hace la
comprobaci@'on condicional parte de la gram@'atica del int@'erprete
(@pxref{Construcciones Condicionales}), incluyendo correspondencias
opcionales de expresiones regulares.

@item
Bash proporciona coincidencia opcional independiente de min@'usculas y
may@'usculas para las construcciones @code{case} y @code{[[}.

@item
Bash incluye expansi@'on de llaves (@pxref{Expansi@'on de Llaves}) y
expansi@'on de virgulilla (@pxref{Expansi@'on de Virgulilla}).

@item
Bash implementa aliases de instrucciones y las instrucciones integradas
@code{alias} y @code{unalias} (@pxref{Aliases}).

@item
Bash proporciona aritm@'etica del int@'erprete, la instrucci@'on compuesta
@code{((} (@pxref{Construcciones Condicionales}) y expansi@'on aritm@'etica
(@pxref{Aritm@'etica del Int@'erprete}).

@item
Las variables presentes en el entorno inicial del int@'erprete son
exportadas autom@'aticamente a procesos hijos.  El Bourne shell no hace esto
normalmente a no ser que las variables sean expl@'{@dotless{i}}citamente
usando la instrucci@'on @code{export}.

@item
Bash soporta el operador de asignaci@'on @samp{+=}, que a@~nade al valor de
la variable nombrada en el lado izquierdo.

@item
Bash incluye las expansiones de eliminaci@'on de patrones @sc{posix}
@samp{%}, @samp{#}, @samp{%%} y @samp{##} para eliminar subcadenas iniciales
o finales de valores de variables (@pxref{Expansi@'on de Par@'ametros del
Int@'erprete}).

@item
La expansi@'on @code{$@{#xx@}}, que devuelve la longitud de @code{$@{xx@}},
est@'a soportada (@pxref{Expansi@'on de Par@'ametros del Int@'erprete}).

@item
La expansi@'on
@code{$@{var:}@var{desplazamiento}@code{[:}@var{longitud}@code{]@}}, que se
expande a la subcadena del valor de @code{var} de longitud @var{longitud},
empezando en @var{desplazamiento}, est@'a presente (@pxref{Expansi@'on de
Par@'ametros del Int@'erprete}).

@item
La expansi@'on
@code{$@{var/[/]}@var{patr@'on}@code{[/}@var{reemplazo}@code{]@}}, que
coincide con @var{patr@'on} y lo reemplaza por @var{reemplazo} en el valor
de @code{var}, est@'a disponible (@pxref{Expansi@'on de Par@'ametros del
Int@'erprete}).

@item
La expansi@'on @code{$@{!@var{prefijo}*@}}, que se expande a los nombres de
todas las variables del int@'erprete cuyos nombres comienzan por
@var{prefijo}, est@'a disponible (@pxref{Expansi@'on de Par@'ametros del
Int@'erprete}).

@item
Bash tiene expansi@'on de variable @var{indirecta} usando
@code{$@{!palabra@}} (@pxref{Expansi@'on de Par@'ametros del Int@'erprete}).

@item
Bash puede expandir par@'ametros posicionales m@'as all@'a de @code{$9}
usando @code{$@{@var{num}@}}.

@item
Se implementa la forma @sc{posix} @code{$()} de sustituci@'on de
instrucciones (@pxref{Sustituci@'on de Instrucciones}), y preferida al
@code{``} del Bourne shell (que tambi@'en se implementa para compatibilidad
hacia atr@'as).

@item
Bash tiene sustituci@'on de procesos (@pxref{Sustituci@'on de Procesos}).

@item
Bash autom@'aticamente asigna variables que proporcionan informaci@'on sobre
el usuario actual (@env{UID}, @env{EUID} y @env{GROUPS}), el anfitri@'on
actual (@env{HOSTTYPE}, @env{OSTYPE}, @env{MACHTYPE} y @env{HOSTNAME}), y la
instancia de Bash que se est@'a ejecutando (@env{BASH}, @env{BASH_VERSION},
and @env{BASH_VERSINFO}).  @xref{Variables de Bash}, para detalles.

@item
La variable @env{IFS} es usada para dividir solo los resultados de
expansi@'on, no todas las palabras (@pxref{Divisi@'on de Palabras}).  Esto
cierra un antiguo agujero de seguridad del int@'erprete.

@item
El c@'odigo de la expansi@'on de nombre de archivo usa @samp{!} y @samp{^}
para negar el conjunto de caracteres entre las llaves.  El Bourne shell usa
solo @samp{!}.

@item
Bash implementa el conjunto completo de operadores @sc{posix} de expansi@'on
de nombre de archivo, incluyendo @var{clases de caracteres}, @var{clases de
equivalencia} y @var{s@'{@dotless{i}}mbolos de ordenaci@'on}
(@pxref{Expansi@'on de Nombre de Archivo}).

@item
Bash implementa funcionalidades extendidas de coincidencia de patrones
cuando est@'a habilitada la opci@'on del int@'erprete @code{extglob}
(@pxref{Coincidencia de Patrones}).

@item
Es posible tener una variable y una funci@'on con el mismo nombre; @code{sh}
no separa los dos espacios de nombre.

@item
Se permite a las funciones de Bash tener variables locales usando la
instrucci@'on integrada @code{local}, y as@'{@dotless{i}} se pueden escribir
funciones recursivas @'utiles (@pxref{Instrucciones Integradas de Bash}).

@item
Las asignaciones de variables que preceden a instrucciones afectan solo a
esa instrucci@'on, incluso instrucciones int@'ergradas y funciones
(@pxref{Entorno}).  En @code{sh}, todas las asignaciones de variables que
preceden a instrucciones son globales a no ser que la instrucci@'on se
ejecute desde el sistema de archivos.

@item
Bash realiza expansi@'on de nombre de archivo en nombres de archivos
especificados como operandos para operadores de redirecci@'on de entrada y
salida (@pxref{Redirecciones}).

@item
Bash contiene el operador de redirecci@'on @samp{<>}, permitiendo a un
archivo ser abierto tanto para lectura como escritura, y el operador de
redirecci@'on @samp{&>}, para dirigir salida est@'andar y error est@'andar
al mismo archivo (@pxref{Redirecciones}).

@item
Bash incluye el operador de redirecci@'on @samp{<<<}, permitiendo que una
cadena sea usada como la entrada est@'andar en una instrucci@'on.

@item
Bash implementa los operadores de redirecci@'on @samp{[n]<&@var{palabra}} y
@samp{[n]>&@var{palabra}}, que mueven un descriptor de archivo a otro.

@item
Bash trata varios nombres de archivo de forma especial cuando son usados en
operadores de redirecci@'on (@pxref{Redirecciones}).

@item
Bash puede abrir conexiones de red a m@'aquinas y servicios arbitrarios con
los operadores de redirecci@'on (@pxref{Redirecciones}).

@item
La opci@'on @code{noclobber} est@'a disponible para evitar sobrescribir
archivos existentes con la redirecci@'on de salida (@pxref{La Instrucci@'on
Integrada Set}).  El operador de redirecci@'on @samp{>|} puede ser usado
para sobrescribir @code{noclobber}.

@item
Las instrucciones integradas de Bash @code{cd} y @code{pwd}
(@pxref{Instrucciones Integradas del Bourne Shell}) toman las opciones
@option{-L} y @option{-P} para alternar entre los modos l@'ogico y
f@'{@dotless{i}}sico.

@item
Bash permite a una funci@'on sobrescribir una instrucci@'on integrada con el
mismo nombre y proporciona acceso a la funcionalidad de esa instrucci@'on
integrada dentro de la funci@'on a trav@'es de las instrucciones integradas
@code{builtin} y @code{command} (@pxref{Instrucciones Integradas de Bash}).

@item
La instrucci@'on integrada @code{command} permite deshabilitar
selectivamente funciones cuando se realiza la b@'usqueda de instrucciones
(@pxref{Instrucciones Integradas de Bash}).

@item
Se pueden habilitar o deshabilitar instrucciones integradas individuales
usando la instrucci@'on integrada @code{enable} (@pxref{Instrucciones
Integradas de Bash}).

@item
La instrucci@'on integrada de Bash @code{exec} toma opciones adicionales que
permiten a los usuarios controlar los contenidos pasados a la instrucci@'on
ejecutada, y cu@'al va a ser el argumento n@'umero 0 (@pxref{Instrucciones
Integradas del Bourne Shell}).

@item
Las funciones del int@'erprete pueden ser exportadas a hijos a trav@'es del
entorno usando @code{export -f} (@pxref{Funciones del Int@'erprete}).

@item
Las instrucciones integradas de Bash @code{export}, @code{readonly} y
@code{declare} pueden tomar una opci@'on @option{-f} para actuar en
funciones del int@'erprete, una opci@'on @option{-p} para mostrar
variables con varios atributos asignados en un formato que puede ser
reutilizado como entrada del int@'erprete, una opci@'on @option{-n}
para eliminar varios atributos de variable y argumentos
@samp{nombre=valor} para establecer atributos y valores de variable
simult@'aneamente.

@item
La instrucci@'on integrada @code{hash} de Bash permite que un nombre sea
asociado con un nombre de archivo arbitrario, incluso cuando ese nombre de
archivo no pueda ser encontrado buscando el @env{$PATH}, usando @samp{hash
-p} (@pxref{Instrucciones Integradas del Bourne Shell}).

@item
Bash incluye una instrucci@'on integrada @code{help} como referencia
r@'apida a facilidades del int@'erprete (@pxref{Instrucciones Integradas de
Bash}).

@item
La instrucci@'on integrada @code{printf} est@'a disponible para mostrar
salida con formato (@pxref{Instrucciones Integradas de Bash}).

@item
La instrucci@'on integrada de Bash @code{read} (@pxref{Instrucciones
Integradas de Bash}) leer@'a una l@'{@dotless{i}}nea acabada en @samp{\} con
la opci@'on @option{-r}, y usar@'a la variable @env{REPLY} como
predeterminada si no se proporciona ning@'un argumento que no sea una
opci@'on.  La instrucci@'on integrada de Bash @code{read} tambi@'en acepta
una cadena de prompt con la opci@'on @option{-p} y usar@'a Readline para
obtener la l@'{@dotless{i}}nea cuando se pase la opci@'on @option{-e}.  La
instrucci@'on integrada @code{read} tambi@'en tiene opciones adicionales
para controlar la entrada: la opci@'on @option{-s} desactivar@'a la
impresi@'on de caracteres cuando son le@'{@dotless{i}}dos, la opci@'on
@option{-t} permitir@'a a @code{read} quedarse sin tiempo si la entrada no
llega dentro de un n@'umero de segundos especificado, la opci@'on
@option{-n} permitir@'a leer solo un n@'umero especificado de caracteres en
vez de una l@'{@dotless{i}}nea completa y la opci@'on @option{-d} leer@'a
hasta un car@'acter particular en vez de hasta nueva l@'{@dotless{i}}nea.

@item
La instrucci@'on integrada @code{return} puede ser usada para abortar la
ejecuci@'on de guiones ejecutados con las instrucciones integradas @code{.}
o @code{source} (@pxref{Instrucciones Integradas del Bourne Shell}).

@item
Bash incluye la instrucci@'on integrada @code{shopt}, para mejor control de
las capacidades opcionales de Bash (@pxref{La Instrucci@'on Integrada
Shopt}), y permite habilitar y deshabilitar estas opciones durante la
llamada del int@'erprete (@pxref{Llamando a Bash}).

@item
Bash tiene un comportamiento mucho m@'as opcional controlable con la
instrucci@'on integrada @code{set} (@pxref{La Instrucci@'on Integrada Set}).

@item
La opci@'on @samp{-x} (@option{xtrace}) muestra instrucciones aparte de
instrucciones simples al realizar un rastreo de ejecuci@'on (@pxref{La
Instrucci@'on Integrada Set}).

@item
La instrucci@'on integrada @code{test} (@pxref{Instrucciones Integradas de
Bash}) es ligeramente diferente, a como implementa el algoritmo @sc{posix},
que especifica el comportamiento basado en el n@'umero de argumentos.

@item
Bash incluye la instrucci@'on integrada @code{caller}, que muestra el
contexto de cualquier llamada de subrutina activa (una funci@'on del
int@'erprete o un guion ejecutado con las instrucciones integradas @code{.}
o @code{source}).  Esto soporta el depurador de Bash.

@item
La instrucci@'on integrada @code{trap} (@pxref{Instrucciones Integradas del
Bourne Shell}) permite una especificaci@'on de pseudose@~nal @code{DEBUG},
similar a @code{EXIT}.  Las instrucciones especificadas con una trap
@code{DEBUG} se ejecutan antes de cada instrucci@'on simple, instrucci@'on
@code{for}, instrucci@'on @code{case}, instrucci@'on @code{select}, cada
instrucci@'on aritm@'etica @code{for}, y antes de que la primera
instrucci@'on se ejecute en una funci@'on del int@'erprete.  La trap
@code{DEBUG} no es heredada por funciones del int@'erprete a no ser que se
haya dado a la funci@'on el atributo @code{trace} o la opci@'on
@code{functrace} haya sido habilitada usando la instrucci@'on integrada
@code{shopt}.  La opci@'on del int@'erprete @code{extdebug} tiene efectos
adicionales en la trap @code{DEBUG}.

La instrucci@'on integrada @code{trap} (@pxref{Instrucciones Integradas del
Bourne Shell}) permite una especificaci@'on de pseudose@~nal @code{ERR},
similar a @code{EXIT} y @code{DEBUG}.  Las instrucciones especificadas con
una trap @code{ERR} se ejecutan despu@'es de que falle una instrucci@'on
simple, con unas pocas excepciones.  La trap @code{ERR} no es heredada por
funciones del int@'erprete a no ser que est@'e habilitada la opci@'on
@code{-o errtrace} para la instrucci@'on integrada @code{set}.

La instrucci@'on integrada @code{trap} (@pxref{Instrucciones Integradas del
Bourne Shell}) permite una especificaci@'on de pseudose@~nal @code{RETURN},
similar a @code{EXIT} y @code{DEBUG}.  Las instrucciones especificadas con
una trap @code{RETURN} son ejecutadas antes de que la ejecuci@'on se reanude
despu@'es de que una funci@'on del int@'erprete o un guion del int@'erprete
se ejecute con retornos @code{.} o @code{source}.  La trap @code{RETURN} no
se hereda por funciones del int@'erprete a no ser que se haya dado a la
funci@'on el atributo @code{trace} o la opci@'on @code{functrace} haya sido
habilitada usando la instrucci@'on integrada @code{shopt}.

@item
La instrucci@'on integrada @code{type} de Bash es m@'as extensa y da m@'as
informaci@'on sobre los nombres que encuentra (@pxref{Instrucciones
Integradas de Bash}).

@item
La instrucci@'on integrada @code{umask} de Bash permite que una
opci@'on @option{-p} haga que la salida sea mostrada en la forma de la
instrucci@'on @code{umask} que pueda ser reutilizada como entrada
(@pxref{Instrucciones Integradas del Bourne Shell}).

@item
Bash implementa una pila de directorios del estilo @code{csh} y proporciona
las instrucciones @code{pushd}, @code{popd} y @code{dirs} para manipularla
(@pxref{La Pila de Directorios}).  Bash hace tambi@'en visible la pila de
directorios como el valor de la variable del int@'erprete @env{DIRSTACK}.

@item
Bash interpreta caracteres especiales escapados con barras invertidas en las
cadenas del prompt cuando es interactivo (@pxref{Controlando el Prompt}).

@item
El modo restringido de Bash es m@'as @'util (@pxref{El Int@'erprete
Restringido}); el modo restringido del int@'erprete SVR4.2 es demasiado
restringido.

@item
La instrucci@'on integrada @code{disown} puede eliminar una tarea de la
tabla interna de tareas del int@'erprete (@pxref{Instrucciones Integradas de
Control de Tareas}) o suprimir el env@'{@dotless{i}}o de @code{SIGHUP} a una
tarea cuando finaliza el int@'erprete como el resultado de una
@code{SIGHUB}.

@item
Bash incluye varias funcionalidades para ofrecer un depurador separado para
guiones del int@'erprete.

@item
El int@'erprete SVR4.2 tiene dos instrucciones integradas relacionadas con
privilegios (@code{mldmode} y @code{priv}) inexistentes en Bash.

@item
Bash no tiene las instrucciones integradas @code{stop} o @code{newgrp}.

@item
Bash no usa la variable @env{SHACCT} o realiza contabilidad del
int@'erprete.

@item
El @code{sh} SVR4.2 usa una variable @env{TIMEOUT} como Bash usas
@env{TMOUT}.

@end itemize

@noindent
Se pueden encontrar m@'as funcionalidades de Bash en @ref{Funcionalidades de
Bash}.


@appendixsec Diferencias de Implementaci@'on Respecto al Int@'erprete SVR4.2

Puesto que Bash es una implementaci@'on completamente nueva, no tiene muchas
de las limitaciones del int@'erprete SVR4.2.  Por ejemplo:

@itemize @bullet

@item
Bash no se bifurca en un subint@'erprete al redirigir en o desde una
estructura de control como una sentencia @code{if} o @code{while}.

@item
Bash no permite comillas sin correspondencia.  El int@'erprete SVR4.2
insertar@'a silenciosamente una comilla de cierre necesaria en @code{EOF}
bajo ciertas circunstancias.  Esto puede ser la causa de algunos errores
dif@'{@dotless{i}}ciles de encontrar.

@item
El int@'erprete SVR4.2 usa un pomposo esquema de gesti@'on de memoria basado
en el atrapado de @code{SIGSEGV}.  Si se inicia el int@'erprete desde un
proceso con @code{SIGSEGV} bloqueado (p. ej., usando la llamada de la
biblioteca C @code{system()}), act@'ua mal.

@item
Un en cuestionable intento de seguridad, el int@'erprete SVR4.2, al llamarse
sin la opci@'on @option{-p}, alterar@'a sus @sc{uid} y @sc{gid} reales y
efectivos si son menores que alg@'un umbral m@'agico, com@'unmente 100.
Esto puede llevar a resultados inesperados.

@item
El int@'erprete SVR4.2 no permite a usuarios usar las traps @code{SIGSEGV},
@code{SIGALRM} o @code{SIGCHLD}.

@item
El int@'erprete SVR4.2 no permite eliminar las variables @env{IFS},
@env{MAILCHECK}, @env{PATH}, @env{PS1} o @env{PS2}.

@item
El int@'erprete SVR4.2 trata @samp{^} como el equivalente sin documentar de
@samp{|}.

@item
Bash permite m@'ultiples argumentos de opci@'on cuando es llamado (@code{-x
-v}); el int@'erprete SVR4.2 permite solo un argumento de opci@'on
(@code{-xv}).  De hecho, algunas versiones del int@'erprete vuelcan la
memoria si el segundo argumento empieza con un @samp{-}.

@item
El int@'erprete SVR4.2 finaliza un guion si falla cualquier instrucci@'on
integrada; Bash finaliza un guion solo si una de las instrucciones
integradas especiales @sc{posix} falla, y solo para ciertos fallos, seg@'un
se enumera en el est@'andar @sc{posix}.

@item
El int@'erprete SVR4.2 se comporta diferente cuando se llama como @code{jsh}
(activa el control de tareas).
@end itemize

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi
@node Traducci@'on de GNU Free Documentation License
@appendix Traducci@'on de GNU Free Documentation License

@include fdl.es.texi

@node Glosarios
@appendix Glosarios

@menu
* @'Indice Integrado::       @'Indice de instrucciones integradas de Bash.
* @'Indice de Palabras Reservadas::  @'Indice de palabras reservadas de 
                                       Bash.
* @'Indice de Variables::    Referencia r@'apida que le ayuda a encontrar la 
                               variable que quiere.
* @'Indice de Funciones::    @'Indice de funciones Readline asociables.
* @'Indice Conceptual::      @'Indice general de conceptos descritos en este 
                               manual.
@end menu

@node @'Indice Integrado
@appendixsec @'Indice de Instrucciones Integradas del Int@'erprete
@printindex bt

@node @'Indice de Palabras Reservadas
@appendixsec @'Indice de Palabras Reservadas del Int@'erprete
@printindex rw

@node @'Indice de Variables
@appendixsec @'Indice de Par@'ametros y Variables
@printindex vr

@node @'Indice de Funciones
@appendixsec @'Indice de Funciones
@printindex fn

@node @'Indice Conceptual
@appendixsec @'Indice Conceptual
@printindex cp

@bye
